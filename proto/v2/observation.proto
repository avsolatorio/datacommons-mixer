// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";
package datacommons.v2;

option go_package = "github.com/datacommonsorg/mixer/internal/proto/v2";

import "stat.proto";

// Holds all observations of a particular variable.
message VariableObservation {
  // Keyed by entity DCID
  map<string, EntityObservation> observations_by_entity = 1;
}

//
message EntityObservation {
  // Facet are orderred by preference.
  repeated FacetObservation ordered_facet_observations = 1;
}

message FacetObservation {
  string facet_id = 1;
  // Observations are sorted by date
  repeated datacommons.PointStat observations = 2;
}

// Generic observation request
message ObservationRequest {
  // A list of entity DCIDs
  repeated string entities = 1;
  // An arrow notation expression of entities
  // Ex: country/USA<-containedInPlace{typeOf: State}
  string entities_expression = 2;
  // A list of statistical variable DCIDs
  repeated string variables = 3;
  // An arrow notation expression of variables
  // Ex: dc/g/Root<-memberOf
  string variables_expression = 4;
  // Date of the observation
  // - Not specified: all observations are returned
  // - "LATEST": latest obseration of each facet is returned
  // - "<DATE>": a speficied valid ISO 8601 date. Observation corresponding to
  //   this date is returned.
  string date = 5;
  // When specified, only observation with this unit is returned.
  string unit = 6;
  // When specified, only observation with this measurement method is returned.
  string measurement_method = 7;
  // When specified, only observation with this observation period is returned.
  string period = 8;
}

message ObservationResponse {
  // Keyed by variable DCID
  map<string, VariableObservation> observations_by_variable = 1;
  // Keyed by facet ID
  map<string, datacommons.StatMetadata> facets = 2;
}
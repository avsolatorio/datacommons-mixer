// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: mixer.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Option_CacheChoice int32

const (
	Option_DEFAULT Option_CacheChoice = 0
	// Only get data from main cache.
	Option_BASE_CACHE_ONLY Option_CacheChoice = 1
)

// Enum value maps for Option_CacheChoice.
var (
	Option_CacheChoice_name = map[int32]string{
		0: "DEFAULT",
		1: "BASE_CACHE_ONLY",
	}
	Option_CacheChoice_value = map[string]int32{
		"DEFAULT":         0,
		"BASE_CACHE_ONLY": 1,
	}
)

func (x Option_CacheChoice) Enum() *Option_CacheChoice {
	p := new(Option_CacheChoice)
	*p = x
	return p
}

func (x Option_CacheChoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Option_CacheChoice) Descriptor() protoreflect.EnumDescriptor {
	return file_mixer_proto_enumTypes[0].Descriptor()
}

func (Option_CacheChoice) Type() protoreflect.EnumType {
	return &file_mixer_proto_enumTypes[0]
}

func (x Option_CacheChoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Option_CacheChoice.Descriptor instead.
func (Option_CacheChoice) EnumDescriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{0, 0}
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheChoice Option_CacheChoice `protobuf:"varint,1,opt,name=cache_choice,json=cacheChoice,proto3,enum=datacommons.Option_CacheChoice" json:"cache_choice,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{0}
}

func (x *Option) GetCacheChoice() Option_CacheChoice {
	if x != nil {
		return x.CacheChoice
	}
	return Option_DEFAULT
}

// A graph query request in Sparql query language.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sparql query string.
	Sparql string `protobuf:"bytes,1,opt,name=sparql,proto3" json:"sparql,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRequest) GetSparql() string {
	if x != nil {
		return x.Sparql
	}
	return ""
}

// Cell in the QueryResponse
type QueryResponseCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cell value.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Provenance ID.
	ProvenanceId string `protobuf:"bytes,2,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
}

func (x *QueryResponseCell) Reset() {
	*x = QueryResponseCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponseCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponseCell) ProtoMessage() {}

func (x *QueryResponseCell) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponseCell.ProtoReflect.Descriptor instead.
func (*QueryResponseCell) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{2}
}

func (x *QueryResponseCell) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QueryResponseCell) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

// A graph query response row corresponding to the query variables in graph query.
type QueryResponseRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of QueryResponseCell.
	Cells []*QueryResponseCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *QueryResponseRow) Reset() {
	*x = QueryResponseRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponseRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponseRow) ProtoMessage() {}

func (x *QueryResponseRow) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponseRow.ProtoReflect.Descriptor instead.
func (*QueryResponseRow) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{3}
}

func (x *QueryResponseRow) GetCells() []*QueryResponseCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

// Graph query response.
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for selected variable. Size of the header is the same as number
	// of cells for each row.
	Header []string `protobuf:"bytes,1,rep,name=header,proto3" json:"header,omitempty"`
	// Query results, with each row containing cells corresponding to header
	// variable order.
	Rows []*QueryResponseRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{4}
}

func (x *QueryResponse) GetHeader() []string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QueryResponse) GetRows() []*QueryResponseRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

// Request to translate a graph query.
type TranslateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String representaion of schema mappings used to translate.
	SchemaMapping string `protobuf:"bytes,1,opt,name=schema_mapping,json=schemaMapping,proto3" json:"schema_mapping,omitempty"`
	// String representation of sparql query.
	Sparql string `protobuf:"bytes,2,opt,name=sparql,proto3" json:"sparql,omitempty"`
}

func (x *TranslateRequest) Reset() {
	*x = TranslateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateRequest) ProtoMessage() {}

func (x *TranslateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateRequest.ProtoReflect.Descriptor instead.
func (*TranslateRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{5}
}

func (x *TranslateRequest) GetSchemaMapping() string {
	if x != nil {
		return x.SchemaMapping
	}
	return ""
}

func (x *TranslateRequest) GetSparql() string {
	if x != nil {
		return x.Sparql
	}
	return ""
}

// Response of a translate request.
type TranslateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The translated sql.
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// Serialized json string of the translation result
	Translation string `protobuf:"bytes,2,opt,name=translation,proto3" json:"translation,omitempty"`
}

func (x *TranslateResponse) Reset() {
	*x = TranslateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateResponse) ProtoMessage() {}

func (x *TranslateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateResponse.ProtoReflect.Descriptor instead.
func (*TranslateResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{6}
}

func (x *TranslateResponse) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *TranslateResponse) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

// Request to get property labels.
type GetPropertyLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of nodes.
	Dcids  []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	Option *Option  `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetPropertyLabelsRequest) Reset() {
	*x = GetPropertyLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyLabelsRequest) ProtoMessage() {}

func (x *GetPropertyLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyLabelsRequest.ProtoReflect.Descriptor instead.
func (*GetPropertyLabelsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{7}
}

func (x *GetPropertyLabelsRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetPropertyLabelsRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response returned by GetPropertyLabels.
type GetPropertyLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPropertyLabelsResponse) Reset() {
	*x = GetPropertyLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyLabelsResponse) ProtoMessage() {}

func (x *GetPropertyLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetPropertyLabelsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{8}
}

func (x *GetPropertyLabelsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get all neighboring nodes along an edge labeled by a property.
type GetPropertyValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of nodes to query for.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	// The type of the neighboring node to query for.
	ValueType string `protobuf:"bytes,2,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	// The property to get adjacent nodes for.
	Property string `protobuf:"bytes,3,opt,name=property,proto3" json:"property,omitempty"`
	// Maximum number of nodes to query for.
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Direction, "in" or "out", default to "out".
	Direction string  `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`
	Option    *Option `protobuf:"bytes,6,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetPropertyValuesRequest) Reset() {
	*x = GetPropertyValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyValuesRequest) ProtoMessage() {}

func (x *GetPropertyValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyValuesRequest.ProtoReflect.Descriptor instead.
func (*GetPropertyValuesRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{9}
}

func (x *GetPropertyValuesRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetPropertyValuesRequest) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *GetPropertyValuesRequest) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *GetPropertyValuesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPropertyValuesRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetPropertyValuesRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response returned by GetPropertyValues.
type GetPropertyValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPropertyValuesResponse) Reset() {
	*x = GetPropertyValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyValuesResponse) ProtoMessage() {}

func (x *GetPropertyValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyValuesResponse.ProtoReflect.Descriptor instead.
func (*GetPropertyValuesResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{10}
}

func (x *GetPropertyValuesResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get all triples linking to the given nodes.
type GetTriplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of the nodes to query for.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	// Maximum number of triples for each property and type of the neighbor.
	Limit  int32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Option *Option `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetTriplesRequest) Reset() {
	*x = GetTriplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriplesRequest) ProtoMessage() {}

func (x *GetTriplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriplesRequest.ProtoReflect.Descriptor instead.
func (*GetTriplesRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{11}
}

func (x *GetTriplesRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetTriplesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTriplesRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response returned by GetTriples.
type GetTriplesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetTriplesResponse) Reset() {
	*x = GetTriplesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriplesResponse) ProtoMessage() {}

func (x *GetTriplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriplesResponse.ProtoReflect.Descriptor instead.
func (*GetTriplesResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{12}
}

func (x *GetTriplesResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get all population/observation information for a place.
type GetPopObsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DCID of a place.
	Dcid   string  `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Option *Option `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetPopObsRequest) Reset() {
	*x = GetPopObsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopObsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopObsRequest) ProtoMessage() {}

func (x *GetPopObsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopObsRequest.ProtoReflect.Descriptor instead.
func (*GetPopObsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{13}
}

func (x *GetPopObsRequest) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *GetPopObsRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response of GetPopObs.
type GetPopObsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPopObsResponse) Reset() {
	*x = GetPopObsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopObsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopObsResponse) ProtoMessage() {}

func (x *GetPopObsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopObsResponse.ProtoReflect.Descriptor instead.
func (*GetPopObsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{14}
}

func (x *GetPopObsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Represents a property value pair.
type PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The property schema
	Property string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	// The value in string.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PropertyValue) Reset() {
	*x = PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValue) ProtoMessage() {}

func (x *PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValue.ProtoReflect.Descriptor instead.
func (*PropertyValue) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{15}
}

func (x *PropertyValue) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Requests to get observation for all place.
type GetPlaceObsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the place.
	PlaceType string `protobuf:"bytes,1,opt,name=place_type,json=placeType,proto3" json:"place_type,omitempty"`
	// The type of the Statistical population.
	PopulationType string `protobuf:"bytes,2,opt,name=population_type,json=populationType,proto3" json:"population_type,omitempty"`
	// A list of constraining property values that defines the population.
	Pvs []*PropertyValue `protobuf:"bytes,3,rep,name=pvs,proto3" json:"pvs,omitempty"`
	// Observation date.
	ObservationDate string  `protobuf:"bytes,4,opt,name=observation_date,json=observationDate,proto3" json:"observation_date,omitempty"`
	Option          *Option `protobuf:"bytes,5,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetPlaceObsRequest) Reset() {
	*x = GetPlaceObsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaceObsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaceObsRequest) ProtoMessage() {}

func (x *GetPlaceObsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaceObsRequest.ProtoReflect.Descriptor instead.
func (*GetPlaceObsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{16}
}

func (x *GetPlaceObsRequest) GetPlaceType() string {
	if x != nil {
		return x.PlaceType
	}
	return ""
}

func (x *GetPlaceObsRequest) GetPopulationType() string {
	if x != nil {
		return x.PopulationType
	}
	return ""
}

func (x *GetPlaceObsRequest) GetPvs() []*PropertyValue {
	if x != nil {
		return x.Pvs
	}
	return nil
}

func (x *GetPlaceObsRequest) GetObservationDate() string {
	if x != nil {
		return x.ObservationDate
	}
	return ""
}

func (x *GetPlaceObsRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response of GetPlaceObs.
type GetPlaceObsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPlaceObsResponse) Reset() {
	*x = GetPlaceObsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaceObsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaceObsResponse) ProtoMessage() {}

func (x *GetPlaceObsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaceObsResponse.ProtoReflect.Descriptor instead.
func (*GetPlaceObsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{17}
}

func (x *GetPlaceObsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Represents observation time series data.
type ObsTimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          map[string]float64            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // Date to value.
	Unit          string                        `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	PlaceName     string                        `protobuf:"bytes,3,opt,name=place_name,json=placeName,proto3" json:"place_name,omitempty"`
	IsDcAggregate bool                          `protobuf:"varint,4,opt,name=is_dc_aggregate,json=isDcAggregate,proto3" json:"is_dc_aggregate,omitempty"`
	PlaceDcid     string                        `protobuf:"bytes,5,opt,name=place_dcid,json=placeDcid,proto3" json:"place_dcid,omitempty"` // Only set if the key uses mid.
	SourceSeries  []*ObsTimeSeries_SourceSeries `protobuf:"bytes,6,rep,name=source_series,json=sourceSeries,proto3" json:"source_series,omitempty"`
}

func (x *ObsTimeSeries) Reset() {
	*x = ObsTimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsTimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsTimeSeries) ProtoMessage() {}

func (x *ObsTimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsTimeSeries.ProtoReflect.Descriptor instead.
func (*ObsTimeSeries) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{18}
}

func (x *ObsTimeSeries) GetData() map[string]float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ObsTimeSeries) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ObsTimeSeries) GetPlaceName() string {
	if x != nil {
		return x.PlaceName
	}
	return ""
}

func (x *ObsTimeSeries) GetIsDcAggregate() bool {
	if x != nil {
		return x.IsDcAggregate
	}
	return false
}

func (x *ObsTimeSeries) GetPlaceDcid() string {
	if x != nil {
		return x.PlaceDcid
	}
	return ""
}

func (x *ObsTimeSeries) GetSourceSeries() []*ObsTimeSeries_SourceSeries {
	if x != nil {
		return x.SourceSeries
	}
	return nil
}

// Wrapper for observation data.
type ChartStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//	*ChartStore_ObsTimeSeries
	Val isChartStore_Val `protobuf_oneof:"val"`
}

func (x *ChartStore) Reset() {
	*x = ChartStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartStore) ProtoMessage() {}

func (x *ChartStore) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartStore.ProtoReflect.Descriptor instead.
func (*ChartStore) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{19}
}

func (m *ChartStore) GetVal() isChartStore_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ChartStore) GetObsTimeSeries() *ObsTimeSeries {
	if x, ok := x.GetVal().(*ChartStore_ObsTimeSeries); ok {
		return x.ObsTimeSeries
	}
	return nil
}

type isChartStore_Val interface {
	isChartStore_Val()
}

type ChartStore_ObsTimeSeries struct {
	ObsTimeSeries *ObsTimeSeries `protobuf:"bytes,1,opt,name=obs_time_series,json=obsTimeSeries,proto3,oneof"`
}

func (*ChartStore_ObsTimeSeries) isChartStore_Val() {}

// Request message for GetStats.
type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of the place.
	Place []string `protobuf:"bytes,1,rep,name=place,proto3" json:"place,omitempty"`
	// The dcid of the StatisticalVariable.
	StatsVar string  `protobuf:"bytes,2,opt,name=stats_var,json=statsVar,proto3" json:"stats_var,omitempty"`
	Option   *Option `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatsRequest) GetPlace() []string {
	if x != nil {
		return x.Place
	}
	return nil
}

func (x *GetStatsRequest) GetStatsVar() string {
	if x != nil {
		return x.StatsVar
	}
	return ""
}

func (x *GetStatsRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response of GetStats
type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{21}
}

func (x *GetStatsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request message for GetPopCategory.
type GetPopCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the place.
	PlaceType string `protobuf:"bytes,1,opt,name=place_type,json=placeType,proto3" json:"place_type,omitempty"`
}

func (x *GetPopCategoryRequest) Reset() {
	*x = GetPopCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopCategoryRequest) ProtoMessage() {}

func (x *GetPopCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetPopCategoryRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{22}
}

func (x *GetPopCategoryRequest) GetPlaceType() string {
	if x != nil {
		return x.PlaceType
	}
	return ""
}

// Response of GetPopCategory.
type GetPopCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPopCategoryResponse) Reset() {
	*x = GetPopCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopCategoryResponse) ProtoMessage() {}

func (x *GetPopCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetPopCategoryResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{23}
}

func (x *GetPopCategoryResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get certain population for a set of places.
type GetPopulationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DCIDs for a list of places.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	// Population type.
	PopulationType string `protobuf:"bytes,2,opt,name=population_type,json=populationType,proto3" json:"population_type,omitempty"`
	// A list of constraining property values that define the population.
	Pvs    []*PropertyValue `protobuf:"bytes,3,rep,name=pvs,proto3" json:"pvs,omitempty"`
	Option *Option          `protobuf:"bytes,4,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetPopulationsRequest) Reset() {
	*x = GetPopulationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopulationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopulationsRequest) ProtoMessage() {}

func (x *GetPopulationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopulationsRequest.ProtoReflect.Descriptor instead.
func (*GetPopulationsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{24}
}

func (x *GetPopulationsRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetPopulationsRequest) GetPopulationType() string {
	if x != nil {
		return x.PopulationType
	}
	return ""
}

func (x *GetPopulationsRequest) GetPvs() []*PropertyValue {
	if x != nil {
		return x.Pvs
	}
	return nil
}

func (x *GetPopulationsRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response of GetPopulation.
type GetPopulationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPopulationsResponse) Reset() {
	*x = GetPopulationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopulationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopulationsResponse) ProtoMessage() {}

func (x *GetPopulationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopulationsResponse.ProtoReflect.Descriptor instead.
func (*GetPopulationsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{25}
}

func (x *GetPopulationsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get observation given a list of population and observation properties.
type GetObservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Population for a list of populations.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	// The measured property of the observation.
	MeasuredProperty string `protobuf:"bytes,2,opt,name=measured_property,json=measuredProperty,proto3" json:"measured_property,omitempty"`
	// The observation date.
	ObservationDate string `protobuf:"bytes,3,opt,name=observation_date,json=observationDate,proto3" json:"observation_date,omitempty"`
	// The statistics type, like "measured_value", "median_value", etc...
	// TODO: Change the variable name to 'stat_type' to be consistent.
	StatsType string `protobuf:"bytes,4,opt,name=stats_type,json=statsType,proto3" json:"stats_type,omitempty"`
	// (Optional) Observation period like "P1Y", "P3M" etc...
	ObservationPeriod string `protobuf:"bytes,5,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// (Opitonal) Measurement method used to get the observation.
	MeasurementMethod string  `protobuf:"bytes,6,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	Option            *Option `protobuf:"bytes,7,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *GetObservationsRequest) Reset() {
	*x = GetObservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObservationsRequest) ProtoMessage() {}

func (x *GetObservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObservationsRequest.ProtoReflect.Descriptor instead.
func (*GetObservationsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{26}
}

func (x *GetObservationsRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetObservationsRequest) GetMeasuredProperty() string {
	if x != nil {
		return x.MeasuredProperty
	}
	return ""
}

func (x *GetObservationsRequest) GetObservationDate() string {
	if x != nil {
		return x.ObservationDate
	}
	return ""
}

func (x *GetObservationsRequest) GetStatsType() string {
	if x != nil {
		return x.StatsType
	}
	return ""
}

func (x *GetObservationsRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *GetObservationsRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetObservationsRequest) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

// Response of GetObservation request.
type GetObservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetObservationsResponse) Reset() {
	*x = GetObservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObservationsResponse) ProtoMessage() {}

func (x *GetObservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObservationsResponse.ProtoReflect.Descriptor instead.
func (*GetObservationsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{27}
}

func (x *GetObservationsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get places that are contained in parent places.
type GetPlacesInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent place dcids.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	// The child place type.
	PlaceType string `protobuf:"bytes,2,opt,name=place_type,json=placeType,proto3" json:"place_type,omitempty"`
}

func (x *GetPlacesInRequest) Reset() {
	*x = GetPlacesInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlacesInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlacesInRequest) ProtoMessage() {}

func (x *GetPlacesInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlacesInRequest.ProtoReflect.Descriptor instead.
func (*GetPlacesInRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{28}
}

func (x *GetPlacesInRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetPlacesInRequest) GetPlaceType() string {
	if x != nil {
		return x.PlaceType
	}
	return ""
}

// Response of GetPlacesIn.
type GetPlacesInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetPlacesInResponse) Reset() {
	*x = GetPlacesInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlacesInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlacesInResponse) ProtoMessage() {}

func (x *GetPlacesInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlacesInResponse.ProtoReflect.Descriptor instead.
func (*GetPlacesInResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{29}
}

func (x *GetPlacesInResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get related places of a place for a given statistical variable.
type GetRelatedPlacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Place DCIDs.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
	// Population type.
	PopulationType string `protobuf:"bytes,2,opt,name=population_type,json=populationType,proto3" json:"population_type,omitempty"`
	// A list of constraining property values that defines the population.
	Pvs []*PropertyValue `protobuf:"bytes,3,rep,name=pvs,proto3" json:"pvs,omitempty"`
	// The measured property of the observation.
	MeasuredProperty string `protobuf:"bytes,4,opt,name=measured_property,json=measuredProperty,proto3" json:"measured_property,omitempty"`
	// (Opitonal) Measurement method.
	MeasurementMethod string `protobuf:"bytes,5,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (Opitonal) Measurement denominator.
	MeasurementDenominator string `protobuf:"bytes,6,opt,name=measurement_denominator,json=measurementDenominator,proto3" json:"measurement_denominator,omitempty"`
	// (Opitonal) Measurement qualifier.
	MeasurementQualifier string `protobuf:"bytes,7,opt,name=measurement_qualifier,json=measurementQualifier,proto3" json:"measurement_qualifier,omitempty"`
	// (Opitonal) Scaling factor.
	ScalingFactor string `protobuf:"bytes,8,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	// (Optional) Unit.
	Unit string `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
	// The statistics type, like "measured", "median", etc...
	StatType string `protobuf:"bytes,10,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`
	// (Optional) Wheter to require same place type for related places.
	SamePlaceType bool `protobuf:"varint,11,opt,name=same_place_type,json=samePlaceType,proto3" json:"same_place_type,omitempty"`
	// (Optional) Whether to require all related places under the same ancestor.
	WithinPlace string `protobuf:"bytes,12,opt,name=within_place,json=withinPlace,proto3" json:"within_place,omitempty"`
	// (Opitonal) Whether the computation needs to be based on per capita.
	IsPerCapita bool `protobuf:"varint,13,opt,name=is_per_capita,json=isPerCapita,proto3" json:"is_per_capita,omitempty"`
}

func (x *GetRelatedPlacesRequest) Reset() {
	*x = GetRelatedPlacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedPlacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedPlacesRequest) ProtoMessage() {}

func (x *GetRelatedPlacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedPlacesRequest.ProtoReflect.Descriptor instead.
func (*GetRelatedPlacesRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{30}
}

func (x *GetRelatedPlacesRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

func (x *GetRelatedPlacesRequest) GetPopulationType() string {
	if x != nil {
		return x.PopulationType
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetPvs() []*PropertyValue {
	if x != nil {
		return x.Pvs
	}
	return nil
}

func (x *GetRelatedPlacesRequest) GetMeasuredProperty() string {
	if x != nil {
		return x.MeasuredProperty
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetMeasurementDenominator() string {
	if x != nil {
		return x.MeasurementDenominator
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetMeasurementQualifier() string {
	if x != nil {
		return x.MeasurementQualifier
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetStatType() string {
	if x != nil {
		return x.StatType
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetSamePlaceType() bool {
	if x != nil {
		return x.SamePlaceType
	}
	return false
}

func (x *GetRelatedPlacesRequest) GetWithinPlace() string {
	if x != nil {
		return x.WithinPlace
	}
	return ""
}

func (x *GetRelatedPlacesRequest) GetIsPerCapita() bool {
	if x != nil {
		return x.IsPerCapita
	}
	return false
}

// Response of GetRelatedPlaces request.
type GetRelatedPlacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetRelatedPlacesResponse) Reset() {
	*x = GetRelatedPlacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedPlacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedPlacesResponse) ProtoMessage() {}

func (x *GetRelatedPlacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedPlacesResponse.ProtoReflect.Descriptor instead.
func (*GetRelatedPlacesResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{31}
}

func (x *GetRelatedPlacesResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get interesting aspects for places.
type GetInterestingPlaceAspectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Place DCIDs.
	Dcids []string `protobuf:"bytes,1,rep,name=dcids,proto3" json:"dcids,omitempty"`
}

func (x *GetInterestingPlaceAspectsRequest) Reset() {
	*x = GetInterestingPlaceAspectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterestingPlaceAspectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterestingPlaceAspectsRequest) ProtoMessage() {}

func (x *GetInterestingPlaceAspectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterestingPlaceAspectsRequest.ProtoReflect.Descriptor instead.
func (*GetInterestingPlaceAspectsRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{32}
}

func (x *GetInterestingPlaceAspectsRequest) GetDcids() []string {
	if x != nil {
		return x.Dcids
	}
	return nil
}

// Response to get interesting aspects for places.
type GetInterestingPlaceAspectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetInterestingPlaceAspectsResponse) Reset() {
	*x = GetInterestingPlaceAspectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterestingPlaceAspectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterestingPlaceAspectsResponse) ProtoMessage() {}

func (x *GetInterestingPlaceAspectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterestingPlaceAspectsResponse.ProtoReflect.Descriptor instead.
func (*GetInterestingPlaceAspectsResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{33}
}

func (x *GetInterestingPlaceAspectsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request to get chart data.
type GetChartDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keys.
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GetChartDataRequest) Reset() {
	*x = GetChartDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartDataRequest) ProtoMessage() {}

func (x *GetChartDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartDataRequest.ProtoReflect.Descriptor instead.
func (*GetChartDataRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{34}
}

func (x *GetChartDataRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Response to get chart data.
type GetChartDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetChartDataResponse) Reset() {
	*x = GetChartDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartDataResponse) ProtoMessage() {}

func (x *GetChartDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartDataResponse.ProtoReflect.Descriptor instead.
func (*GetChartDataResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{35}
}

func (x *GetChartDataResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Search request sent to the mixer.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search query which is just a plain text string, e.g. "california".
	// This is not a datalog query, but a plain text query. The mixer is free
	// to choose an interpretation of the query, e.g. using NLP or just plain
	// keyword search and return relevant entities from the graph.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Maximum number of entities to return.
	MaxResults int32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{36}
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

// Search response from mixer.
type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matching entities broken down by type.
	Section []*SearchResultSection `protobuf:"bytes,1,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{37}
}

func (x *SearchResponse) GetSection() []*SearchResultSection {
	if x != nil {
		return x.Section
	}
	return nil
}

// Wrapper for all entities returned from search which belong to a single type.
type SearchResultSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of entities in this section.
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// List of entities in this section.
	Entity []*SearchEntityResult `protobuf:"bytes,2,rep,name=entity,proto3" json:"entity,omitempty"`
}

func (x *SearchResultSection) Reset() {
	*x = SearchResultSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResultSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResultSection) ProtoMessage() {}

func (x *SearchResultSection) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResultSection.ProtoReflect.Descriptor instead.
func (*SearchResultSection) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{38}
}

func (x *SearchResultSection) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SearchResultSection) GetEntity() []*SearchEntityResult {
	if x != nil {
		return x.Entity
	}
	return nil
}

// Data for a single entity returned by the search endpoint.
type SearchEntityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DCID of the entity.
	Dcid string `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
	// Name of the entity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SearchEntityResult) Reset() {
	*x = SearchEntityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntityResult) ProtoMessage() {}

func (x *SearchEntityResult) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntityResult.ProtoReflect.Descriptor instead.
func (*SearchEntityResult) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{39}
}

func (x *SearchEntityResult) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *SearchEntityResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PopObsObservation holds information for an observation for the
// Population-Observation knowledge graph..
type PopObsObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                   string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	MeasuredProp           string   `protobuf:"bytes,3,opt,name=measured_prop,json=measuredProp,proto3" json:"measured_prop,omitempty"`
	MinValue               float64  `protobuf:"fixed64,4,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue               float64  `protobuf:"fixed64,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MeanValue              float64  `protobuf:"fixed64,6,opt,name=mean_value,json=meanValue,proto3" json:"mean_value,omitempty"`
	MedianValue            float64  `protobuf:"fixed64,7,opt,name=median_value,json=medianValue,proto3" json:"median_value,omitempty"`
	MeasuredValue          float64  `protobuf:"fixed64,8,opt,name=measured_value,json=measuredValue,proto3" json:"measured_value,omitempty"`
	SampleSize             float64  `protobuf:"fixed64,9,opt,name=sample_size,json=sampleSize,proto3" json:"sample_size,omitempty"`
	MarginOfError          float64  `protobuf:"fixed64,10,opt,name=margin_of_error,json=marginOfError,proto3" json:"margin_of_error,omitempty"`
	StdError               float64  `protobuf:"fixed64,11,opt,name=std_error,json=stdError,proto3" json:"std_error,omitempty"`
	MeanStdError           float64  `protobuf:"fixed64,12,opt,name=mean_std_error,json=meanStdError,proto3" json:"mean_std_error,omitempty"`
	SumValue               float64  `protobuf:"fixed64,13,opt,name=sum_value,json=sumValue,proto3" json:"sum_value,omitempty"`
	Percentile10           float64  `protobuf:"fixed64,14,opt,name=percentile10,proto3" json:"percentile10,omitempty"`
	Percentile25           float64  `protobuf:"fixed64,15,opt,name=percentile25,proto3" json:"percentile25,omitempty"`
	Percentile75           float64  `protobuf:"fixed64,16,opt,name=percentile75,proto3" json:"percentile75,omitempty"`
	Percentile90           float64  `protobuf:"fixed64,17,opt,name=percentile90,proto3" json:"percentile90,omitempty"`
	Unit                   string   `protobuf:"bytes,18,opt,name=unit,proto3" json:"unit,omitempty"`
	MeasurementMethod      string   `protobuf:"bytes,19,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	ProvenanceId           string   `protobuf:"bytes,20,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	ObservationDate        string   `protobuf:"bytes,22,opt,name=observation_date,json=observationDate,proto3" json:"observation_date,omitempty"`
	ObservationPeriod      string   `protobuf:"bytes,23,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	MeasurementResult      string   `protobuf:"bytes,24,opt,name=measurement_result,json=measurementResult,proto3" json:"measurement_result,omitempty"`
	GrowthRate             float64  `protobuf:"fixed64,25,opt,name=growth_rate,json=growthRate,proto3" json:"growth_rate,omitempty"`
	ObservedNode           string   `protobuf:"bytes,26,opt,name=observed_node,json=observedNode,proto3" json:"observed_node,omitempty"` // Won't persist to cache.
	ComparisonOperator     string   `protobuf:"bytes,27,opt,name=comparison_operator,json=comparisonOperator,proto3" json:"comparison_operator,omitempty"`
	StdDeviationValue      float64  `protobuf:"fixed64,28,opt,name=std_deviation_value,json=stdDeviationValue,proto3" json:"std_deviation_value,omitempty"`
	MeasurementDenominator string   `protobuf:"bytes,29,opt,name=measurement_denominator,json=measurementDenominator,proto3" json:"measurement_denominator,omitempty"`
	MeasurementQualifier   string   `protobuf:"bytes,30,opt,name=measurement_qualifier,json=measurementQualifier,proto3" json:"measurement_qualifier,omitempty"`
	ScalingFactor          string   `protobuf:"bytes,31,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	MeasurementVariable    []string `protobuf:"bytes,32,rep,name=measurement_variable,json=measurementVariable,proto3" json:"measurement_variable,omitempty"`
	StatType               string   `protobuf:"bytes,33,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`         // Won't persist to cache.
	StatVarIds             []string `protobuf:"bytes,34,rep,name=stat_var_ids,json=statVarIds,proto3" json:"stat_var_ids,omitempty"` // Only set for PopObs cache.
}

func (x *PopObsObservation) Reset() {
	*x = PopObsObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopObsObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopObsObservation) ProtoMessage() {}

func (x *PopObsObservation) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopObsObservation.ProtoReflect.Descriptor instead.
func (*PopObsObservation) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{40}
}

func (x *PopObsObservation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PopObsObservation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PopObsObservation) GetMeasuredProp() string {
	if x != nil {
		return x.MeasuredProp
	}
	return ""
}

func (x *PopObsObservation) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *PopObsObservation) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *PopObsObservation) GetMeanValue() float64 {
	if x != nil {
		return x.MeanValue
	}
	return 0
}

func (x *PopObsObservation) GetMedianValue() float64 {
	if x != nil {
		return x.MedianValue
	}
	return 0
}

func (x *PopObsObservation) GetMeasuredValue() float64 {
	if x != nil {
		return x.MeasuredValue
	}
	return 0
}

func (x *PopObsObservation) GetSampleSize() float64 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *PopObsObservation) GetMarginOfError() float64 {
	if x != nil {
		return x.MarginOfError
	}
	return 0
}

func (x *PopObsObservation) GetStdError() float64 {
	if x != nil {
		return x.StdError
	}
	return 0
}

func (x *PopObsObservation) GetMeanStdError() float64 {
	if x != nil {
		return x.MeanStdError
	}
	return 0
}

func (x *PopObsObservation) GetSumValue() float64 {
	if x != nil {
		return x.SumValue
	}
	return 0
}

func (x *PopObsObservation) GetPercentile10() float64 {
	if x != nil {
		return x.Percentile10
	}
	return 0
}

func (x *PopObsObservation) GetPercentile25() float64 {
	if x != nil {
		return x.Percentile25
	}
	return 0
}

func (x *PopObsObservation) GetPercentile75() float64 {
	if x != nil {
		return x.Percentile75
	}
	return 0
}

func (x *PopObsObservation) GetPercentile90() float64 {
	if x != nil {
		return x.Percentile90
	}
	return 0
}

func (x *PopObsObservation) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PopObsObservation) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *PopObsObservation) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (x *PopObsObservation) GetObservationDate() string {
	if x != nil {
		return x.ObservationDate
	}
	return ""
}

func (x *PopObsObservation) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *PopObsObservation) GetMeasurementResult() string {
	if x != nil {
		return x.MeasurementResult
	}
	return ""
}

func (x *PopObsObservation) GetGrowthRate() float64 {
	if x != nil {
		return x.GrowthRate
	}
	return 0
}

func (x *PopObsObservation) GetObservedNode() string {
	if x != nil {
		return x.ObservedNode
	}
	return ""
}

func (x *PopObsObservation) GetComparisonOperator() string {
	if x != nil {
		return x.ComparisonOperator
	}
	return ""
}

func (x *PopObsObservation) GetStdDeviationValue() float64 {
	if x != nil {
		return x.StdDeviationValue
	}
	return 0
}

func (x *PopObsObservation) GetMeasurementDenominator() string {
	if x != nil {
		return x.MeasurementDenominator
	}
	return ""
}

func (x *PopObsObservation) GetMeasurementQualifier() string {
	if x != nil {
		return x.MeasurementQualifier
	}
	return ""
}

func (x *PopObsObservation) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *PopObsObservation) GetMeasurementVariable() []string {
	if x != nil {
		return x.MeasurementVariable
	}
	return nil
}

func (x *PopObsObservation) GetStatType() string {
	if x != nil {
		return x.StatType
	}
	return ""
}

func (x *PopObsObservation) GetStatVarIds() []string {
	if x != nil {
		return x.StatVarIds
	}
	return nil
}

// PopObsPop holds information for a statistical population for the
// Population-Observation knowledge graph.
type PopObsPop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopType           string               `protobuf:"bytes,1,opt,name=pop_type,json=popType,proto3" json:"pop_type,omitempty"`
	NumConstraints    int32                `protobuf:"varint,2,opt,name=num_constraints,json=numConstraints,proto3" json:"num_constraints,omitempty"`
	Observations      []*PopObsObservation `protobuf:"bytes,5,rep,name=observations,proto3" json:"observations,omitempty"`
	ProvenanceId      string               `protobuf:"bytes,6,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	PropertyValues    map[string]string    `protobuf:"bytes,8,rep,name=property_values,json=propertyValues,proto3" json:"property_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlaceId           string               `protobuf:"bytes,9,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"` // Won't persist to cache.
	PopId             string               `protobuf:"bytes,10,opt,name=pop_id,json=popId,proto3" json:"pop_id,omitempty"`
	ChildhoodLocation string               `protobuf:"bytes,11,opt,name=childhood_location,json=childhoodLocation,proto3" json:"childhood_location,omitempty"` // Won't persist to cache.
	// Observations whose comparedNode is this population.
	ComparedObservations []*PopObsObservation `protobuf:"bytes,12,rep,name=compared_observations,json=comparedObservations,proto3" json:"compared_observations,omitempty"`
}

func (x *PopObsPop) Reset() {
	*x = PopObsPop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopObsPop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopObsPop) ProtoMessage() {}

func (x *PopObsPop) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopObsPop.ProtoReflect.Descriptor instead.
func (*PopObsPop) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{41}
}

func (x *PopObsPop) GetPopType() string {
	if x != nil {
		return x.PopType
	}
	return ""
}

func (x *PopObsPop) GetNumConstraints() int32 {
	if x != nil {
		return x.NumConstraints
	}
	return 0
}

func (x *PopObsPop) GetObservations() []*PopObsObservation {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *PopObsPop) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (x *PopObsPop) GetPropertyValues() map[string]string {
	if x != nil {
		return x.PropertyValues
	}
	return nil
}

func (x *PopObsPop) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *PopObsPop) GetPopId() string {
	if x != nil {
		return x.PopId
	}
	return ""
}

func (x *PopObsPop) GetChildhoodLocation() string {
	if x != nil {
		return x.ChildhoodLocation
	}
	return ""
}

func (x *PopObsPop) GetComparedObservations() []*PopObsObservation {
	if x != nil {
		return x.ComparedObservations
	}
	return nil
}

// PopObsPlace holds information for a place for the Population-Observation
// knowledge graph.
type PopObsPlace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type           string                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Populations    map[string]*PopObsPop `protobuf:"bytes,3,rep,name=populations,proto3" json:"populations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Place          string                `protobuf:"bytes,4,opt,name=place,proto3" json:"place,omitempty"` // Place DCID.
	Latitude       float64               `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64               `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	KmlCoordinates string                `protobuf:"bytes,7,opt,name=kml_coordinates,json=kmlCoordinates,proto3" json:"kml_coordinates,omitempty"`
	// Populations whose childhood location is this place.
	ChildhoodLocationPopulations map[string]*PopObsPop `protobuf:"bytes,8,rep,name=childhood_location_populations,json=childhoodLocationPopulations,proto3" json:"childhood_location_populations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Observations                 []*PopObsObservation  `protobuf:"bytes,9,rep,name=observations,proto3" json:"observations,omitempty"`
	Mid                          string                `protobuf:"bytes,10,opt,name=mid,proto3" json:"mid,omitempty"`                                                        // Won't persist to cache.
	ContainedInPlaces            []string              `protobuf:"bytes,11,rep,name=contained_in_places,json=containedInPlaces,proto3" json:"contained_in_places,omitempty"` // Won't persist to cache.
}

func (x *PopObsPlace) Reset() {
	*x = PopObsPlace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopObsPlace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopObsPlace) ProtoMessage() {}

func (x *PopObsPlace) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopObsPlace.ProtoReflect.Descriptor instead.
func (*PopObsPlace) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{42}
}

func (x *PopObsPlace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PopObsPlace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PopObsPlace) GetPopulations() map[string]*PopObsPop {
	if x != nil {
		return x.Populations
	}
	return nil
}

func (x *PopObsPlace) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *PopObsPlace) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PopObsPlace) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PopObsPlace) GetKmlCoordinates() string {
	if x != nil {
		return x.KmlCoordinates
	}
	return ""
}

func (x *PopObsPlace) GetChildhoodLocationPopulations() map[string]*PopObsPop {
	if x != nil {
		return x.ChildhoodLocationPopulations
	}
	return nil
}

func (x *PopObsPlace) GetObservations() []*PopObsObservation {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *PopObsPlace) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *PopObsPlace) GetContainedInPlaces() []string {
	if x != nil {
		return x.ContainedInPlaces
	}
	return nil
}

// PopObsCollection holds information for multiple PopObsPlace instances.
type PopObsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Places []*PopObsPlace `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
}

func (x *PopObsCollection) Reset() {
	*x = PopObsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopObsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopObsCollection) ProtoMessage() {}

func (x *PopObsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopObsCollection.ProtoReflect.Descriptor instead.
func (*PopObsCollection) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{43}
}

func (x *PopObsCollection) GetPlaces() []*PopObsPlace {
	if x != nil {
		return x.Places
	}
	return nil
}

// Basic info for an entity (subject or object).
type EntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Types        []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Dcid         string   `protobuf:"bytes,3,opt,name=dcid,proto3" json:"dcid,omitempty"`
	ProvenanceId string   `protobuf:"bytes,4,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	Value        string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // Only for object value.
}

func (x *EntityInfo) Reset() {
	*x = EntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityInfo) ProtoMessage() {}

func (x *EntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityInfo.ProtoReflect.Descriptor instead.
func (*EntityInfo) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{44}
}

func (x *EntityInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityInfo) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *EntityInfo) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *EntityInfo) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (x *EntityInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Basic info for a collection of entities.
type EntityInfoCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities   []*EntityInfo `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	TotalCount int64         `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Before potential truncation.
}

func (x *EntityInfoCollection) Reset() {
	*x = EntityInfoCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityInfoCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityInfoCollection) ProtoMessage() {}

func (x *EntityInfoCollection) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityInfoCollection.ProtoReflect.Descriptor instead.
func (*EntityInfoCollection) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{45}
}

func (x *EntityInfoCollection) GetEntities() []*EntityInfo {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *EntityInfoCollection) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// A pair of entities linked by containedInPlace.
type ContainedInPlaceRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId   string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ParentType string `protobuf:"bytes,2,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty"`
	ChildId    string `protobuf:"bytes,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	ChildType  string `protobuf:"bytes,4,opt,name=child_type,json=childType,proto3" json:"child_type,omitempty"`
}

func (x *ContainedInPlaceRelation) Reset() {
	*x = ContainedInPlaceRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedInPlaceRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedInPlaceRelation) ProtoMessage() {}

func (x *ContainedInPlaceRelation) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedInPlaceRelation.ProtoReflect.Descriptor instead.
func (*ContainedInPlaceRelation) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{46}
}

func (x *ContainedInPlaceRelation) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ContainedInPlaceRelation) GetParentType() string {
	if x != nil {
		return x.ParentType
	}
	return ""
}

func (x *ContainedInPlaceRelation) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

func (x *ContainedInPlaceRelation) GetChildType() string {
	if x != nil {
		return x.ChildType
	}
	return ""
}

// Triple.
type Triple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId    string   `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	Predicate    string   `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	ObjectId     string   `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectName   string   `protobuf:"bytes,4,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"` // Only when object_id is set.
	ObjectValue  string   `protobuf:"bytes,5,opt,name=object_value,json=objectValue,proto3" json:"object_value,omitempty"`
	ProvenanceId string   `protobuf:"bytes,6,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	SubjectName  string   `protobuf:"bytes,7,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`    // Only for in arcs.
	SubjectTypes []string `protobuf:"bytes,8,rep,name=subject_types,json=subjectTypes,proto3" json:"subject_types,omitempty"` // Only for in arcs.
	ObjectTypes  []string `protobuf:"bytes,10,rep,name=object_types,json=objectTypes,proto3" json:"object_types,omitempty"`   // Only when object_id is set.
}

func (x *Triple) Reset() {
	*x = Triple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triple) ProtoMessage() {}

func (x *Triple) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triple.ProtoReflect.Descriptor instead.
func (*Triple) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{47}
}

func (x *Triple) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *Triple) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Triple) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *Triple) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *Triple) GetObjectValue() string {
	if x != nil {
		return x.ObjectValue
	}
	return ""
}

func (x *Triple) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (x *Triple) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *Triple) GetSubjectTypes() []string {
	if x != nil {
		return x.SubjectTypes
	}
	return nil
}

func (x *Triple) GetObjectTypes() []string {
	if x != nil {
		return x.ObjectTypes
	}
	return nil
}

// A collection of triples.
type Triples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Triples    []*Triple `protobuf:"bytes,1,rep,name=triples,proto3" json:"triples,omitempty"`
	TotalCount int64     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Before potential truncation.
}

func (x *Triples) Reset() {
	*x = Triples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triples) ProtoMessage() {}

func (x *Triples) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triples.ProtoReflect.Descriptor instead.
func (*Triples) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{48}
}

func (x *Triples) GetTriples() []*Triple {
	if x != nil {
		return x.Triples
	}
	return nil
}

func (x *Triples) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Essential provenance information.
type ProvenanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvenanceId string `protobuf:"bytes,1,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	// Domain is obtained from the source of the provenance.
	Domain     string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	ImportName string `protobuf:"bytes,3,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
}

func (x *ProvenanceInfo) Reset() {
	*x = ProvenanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceInfo) ProtoMessage() {}

func (x *ProvenanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceInfo.ProtoReflect.Descriptor instead.
func (*ProvenanceInfo) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{49}
}

func (x *ProvenanceInfo) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (x *ProvenanceInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ProvenanceInfo) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

// A full list of provenances.
type Provenances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provenances []*ProvenanceInfo `protobuf:"bytes,1,rep,name=provenances,proto3" json:"provenances,omitempty"`
}

func (x *Provenances) Reset() {
	*x = Provenances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenances) ProtoMessage() {}

func (x *Provenances) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenances.ProtoReflect.Descriptor instead.
func (*Provenances) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{50}
}

func (x *Provenances) GetProvenances() []*ProvenanceInfo {
	if x != nil {
		return x.Provenances
	}
	return nil
}

// Full lists of in and out labels for a given node ID.
type PropertyLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InLabels  []string `protobuf:"bytes,1,rep,name=in_labels,json=inLabels,proto3" json:"in_labels,omitempty"`
	OutLabels []string `protobuf:"bytes,2,rep,name=out_labels,json=outLabels,proto3" json:"out_labels,omitempty"`
}

func (x *PropertyLabels) Reset() {
	*x = PropertyLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLabels) ProtoMessage() {}

func (x *PropertyLabels) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLabels.ProtoReflect.Descriptor instead.
func (*PropertyLabels) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{51}
}

func (x *PropertyLabels) GetInLabels() []string {
	if x != nil {
		return x.InLabels
	}
	return nil
}

func (x *PropertyLabels) GetOutLabels() []string {
	if x != nil {
		return x.OutLabels
	}
	return nil
}

// For a given place type, a map from pop type to possible measured properties
// and PVs.
type PopCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is population type.
	Categories map[string]*PopCategory_PopTypeCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PopCategory) Reset() {
	*x = PopCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopCategory) ProtoMessage() {}

func (x *PopCategory) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopCategory.ProtoReflect.Descriptor instead.
func (*PopCategory) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{52}
}

func (x *PopCategory) GetCategories() map[string]*PopCategory_PopTypeCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Related places info for a given place and condition.
type RelatedPlacesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The following 3 fields are set only when place is not empty.
	RelatedPlaces  []string `protobuf:"bytes,1,rep,name=related_places,json=relatedPlaces,proto3" json:"related_places,omitempty"`
	RankFromTop    int32    `protobuf:"varint,2,opt,name=rank_from_top,json=rankFromTop,proto3" json:"rank_from_top,omitempty"`          // Starting from 1.
	RankFromBottom int32    `protobuf:"varint,3,opt,name=rank_from_bottom,json=rankFromBottom,proto3" json:"rank_from_bottom,omitempty"` // Starting from 1.
	// The following 3 fields are set only when place is empty.
	AllPlaces         []string `protobuf:"bytes,4,rep,name=all_places,json=allPlaces,proto3" json:"all_places,omitempty"`
	Top_1000Places    []string `protobuf:"bytes,5,rep,name=top_1000_places,json=top1000Places,proto3" json:"top_1000_places,omitempty"`
	Bottom_1000Places []string `protobuf:"bytes,6,rep,name=bottom_1000_places,json=bottom1000Places,proto3" json:"bottom_1000_places,omitempty"`
}

func (x *RelatedPlacesInfo) Reset() {
	*x = RelatedPlacesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedPlacesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedPlacesInfo) ProtoMessage() {}

func (x *RelatedPlacesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedPlacesInfo.ProtoReflect.Descriptor instead.
func (*RelatedPlacesInfo) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{53}
}

func (x *RelatedPlacesInfo) GetRelatedPlaces() []string {
	if x != nil {
		return x.RelatedPlaces
	}
	return nil
}

func (x *RelatedPlacesInfo) GetRankFromTop() int32 {
	if x != nil {
		return x.RankFromTop
	}
	return 0
}

func (x *RelatedPlacesInfo) GetRankFromBottom() int32 {
	if x != nil {
		return x.RankFromBottom
	}
	return 0
}

func (x *RelatedPlacesInfo) GetAllPlaces() []string {
	if x != nil {
		return x.AllPlaces
	}
	return nil
}

func (x *RelatedPlacesInfo) GetTop_1000Places() []string {
	if x != nil {
		return x.Top_1000Places
	}
	return nil
}

func (x *RelatedPlacesInfo) GetBottom_1000Places() []string {
	if x != nil {
		return x.Bottom_1000Places
	}
	return nil
}

// A statistical variable contains key info of population and observation.
type StatisticalVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopType                string            `protobuf:"bytes,1,opt,name=pop_type,json=popType,proto3" json:"pop_type,omitempty"`
	Pvs                    map[string]string `protobuf:"bytes,2,rep,name=pvs,proto3" json:"pvs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MeasuredProp           string            `protobuf:"bytes,3,opt,name=measured_prop,json=measuredProp,proto3" json:"measured_prop,omitempty"`
	MeasurementMethod      string            `protobuf:"bytes,4,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	MeasurementDenominator string            `protobuf:"bytes,5,opt,name=measurement_denominator,json=measurementDenominator,proto3" json:"measurement_denominator,omitempty"`
	MeasurementQualifier   string            `protobuf:"bytes,6,opt,name=measurement_qualifier,json=measurementQualifier,proto3" json:"measurement_qualifier,omitempty"`
	ScalingFactor          string            `protobuf:"bytes,7,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	Unit                   string            `protobuf:"bytes,8,opt,name=unit,proto3" json:"unit,omitempty"`
	StatType               string            `protobuf:"bytes,9,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`
}

func (x *StatisticalVariable) Reset() {
	*x = StatisticalVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticalVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticalVariable) ProtoMessage() {}

func (x *StatisticalVariable) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticalVariable.ProtoReflect.Descriptor instead.
func (*StatisticalVariable) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{54}
}

func (x *StatisticalVariable) GetPopType() string {
	if x != nil {
		return x.PopType
	}
	return ""
}

func (x *StatisticalVariable) GetPvs() map[string]string {
	if x != nil {
		return x.Pvs
	}
	return nil
}

func (x *StatisticalVariable) GetMeasuredProp() string {
	if x != nil {
		return x.MeasuredProp
	}
	return ""
}

func (x *StatisticalVariable) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *StatisticalVariable) GetMeasurementDenominator() string {
	if x != nil {
		return x.MeasurementDenominator
	}
	return ""
}

func (x *StatisticalVariable) GetMeasurementQualifier() string {
	if x != nil {
		return x.MeasurementQualifier
	}
	return ""
}

func (x *StatisticalVariable) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *StatisticalVariable) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *StatisticalVariable) GetStatType() string {
	if x != nil {
		return x.StatType
	}
	return ""
}

// Info about why a place is interesting: For the statistical variable, under
// certain constraints (place type, ancestor, per capita or not), if a place
// ranks among top or bottom, it is considered as interesting.
type InterestingPlaceAspect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aspects []*InterestingPlaceAspect_Aspect `protobuf:"bytes,1,rep,name=aspects,proto3" json:"aspects,omitempty"`
}

func (x *InterestingPlaceAspect) Reset() {
	*x = InterestingPlaceAspect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestingPlaceAspect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestingPlaceAspect) ProtoMessage() {}

func (x *InterestingPlaceAspect) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestingPlaceAspect.ProtoReflect.Descriptor instead.
func (*InterestingPlaceAspect) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{55}
}

func (x *InterestingPlaceAspect) GetAspects() []*InterestingPlaceAspect_Aspect {
	if x != nil {
		return x.Aspects
	}
	return nil
}

type ObsTimeSeries_SourceSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val               map[string]float64 `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MeasurementMethod string             `protobuf:"bytes,3,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	ObservationPeriod string             `protobuf:"bytes,4,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	ImportName        string             `protobuf:"bytes,5,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
}

func (x *ObsTimeSeries_SourceSeries) Reset() {
	*x = ObsTimeSeries_SourceSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsTimeSeries_SourceSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsTimeSeries_SourceSeries) ProtoMessage() {}

func (x *ObsTimeSeries_SourceSeries) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsTimeSeries_SourceSeries.ProtoReflect.Descriptor instead.
func (*ObsTimeSeries_SourceSeries) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ObsTimeSeries_SourceSeries) GetVal() map[string]float64 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *ObsTimeSeries_SourceSeries) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *ObsTimeSeries_SourceSeries) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *ObsTimeSeries_SourceSeries) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

// Only used as Flume key. This should be safe to be a key as all workers use
// the same binary which should serialize the proto message in the same way.
type PopCategory_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceType    string   `protobuf:"bytes,1,opt,name=place_type,json=placeType,proto3" json:"place_type,omitempty"`
	PopType      string   `protobuf:"bytes,2,opt,name=pop_type,json=popType,proto3" json:"pop_type,omitempty"`
	MeasuredProp string   `protobuf:"bytes,3,opt,name=measured_prop,json=measuredProp,proto3" json:"measured_prop,omitempty"`
	StatType     string   `protobuf:"bytes,4,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`
	Properties   []string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty"`
	Values       []string `protobuf:"bytes,6,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PopCategory_Item) Reset() {
	*x = PopCategory_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopCategory_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopCategory_Item) ProtoMessage() {}

func (x *PopCategory_Item) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopCategory_Item.ProtoReflect.Descriptor instead.
func (*PopCategory_Item) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{52, 0}
}

func (x *PopCategory_Item) GetPlaceType() string {
	if x != nil {
		return x.PlaceType
	}
	return ""
}

func (x *PopCategory_Item) GetPopType() string {
	if x != nil {
		return x.PopType
	}
	return ""
}

func (x *PopCategory_Item) GetMeasuredProp() string {
	if x != nil {
		return x.MeasuredProp
	}
	return ""
}

func (x *PopCategory_Item) GetStatType() string {
	if x != nil {
		return x.StatType
	}
	return ""
}

func (x *PopCategory_Item) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PopCategory_Item) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type PopCategory_MeasuredObsPropPVs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pvs map[string]string `protobuf:"bytes,1,rep,name=pvs,proto3" json:"pvs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of measured properties and stat types (e.g., age^median) with the
	// same PVs and population type.
	Props []string `protobuf:"bytes,2,rep,name=props,proto3" json:"props,omitempty"`
}

func (x *PopCategory_MeasuredObsPropPVs) Reset() {
	*x = PopCategory_MeasuredObsPropPVs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopCategory_MeasuredObsPropPVs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopCategory_MeasuredObsPropPVs) ProtoMessage() {}

func (x *PopCategory_MeasuredObsPropPVs) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopCategory_MeasuredObsPropPVs.ProtoReflect.Descriptor instead.
func (*PopCategory_MeasuredObsPropPVs) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{52, 1}
}

func (x *PopCategory_MeasuredObsPropPVs) GetPvs() map[string]string {
	if x != nil {
		return x.Pvs
	}
	return nil
}

func (x *PopCategory_MeasuredObsPropPVs) GetProps() []string {
	if x != nil {
		return x.Props
	}
	return nil
}

type PopCategory_PopTypeCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropPvs []*PopCategory_MeasuredObsPropPVs `protobuf:"bytes,1,rep,name=prop_pvs,json=propPvs,proto3" json:"prop_pvs,omitempty"`
}

func (x *PopCategory_PopTypeCategory) Reset() {
	*x = PopCategory_PopTypeCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopCategory_PopTypeCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopCategory_PopTypeCategory) ProtoMessage() {}

func (x *PopCategory_PopTypeCategory) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopCategory_PopTypeCategory.ProtoReflect.Descriptor instead.
func (*PopCategory_PopTypeCategory) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{52, 2}
}

func (x *PopCategory_PopTypeCategory) GetPropPvs() []*PopCategory_MeasuredObsPropPVs {
	if x != nil {
		return x.PropPvs
	}
	return nil
}

type InterestingPlaceAspect_Aspect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankFromTop      int32                `protobuf:"varint,1,opt,name=rank_from_top,json=rankFromTop,proto3" json:"rank_from_top,omitempty"`
	RankFromBottom   int32                `protobuf:"varint,2,opt,name=rank_from_bottom,json=rankFromBottom,proto3" json:"rank_from_bottom,omitempty"`
	StatVar          *StatisticalVariable `protobuf:"bytes,3,opt,name=stat_var,json=statVar,proto3" json:"stat_var,omitempty"`
	ContainedInPlace string               `protobuf:"bytes,4,opt,name=contained_in_place,json=containedInPlace,proto3" json:"contained_in_place,omitempty"`
	PlaceType        string               `protobuf:"bytes,5,opt,name=place_type,json=placeType,proto3" json:"place_type,omitempty"`
	PerCapita        bool                 `protobuf:"varint,6,opt,name=per_capita,json=perCapita,proto3" json:"per_capita,omitempty"`
}

func (x *InterestingPlaceAspect_Aspect) Reset() {
	*x = InterestingPlaceAspect_Aspect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixer_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestingPlaceAspect_Aspect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestingPlaceAspect_Aspect) ProtoMessage() {}

func (x *InterestingPlaceAspect_Aspect) ProtoReflect() protoreflect.Message {
	mi := &file_mixer_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestingPlaceAspect_Aspect.ProtoReflect.Descriptor instead.
func (*InterestingPlaceAspect_Aspect) Descriptor() ([]byte, []int) {
	return file_mixer_proto_rawDescGZIP(), []int{55, 0}
}

func (x *InterestingPlaceAspect_Aspect) GetRankFromTop() int32 {
	if x != nil {
		return x.RankFromTop
	}
	return 0
}

func (x *InterestingPlaceAspect_Aspect) GetRankFromBottom() int32 {
	if x != nil {
		return x.RankFromBottom
	}
	return 0
}

func (x *InterestingPlaceAspect_Aspect) GetStatVar() *StatisticalVariable {
	if x != nil {
		return x.StatVar
	}
	return nil
}

func (x *InterestingPlaceAspect_Aspect) GetContainedInPlace() string {
	if x != nil {
		return x.ContainedInPlace
	}
	return ""
}

func (x *InterestingPlaceAspect_Aspect) GetPlaceType() string {
	if x != nil {
		return x.PlaceType
	}
	return ""
}

func (x *InterestingPlaceAspect_Aspect) GetPerCapita() bool {
	if x != nil {
		return x.PerCapita
	}
	return false
}

var File_mixer_proto protoreflect.FileDescriptor

var file_mixer_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x22, 0x26, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x71,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x22,
	0x4e, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x51, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x71, 0x6c, 0x22, 0x47, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x63,
	0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x63, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x03, 0x70, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x76, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdc, 0x04, 0x0a, 0x0d, 0x4f, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x63,
	0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x44, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x63, 0x69, 0x64, 0x12, 0x4c,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x8f, 0x02, 0x0a,
	0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x62, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0x71, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xb1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x70, 0x76, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x70, 0x76, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x97, 0x04, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x70, 0x76, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x70, 0x76, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x37, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x39, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x63, 0x69, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x09, 0x0a, 0x11, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x31, 0x30, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x31, 0x30, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x32, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x32, 0x35, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x30, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x30, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x49, 0x64, 0x73, 0x4a, 0x04,
	0x08, 0x15, 0x10, 0x16, 0x22, 0x98, 0x04, 0x0a, 0x09, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x50,
	0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62,
	0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x50, 0x6f, 0x70,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68,
	0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0xc5, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62,
	0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b,
	0x6d, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x1e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x1c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x10, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73,
	0x50, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67,
	0x0a, 0x21, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x50, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x10, 0x50, 0x6f, 0x70, 0x4f, 0x62,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x06, 0x54, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x59, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x70,
	0x6c, 0x65, 0x52, 0x07, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x70,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0xba, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0xaa, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x50, 0x56, 0x73, 0x12, 0x46, 0x0a, 0x03, 0x70, 0x76, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x56, 0x73,
	0x2e, 0x50, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x70, 0x76, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x50, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0f,
	0x50, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x56, 0x73, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x70, 0x50, 0x76, 0x73, 0x1a, 0x67, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfd, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x70, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x61, 0x6e,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f,
	0x70, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x31, 0x30, 0x30, 0x30, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x31, 0x30, 0x30, 0x30, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x22, 0xbf, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x70, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x50, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x70, 0x76, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a,
	0x15, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x50, 0x76,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe0, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a,
	0x07, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x07, 0x61, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x73, 0x1a, 0xff, 0x01, 0x0a, 0x06, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x61,
	0x6e, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x32, 0xf0, 0x12, 0x0a, 0x05, 0x4d, 0x69, 0x78, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x55, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x06, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x7b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x2d, 0x69, 0x6e, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x2d, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x4f, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x2f, 0x70, 0x6f, 0x70, 0x2d, 0x6f, 0x62, 0x73, 0x12, 0x6c, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x12, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x2f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2d, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x62,
	0x75, 0x6c, 0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x2f, 0x70, 0x6f, 0x70, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa6, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x70, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01,
	0x2a, 0x12, 0x61, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x52, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mixer_proto_rawDescOnce sync.Once
	file_mixer_proto_rawDescData = file_mixer_proto_rawDesc
)

func file_mixer_proto_rawDescGZIP() []byte {
	file_mixer_proto_rawDescOnce.Do(func() {
		file_mixer_proto_rawDescData = protoimpl.X.CompressGZIP(file_mixer_proto_rawDescData)
	})
	return file_mixer_proto_rawDescData
}

var file_mixer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mixer_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_mixer_proto_goTypes = []interface{}{
	(Option_CacheChoice)(0),                    // 0: datacommons.Option.CacheChoice
	(*Option)(nil),                             // 1: datacommons.Option
	(*QueryRequest)(nil),                       // 2: datacommons.QueryRequest
	(*QueryResponseCell)(nil),                  // 3: datacommons.QueryResponseCell
	(*QueryResponseRow)(nil),                   // 4: datacommons.QueryResponseRow
	(*QueryResponse)(nil),                      // 5: datacommons.QueryResponse
	(*TranslateRequest)(nil),                   // 6: datacommons.TranslateRequest
	(*TranslateResponse)(nil),                  // 7: datacommons.TranslateResponse
	(*GetPropertyLabelsRequest)(nil),           // 8: datacommons.GetPropertyLabelsRequest
	(*GetPropertyLabelsResponse)(nil),          // 9: datacommons.GetPropertyLabelsResponse
	(*GetPropertyValuesRequest)(nil),           // 10: datacommons.GetPropertyValuesRequest
	(*GetPropertyValuesResponse)(nil),          // 11: datacommons.GetPropertyValuesResponse
	(*GetTriplesRequest)(nil),                  // 12: datacommons.GetTriplesRequest
	(*GetTriplesResponse)(nil),                 // 13: datacommons.GetTriplesResponse
	(*GetPopObsRequest)(nil),                   // 14: datacommons.GetPopObsRequest
	(*GetPopObsResponse)(nil),                  // 15: datacommons.GetPopObsResponse
	(*PropertyValue)(nil),                      // 16: datacommons.PropertyValue
	(*GetPlaceObsRequest)(nil),                 // 17: datacommons.GetPlaceObsRequest
	(*GetPlaceObsResponse)(nil),                // 18: datacommons.GetPlaceObsResponse
	(*ObsTimeSeries)(nil),                      // 19: datacommons.ObsTimeSeries
	(*ChartStore)(nil),                         // 20: datacommons.ChartStore
	(*GetStatsRequest)(nil),                    // 21: datacommons.GetStatsRequest
	(*GetStatsResponse)(nil),                   // 22: datacommons.GetStatsResponse
	(*GetPopCategoryRequest)(nil),              // 23: datacommons.GetPopCategoryRequest
	(*GetPopCategoryResponse)(nil),             // 24: datacommons.GetPopCategoryResponse
	(*GetPopulationsRequest)(nil),              // 25: datacommons.GetPopulationsRequest
	(*GetPopulationsResponse)(nil),             // 26: datacommons.GetPopulationsResponse
	(*GetObservationsRequest)(nil),             // 27: datacommons.GetObservationsRequest
	(*GetObservationsResponse)(nil),            // 28: datacommons.GetObservationsResponse
	(*GetPlacesInRequest)(nil),                 // 29: datacommons.GetPlacesInRequest
	(*GetPlacesInResponse)(nil),                // 30: datacommons.GetPlacesInResponse
	(*GetRelatedPlacesRequest)(nil),            // 31: datacommons.GetRelatedPlacesRequest
	(*GetRelatedPlacesResponse)(nil),           // 32: datacommons.GetRelatedPlacesResponse
	(*GetInterestingPlaceAspectsRequest)(nil),  // 33: datacommons.GetInterestingPlaceAspectsRequest
	(*GetInterestingPlaceAspectsResponse)(nil), // 34: datacommons.GetInterestingPlaceAspectsResponse
	(*GetChartDataRequest)(nil),                // 35: datacommons.GetChartDataRequest
	(*GetChartDataResponse)(nil),               // 36: datacommons.GetChartDataResponse
	(*SearchRequest)(nil),                      // 37: datacommons.SearchRequest
	(*SearchResponse)(nil),                     // 38: datacommons.SearchResponse
	(*SearchResultSection)(nil),                // 39: datacommons.SearchResultSection
	(*SearchEntityResult)(nil),                 // 40: datacommons.SearchEntityResult
	(*PopObsObservation)(nil),                  // 41: datacommons.PopObsObservation
	(*PopObsPop)(nil),                          // 42: datacommons.PopObsPop
	(*PopObsPlace)(nil),                        // 43: datacommons.PopObsPlace
	(*PopObsCollection)(nil),                   // 44: datacommons.PopObsCollection
	(*EntityInfo)(nil),                         // 45: datacommons.EntityInfo
	(*EntityInfoCollection)(nil),               // 46: datacommons.EntityInfoCollection
	(*ContainedInPlaceRelation)(nil),           // 47: datacommons.ContainedInPlaceRelation
	(*Triple)(nil),                             // 48: datacommons.Triple
	(*Triples)(nil),                            // 49: datacommons.Triples
	(*ProvenanceInfo)(nil),                     // 50: datacommons.ProvenanceInfo
	(*Provenances)(nil),                        // 51: datacommons.Provenances
	(*PropertyLabels)(nil),                     // 52: datacommons.PropertyLabels
	(*PopCategory)(nil),                        // 53: datacommons.PopCategory
	(*RelatedPlacesInfo)(nil),                  // 54: datacommons.RelatedPlacesInfo
	(*StatisticalVariable)(nil),                // 55: datacommons.StatisticalVariable
	(*InterestingPlaceAspect)(nil),             // 56: datacommons.InterestingPlaceAspect
	(*ObsTimeSeries_SourceSeries)(nil),         // 57: datacommons.ObsTimeSeries.SourceSeries
	nil,                                        // 58: datacommons.ObsTimeSeries.DataEntry
	nil,                                        // 59: datacommons.ObsTimeSeries.SourceSeries.ValEntry
	nil,                                        // 60: datacommons.PopObsPop.PropertyValuesEntry
	nil,                                        // 61: datacommons.PopObsPlace.PopulationsEntry
	nil,                                        // 62: datacommons.PopObsPlace.ChildhoodLocationPopulationsEntry
	(*PopCategory_Item)(nil),                   // 63: datacommons.PopCategory.Item
	(*PopCategory_MeasuredObsPropPVs)(nil),     // 64: datacommons.PopCategory.MeasuredObsPropPVs
	(*PopCategory_PopTypeCategory)(nil),        // 65: datacommons.PopCategory.PopTypeCategory
	nil,                                        // 66: datacommons.PopCategory.CategoriesEntry
	nil,                                        // 67: datacommons.PopCategory.MeasuredObsPropPVs.PvsEntry
	nil,                                        // 68: datacommons.StatisticalVariable.PvsEntry
	(*InterestingPlaceAspect_Aspect)(nil),      // 69: datacommons.InterestingPlaceAspect.Aspect
}
var file_mixer_proto_depIdxs = []int32{
	0,  // 0: datacommons.Option.cache_choice:type_name -> datacommons.Option.CacheChoice
	3,  // 1: datacommons.QueryResponseRow.cells:type_name -> datacommons.QueryResponseCell
	4,  // 2: datacommons.QueryResponse.rows:type_name -> datacommons.QueryResponseRow
	1,  // 3: datacommons.GetPropertyLabelsRequest.option:type_name -> datacommons.Option
	1,  // 4: datacommons.GetPropertyValuesRequest.option:type_name -> datacommons.Option
	1,  // 5: datacommons.GetTriplesRequest.option:type_name -> datacommons.Option
	1,  // 6: datacommons.GetPopObsRequest.option:type_name -> datacommons.Option
	16, // 7: datacommons.GetPlaceObsRequest.pvs:type_name -> datacommons.PropertyValue
	1,  // 8: datacommons.GetPlaceObsRequest.option:type_name -> datacommons.Option
	58, // 9: datacommons.ObsTimeSeries.data:type_name -> datacommons.ObsTimeSeries.DataEntry
	57, // 10: datacommons.ObsTimeSeries.source_series:type_name -> datacommons.ObsTimeSeries.SourceSeries
	19, // 11: datacommons.ChartStore.obs_time_series:type_name -> datacommons.ObsTimeSeries
	1,  // 12: datacommons.GetStatsRequest.option:type_name -> datacommons.Option
	16, // 13: datacommons.GetPopulationsRequest.pvs:type_name -> datacommons.PropertyValue
	1,  // 14: datacommons.GetPopulationsRequest.option:type_name -> datacommons.Option
	1,  // 15: datacommons.GetObservationsRequest.option:type_name -> datacommons.Option
	16, // 16: datacommons.GetRelatedPlacesRequest.pvs:type_name -> datacommons.PropertyValue
	39, // 17: datacommons.SearchResponse.section:type_name -> datacommons.SearchResultSection
	40, // 18: datacommons.SearchResultSection.entity:type_name -> datacommons.SearchEntityResult
	41, // 19: datacommons.PopObsPop.observations:type_name -> datacommons.PopObsObservation
	60, // 20: datacommons.PopObsPop.property_values:type_name -> datacommons.PopObsPop.PropertyValuesEntry
	41, // 21: datacommons.PopObsPop.compared_observations:type_name -> datacommons.PopObsObservation
	61, // 22: datacommons.PopObsPlace.populations:type_name -> datacommons.PopObsPlace.PopulationsEntry
	62, // 23: datacommons.PopObsPlace.childhood_location_populations:type_name -> datacommons.PopObsPlace.ChildhoodLocationPopulationsEntry
	41, // 24: datacommons.PopObsPlace.observations:type_name -> datacommons.PopObsObservation
	43, // 25: datacommons.PopObsCollection.places:type_name -> datacommons.PopObsPlace
	45, // 26: datacommons.EntityInfoCollection.entities:type_name -> datacommons.EntityInfo
	48, // 27: datacommons.Triples.triples:type_name -> datacommons.Triple
	50, // 28: datacommons.Provenances.provenances:type_name -> datacommons.ProvenanceInfo
	66, // 29: datacommons.PopCategory.categories:type_name -> datacommons.PopCategory.CategoriesEntry
	68, // 30: datacommons.StatisticalVariable.pvs:type_name -> datacommons.StatisticalVariable.PvsEntry
	69, // 31: datacommons.InterestingPlaceAspect.aspects:type_name -> datacommons.InterestingPlaceAspect.Aspect
	59, // 32: datacommons.ObsTimeSeries.SourceSeries.val:type_name -> datacommons.ObsTimeSeries.SourceSeries.ValEntry
	42, // 33: datacommons.PopObsPlace.PopulationsEntry.value:type_name -> datacommons.PopObsPop
	42, // 34: datacommons.PopObsPlace.ChildhoodLocationPopulationsEntry.value:type_name -> datacommons.PopObsPop
	67, // 35: datacommons.PopCategory.MeasuredObsPropPVs.pvs:type_name -> datacommons.PopCategory.MeasuredObsPropPVs.PvsEntry
	64, // 36: datacommons.PopCategory.PopTypeCategory.prop_pvs:type_name -> datacommons.PopCategory.MeasuredObsPropPVs
	65, // 37: datacommons.PopCategory.CategoriesEntry.value:type_name -> datacommons.PopCategory.PopTypeCategory
	55, // 38: datacommons.InterestingPlaceAspect.Aspect.stat_var:type_name -> datacommons.StatisticalVariable
	2,  // 39: datacommons.Mixer.Query:input_type -> datacommons.QueryRequest
	2,  // 40: datacommons.Mixer.QueryPost:input_type -> datacommons.QueryRequest
	8,  // 41: datacommons.Mixer.GetPropertyLabels:input_type -> datacommons.GetPropertyLabelsRequest
	8,  // 42: datacommons.Mixer.GetPropertyLabelsPost:input_type -> datacommons.GetPropertyLabelsRequest
	10, // 43: datacommons.Mixer.GetPropertyValues:input_type -> datacommons.GetPropertyValuesRequest
	10, // 44: datacommons.Mixer.GetPropertyValuesPost:input_type -> datacommons.GetPropertyValuesRequest
	12, // 45: datacommons.Mixer.GetTriples:input_type -> datacommons.GetTriplesRequest
	12, // 46: datacommons.Mixer.GetTriplesPost:input_type -> datacommons.GetTriplesRequest
	25, // 47: datacommons.Mixer.GetPopulations:input_type -> datacommons.GetPopulationsRequest
	27, // 48: datacommons.Mixer.GetObservations:input_type -> datacommons.GetObservationsRequest
	29, // 49: datacommons.Mixer.GetPlacesIn:input_type -> datacommons.GetPlacesInRequest
	29, // 50: datacommons.Mixer.GetPlacesInPost:input_type -> datacommons.GetPlacesInRequest
	14, // 51: datacommons.Mixer.GetPopObs:input_type -> datacommons.GetPopObsRequest
	17, // 52: datacommons.Mixer.GetPlaceObs:input_type -> datacommons.GetPlaceObsRequest
	21, // 53: datacommons.Mixer.GetStats:input_type -> datacommons.GetStatsRequest
	23, // 54: datacommons.Mixer.GetPopCategory:input_type -> datacommons.GetPopCategoryRequest
	31, // 55: datacommons.Mixer.GetRelatedPlaces:input_type -> datacommons.GetRelatedPlacesRequest
	33, // 56: datacommons.Mixer.GetInterestingPlaceAspects:input_type -> datacommons.GetInterestingPlaceAspectsRequest
	35, // 57: datacommons.Mixer.GetChartData:input_type -> datacommons.GetChartDataRequest
	6,  // 58: datacommons.Mixer.Translate:input_type -> datacommons.TranslateRequest
	37, // 59: datacommons.Mixer.Search:input_type -> datacommons.SearchRequest
	5,  // 60: datacommons.Mixer.Query:output_type -> datacommons.QueryResponse
	5,  // 61: datacommons.Mixer.QueryPost:output_type -> datacommons.QueryResponse
	9,  // 62: datacommons.Mixer.GetPropertyLabels:output_type -> datacommons.GetPropertyLabelsResponse
	9,  // 63: datacommons.Mixer.GetPropertyLabelsPost:output_type -> datacommons.GetPropertyLabelsResponse
	11, // 64: datacommons.Mixer.GetPropertyValues:output_type -> datacommons.GetPropertyValuesResponse
	11, // 65: datacommons.Mixer.GetPropertyValuesPost:output_type -> datacommons.GetPropertyValuesResponse
	13, // 66: datacommons.Mixer.GetTriples:output_type -> datacommons.GetTriplesResponse
	13, // 67: datacommons.Mixer.GetTriplesPost:output_type -> datacommons.GetTriplesResponse
	26, // 68: datacommons.Mixer.GetPopulations:output_type -> datacommons.GetPopulationsResponse
	28, // 69: datacommons.Mixer.GetObservations:output_type -> datacommons.GetObservationsResponse
	30, // 70: datacommons.Mixer.GetPlacesIn:output_type -> datacommons.GetPlacesInResponse
	30, // 71: datacommons.Mixer.GetPlacesInPost:output_type -> datacommons.GetPlacesInResponse
	15, // 72: datacommons.Mixer.GetPopObs:output_type -> datacommons.GetPopObsResponse
	18, // 73: datacommons.Mixer.GetPlaceObs:output_type -> datacommons.GetPlaceObsResponse
	22, // 74: datacommons.Mixer.GetStats:output_type -> datacommons.GetStatsResponse
	24, // 75: datacommons.Mixer.GetPopCategory:output_type -> datacommons.GetPopCategoryResponse
	32, // 76: datacommons.Mixer.GetRelatedPlaces:output_type -> datacommons.GetRelatedPlacesResponse
	34, // 77: datacommons.Mixer.GetInterestingPlaceAspects:output_type -> datacommons.GetInterestingPlaceAspectsResponse
	36, // 78: datacommons.Mixer.GetChartData:output_type -> datacommons.GetChartDataResponse
	7,  // 79: datacommons.Mixer.Translate:output_type -> datacommons.TranslateResponse
	38, // 80: datacommons.Mixer.Search:output_type -> datacommons.SearchResponse
	60, // [60:81] is the sub-list for method output_type
	39, // [39:60] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_mixer_proto_init() }
func file_mixer_proto_init() {
	if File_mixer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mixer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponseCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponseRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriplesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopObsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopObsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaceObsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaceObsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsTimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopulationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopulationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlacesInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlacesInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedPlacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedPlacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterestingPlaceAspectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterestingPlaceAspectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResultSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopObsObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopObsPop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopObsPlace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopObsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityInfoCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedInPlaceRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedPlacesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticalVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestingPlaceAspect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsTimeSeries_SourceSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopCategory_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopCategory_MeasuredObsPropPVs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopCategory_PopTypeCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixer_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestingPlaceAspect_Aspect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mixer_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ChartStore_ObsTimeSeries)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mixer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mixer_proto_goTypes,
		DependencyIndexes: file_mixer_proto_depIdxs,
		EnumInfos:         file_mixer_proto_enumTypes,
		MessageInfos:      file_mixer_proto_msgTypes,
	}.Build()
	File_mixer_proto = out.File
	file_mixer_proto_rawDesc = nil
	file_mixer_proto_goTypes = nil
	file_mixer_proto_depIdxs = nil
}

// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "./proto";
package datacommons.v1;

// A collection of events that share some common properties.
message EventCollection {
  message GeoLocation {
    message Point {
      double latitude = 1;
      double longitude = 2;
    }
    message Polygon { string geo_json = 1; }
    oneof geo {
      Point point = 1;
      Polygon polygon = 2;
    }
  }

  message ValList { repeated string vals = 2; }

  message Event {
    // Data Commons places associated with the event.
    repeated string places = 1;
    // Geospatial location of the event.
    repeated GeoLocation geo_locations = 2;
    // The format should be ISO 8601.
    repeated string dates = 3;
    // Key: salient property.
    map<string, ValList> prop_vals = 4;
    string dcid = 5;
    string provenance_id = 6;
  }

  message ProvenanceInfo {
    string import_name = 1;
    string provenance_url = 2;
    string domain = 3;
  }

  repeated Event events = 1;
  // Key: provenance ID.
  // Only provenance IDs present in |events| are included.
  map<string, ProvenanceInfo> provenance_info = 2;
}

message EventCollectionRequest {
  string event_type = 1;
  // Only for top-level places: Earth, continent, country, state, adminArea1.
  string affected_place_dcid = 2;
  // Format: YYYY-MM.
  // This is usually the start date of the event, for example:
  // - startDate
  // - discoveryDate
  // - occurrenceTime
  string date = 3;
  // The property used for filtering
  string filter_prop = 4;
  // Event is not returned if value below the limit
  double filter_limit = 5;
  string filter_unit = 6;
}

message EventCollectionResponse {
  EventCollection event_collection = 1;
}

message EventCollectionDate {
  // Format: YYYY-MM, corresponding to the date in EventCollection cache key.
  // Sorted from earliest to latest.
  repeated string dates = 1;
}

message EventCollectionDateRequest {
  string event_type = 1;
  // Only for top-level places: Earth, continent, country, state, adminArea1.
  string affected_place_dcid = 2;
}

message EventCollectionDateResponse {
  EventCollectionDate event_collection_date = 1;
}
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Use relative go package so the generated file is in the current folder.
option go_package = "./proto";
package datacommons;

import "stat.proto";
import "google/api/annotations.proto";

// A graph query request in Sparql query language.
message QueryRequest {
  // Sparql query string.
  string sparql = 1;
}

// Cell in the QueryResponse
message QueryResponseCell {
  // Cell value.
  string value = 1;

  // Provenance ID.
  string provenance_id = 2;
}

// A graph query response row corresponding to the query variables in graph
// query.
message QueryResponseRow {
  // A list of QueryResponseCell.
  repeated QueryResponseCell cells = 1;
}

// Graph query response.
message QueryResponse {
  // Identifier for selected variable. Size of the header is the same as number
  // of cells for each row.
  repeated string header = 1;

  // Query results, with each row containing cells corresponding to header
  // variable order.
  repeated QueryResponseRow rows = 2;
}

// Request to translate a graph query.
message TranslateRequest {
  // String representaion of schema mappings used to translate.
  string schema_mapping = 1;

  // String representation of sparql query.
  string sparql = 2;
}

// Response of a translate request.
message TranslateResponse {
  // The translated sql.
  string sql = 1;

  // Serialized json string of the translation result
  string translation = 2;
}

// Request to get property labels.
message GetPropertyLabelsRequest {
  // The dcids of nodes.
  repeated string dcids = 1;
}

// Response returned by GetPropertyLabels.
message GetPropertyLabelsResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get all neighboring nodes along an edge labeled by a property.
message GetPropertyValuesRequest {
  // The dcids of nodes to query for.
  repeated string dcids = 1;

  // The type of the neighboring node to query for.
  string value_type = 2;

  // The property to get adjacent nodes for.
  string property = 3;

  // Maximum number of nodes to query for.
  int32 limit = 4;

  // Direction, "in" or "out", default to "out".
  string direction = 5;
}

// Response returned by GetPropertyValues.
message GetPropertyValuesResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get all triples linking to the given nodes.
message GetTriplesRequest {
  // The dcids of the nodes to query for.
  repeated string dcids = 1;

  // Maximum number of triples for each property and type of the neighbor.
  int32 limit = 2;
}

// Response returned by GetTriples.
message GetTriplesResponse {
  // The JSON payload.
  string payload = 1;
}

// Represents a property value pair.
message PropertyValue {
  // The property schema
  string property = 1;

  // The value in string.
  string value = 2;
}

// Requests to get observation for all place.
message GetPlaceObsRequest {
  // The type of the place.
  string place_type = 1;

  // The stat var dcid.
  string stat_var = 2;

  // Observation date.
  string date = 3;
}

// Request to get places that are contained in parent places.
message GetPlacesInRequest {
  // The parent place dcids.
  repeated string dcids = 1;

  // The child place type.
  string place_type = 2;
}

// Response of GetPlacesIn.
message GetPlacesInResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get related locations of a place for given stat var DCIDs.
message GetRelatedLocationsRequest {
  // Place DCID.
  string dcid = 1;

  repeated string stat_var_dcids = 2;

  // (Optional) Whether to require all related places under the same ancestor.
  string within_place = 4;

  // (Optional) Whether the computation needs to be based on per capita.
  bool is_per_capita = 5;
}

// Request to get rankings of locations for given stat var DCIDs.
message GetLocationsRankingsRequest {
  repeated string stat_var_dcids = 1;

  // Place type to get rankings for.
  string place_type = 2;

  // (Optional) Whether to require all related places under the same ancestor.
  string within_place = 3;

  // (Optional) Whether the computation needs to be based on per capita.
  bool is_per_capita = 4;
}

message GetLocationsRankingsResponse {
  map<string, RelatedPlacesInfo> payload = 1;
}

// Response of GetRelatedLocations request.
message GetRelatedLocationsResponse {
  // The JSON payload.
  string payload = 1;
}

message Place {
  string dcid = 1;
  string name = 2;
  int32 pop = 3;
}

message Places {
  repeated Place places = 1;
}

// Request to get all stat data in landing page for a place.
message GetLandingPageDataRequest {
  // The dcid of the place.
  string place = 1;
  // A list of additional stat vars need to be fetched in addition to the
  // data in cache. This is to be used in local development, where new chart is
  // added to chart config but data is not added to cache (delay from cache
  // build).
  repeated string new_stat_vars = 4;
  // Seed value for random selection. Used by test to get deterministic result.
  int64 seed = 3;

  reserved 2;
}

// Response to get landing page info for a place.
message GetLandingPageDataResponse {
  // Keyed by place dcid.
  map<string, StatVarSeries> stat_var_series = 1;
  map<string, Places> all_child_places = 2;
  string child_places_type = 3;
  repeated string child_places = 4;
  repeated string parent_places = 5;
  repeated string similar_places = 6;
  repeated string nearby_places = 7;
}

// Search request sent to the mixer.
message SearchRequest {
  // Search query which is just a plain text string, e.g. "california".
  // This is not a datalog query, but a plain text query. The mixer is free
  // to choose an interpretation of the query, e.g. using NLP or just plain
  // keyword search and return relevant entities from the graph.
  string query = 1;

  // Maximum number of entities to return.
  int32 max_results = 2;
}

// Search response from mixer.
message SearchResponse {
  // Matching entities broken down by type.
  repeated SearchResultSection section = 1;
}

// Etmpty request to get version information.
message GetVersionRequest {
}

// Get version response.
message GetVersionResponse {
  // Store project
  string store = 1;
  // Big Query dataset
  string big_query = 2;
  // Bigtable instance
  string big_table = 3;
  // Github commit hash
  string git_hash = 4;
}

// Wrapper for all entities returned from search which belong to a single type.
message SearchResultSection {
  // Type of entities in this section.
  string type_name = 1;

  // List of entities in this section.
  repeated SearchEntityResult entity = 2;
}

// Data for a single entity returned by the search endpoint.
message SearchEntityResult {
  // DCID of the entity.
  string dcid = 1;

  // Name of the entity.
  string name = 2;
}

// StatsVars represent a list of statistical variable dcids.
message StatsVars {
  repeated string statsVars = 1;
}

// Request message for GetPlaceStats API.
message GetPlaceStatsVarRequest {
  // DCIDs of the places.
  repeated string dcids = 1;
}

// Response message for GetPlaceStats API.
message GetPlaceStatsVarResponse {
  // A map from place dcid to a list of statistical variable dcids.
  map<string, StatsVars> places = 1;
}


// StatVars represent a list of statistical variable dcids.
message StatVars {
  repeated string stat_vars = 1;
}

// Request message for GetPlaceStatVars API.
message GetPlaceStatVarsRequest {
  // DCIDs of the places.
  repeated string dcids = 1;
}

// Response message for GetPlaceStatVars API.
message GetPlaceStatVarsResponse {
  // A map from place dcid to a list of statistical variable dcids.
  map<string, StatVars> places = 1;
}

// Request message for GetPlaceStatVarsUnion API.
message GetPlaceStatVarsUnionRequest {
  // DCIDs of the places.
  repeated string dcids = 1;
}

// TODO(shifucun): remove this when GetPlaceStatVarsUnionV1 is live.
// Response message for GetPlaceStatVarsUnion API.
message GetPlaceStatVarsUnionResponse {
  StatVars stat_vars = 1;
}

// Response message for GetPlaceStatVarsUnionV1 API.
message GetPlaceStatVarsUnionResponseV1 {
  repeated string stat_vars = 1;
}

message StatVarGroups {
  // Key is StatVarGroup ID.
  map<string, StatVarGroupNode> stat_var_groups = 1;
}

message StatVarGroupNode {
  message ChildSVG {
    // StatVarGroup ID.
    string id = 1;
    // The specialized entity of the child StatVarGroup relative to the parent.
    // This can be used for naming when the child appears in the hierarchy.
    string specialized_entity = 2;
    // Name suitable for display in tree.
    string display_name = 3;
  }

  message ChildSV {
    // StatVar ID.
    string id = 1;
    // Name suitable for search.
    string search_name = 2;
    // Name suitable for display in tree.
    string display_name = 3;
  }

  // Absolute name of StatVarGroup. Typically used only for root nodes.
  string absolute_name = 1;
  // List of children StatVar IDs directly attached to this group. If there are
  // auto-generated and curated IDs for a StatVar, we'll prefer the curated.
  repeated ChildSV child_stat_vars = 2;
  // List of children StatVarGroups that are immediate specializations.
  repeated ChildSVG child_stat_var_groups = 3;
  // List of parent StatVarGroup IDs.
  repeated string parent_stat_var_groups = 4;
}

message GetStatVarGroupRequest {
  repeated string places = 2;
  reserved 1;
}

message GetStatVarGroupNodeRequest {
  // The stat var or stat var group ID to query for.
  string stat_var_group = 1;
  // The places that the stat var group is associated with. The response should
  // only contain the children stat var (group) if it has data for at least one
  // of the places.
  repeated string places = 2;
}

// SVOPlace holds basic information about a DC place along with its associated
// StatVarObservations.
//
// NOTE: Equivalent to legacy PopObsPlace.
message SVOPlace {
  string name = 1;
  string type = 2;
  string dcid = 3;
  // All StatVarObservations associated with the place.
  repeated SVOObservation observations = 4;
  string provenance_id = 5;

  // Not persisted in cache.
  message Temp {
    repeated string child_places = 2;
    repeated string mids = 3;
    reserved 1;
  }
  Temp temp = 6;
}

// Stores a StatVarObservation node.
//
// NOTE: Equivalent to legacy PopObsObservation.
message SVOObservation {
  string dcid = 1;
  string observation_date = 2;
  string observation_period = 3;
  string measurement_method = 4;
  string unit = 5;
  string scaling_factor = 6;
  string provenance_id = 7;

  oneof val {
    // Represents value for statType == "measurementResult"
    string str_value = 8;
    // Represents value for statType != "measurementResult"
    double dbl_value = 9;
  }

  // Not persisted in cache.
  message Temp {
    string observation_about = 1;
    string variable_measured = 2;
    string import_name = 3;
  }
  Temp temp = 10;
}

// SVOCollection holds information for multiple SVOPlace instances.
message SVOCollection {
  repeated SVOPlace places = 1;
}

// Basic info for an entity (subject or object).
message EntityInfo {
  string name = 1;
  repeated string types = 2;
  string dcid = 3;
  string provenance_id = 4;
  string value = 5;  // Only for object value.
}

// Basic info for a collection of entities.
message EntityInfoCollection {
  repeated EntityInfo entities = 1;
  int64 total_count = 2;  // Before potential truncation.
}

// A pair of entities linked by containedInPlace.
message ContainedInPlaceRelation {
  string parent_id = 1;
  string parent_type = 2;
  string child_id = 3;
  string child_type = 4;
}

// Triple.
message Triple {
  string subject_id = 1;
  string predicate = 2;
  string object_id = 3;
  string object_name = 4;  // Only when object_id is set.
  string object_value = 5;
  string provenance_id = 6;
  string subject_name = 7;            // Only for in arcs.
  repeated string subject_types = 8;  // Only for in arcs.
  repeated string object_types = 10;  // Only when object_id is set.
}

// A collection of triples.
message Triples {
  repeated Triple triples = 1;
  int64 total_count = 2;  // Before potential truncation.
}

// Essential provenance information.
message ProvenanceInfo {
  string provenance_id = 1;
  // Domain is obtained from the source of the provenance.
  string domain = 2;
  string import_name = 3;
}

// A full list of provenances.
message Provenances {
  repeated ProvenanceInfo provenances = 1;
}

// Full lists of in and out labels for a given node ID.
message PropertyLabels {
  repeated string in_labels = 1;
  repeated string out_labels = 2;
}

// Related places info for a given place and condition.
message RelatedPlacesInfo {
  message Ranking {
    message RankInfo {
      int32 rank = 1;
      double value = 2;
      string place_dcid = 3;
    }
    repeated RankInfo info = 1;
  }
  // The following 3 fields are set only when place is not empty.
  repeated string related_places = 1;
  int32 rank_from_top = 2;     // Starting from 1.
  int32 rank_from_bottom = 3;  // Starting from 1.

  // The following 3 fields are set only when place is empty.
  Ranking rank_all = 7;
  Ranking rank_top_1000 = 8;
  Ranking rank_bottom_1000 = 9;

  reserved 4, 5, 6;
}

message GetStatVarPathRequest {
  // DCID of a stat var or a stat var group
  string id = 1;
}

message GetStatVarPathResponse {
  // A list of stat var (stat var group) DCIDs from the queried node to the
  // root of stat var hierarchy.
  // This is one path out of many possible paths in the hierarchy. When there
  // are multiple nodes to select at given level, the first one in
  // alphabetical sorted order is selected.
  repeated string path = 1;
}

service Mixer {
  // Query DataCommons Graph with Sparql.
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query"
      additional_bindings: {
        post: "/query"
        body: "*"
      }
    };
  }

  // Fetch property labels adjacent of nodes
  rpc GetPropertyLabels(GetPropertyLabelsRequest)
      returns (GetPropertyLabelsResponse) {
    option (google.api.http) = {
      get: "/node/property-labels"
      additional_bindings: {
        post: "/node/property-labels"
        body: "*"
      }
    };
  }

  // Fetch nodes that linked to source nodes with a given property.
  rpc GetPropertyValues(GetPropertyValuesRequest)
      returns (GetPropertyValuesResponse) {
    option (google.api.http) = {
      get: "/node/property-values"
      additional_bindings: {
        post: "/node/property-values"
        body: "*"
      }
    };
  }

  // Fetch triples that have the given nodes as subject or object.
  rpc GetTriples(GetTriplesRequest) returns (GetTriplesResponse) {
    option (google.api.http) = {
      get: "/node/triples"
      additional_bindings: {
        post: "/node/triples"
        body: "*"
      }
    };
  }

  // Get places contained in parent places.
  rpc GetPlacesIn(GetPlacesInRequest) returns (GetPlacesInResponse) {
    option (google.api.http) = {
      get: "/node/places-in"
      additional_bindings: {
        post: "/node/places-in"
        body: "*"
      }
    };
  }

  // Get observation data for a list of places, given place type, population
  // type, and population constraining properties.
  rpc GetPlaceObs(GetPlaceObsRequest) returns (SVOCollection) {
    option (google.api.http) = {
      get: "/bulk/place-obs"
      additional_bindings: {
        post: "/bulk/place-obs"
        body: "*"
      }
    };
  }

  // Get stats of places by StatisticalVariable. If multiple time series data
  // are avaialable, the highest ranked one by measurement method and import
  // will be returned.
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse) {
    option (google.api.http) = {
      get: "/bulk/stats"
      additional_bindings: {
        post: "/bulk/stats"
        body: "*"
      }
    };
  }

  // Get stat of a set of places and statistical variables.
  //
  // If multiple time series data are avaialable, the highest ranked one by
  // measurement method, scaling factor and import will be returned.
  // This is a newer version of GetStats() that takes multiple stat vars and
  // returns protobuf field instead of "payload" of json string.
  rpc GetStatSetSeries(GetStatSetSeriesRequest) returns (GetStatSetSeriesResponse) {
    option (google.api.http) = {
      get: "/v1/stat/set/series"
      additional_bindings: {
        post: "/v1/stat/set/series"
        body: "*"
      }
    };
  }

  // Get a single stat value given a place, a statistical variable and a date.
  // If no date is given, the latest statistical variable will be returned.
  rpc GetStatValue(GetStatValueRequest) returns (GetStatValueResponse) {
    option (google.api.http) = {
      get: "/stat/value"
      additional_bindings: {
        post: "/stat/value"
        body: "*"
      }
    };
  }

  // Get a series of stat value with dates, given the place and statistical
  // variable.
  rpc GetStatSeries(GetStatSeriesRequest) returns (GetStatSeriesResponse) {
    option (google.api.http) = {
      get: "/stat/series"
      additional_bindings: {
        post: "/stat/series"
        body: "*"
      }
    };
  }

  // Get all stat series given a list of places and a list of statistical
  // variables.
  rpc GetStatAll(GetStatAllRequest) returns (GetStatAllResponse) {
    option (google.api.http) = {
      get: "/stat/all"
      additional_bindings: {
        post: "/stat/all"
        body: "*"
      }
    };
  }

  // Get the stat value for children places of certain place type at a given
  // date.
  rpc GetStatSetWithinPlace(GetStatSetWithinPlaceRequest) returns (GetStatSetResponse) {
    option (google.api.http) = {
      get: "/stat/set/within-place"
      additional_bindings: {
        post: "/stat/set/within-place"
        body: "*"
      }
    };
  }

  // Get the stat value for given places and stat vars. If date is not given,
  // then the latest value for each <place, stat var> is returned.
  rpc GetStatSet(GetStatSetRequest) returns (GetStatSetResponse) {
    option (google.api.http) = {
      get: "/stat/set"
      additional_bindings: {
        post: "/stat/set"
        body: "*"
      }
    };
  }

  // Get rankings for given stat var DCIDs.
  rpc GetLocationsRankings(GetLocationsRankingsRequest)
      returns (GetLocationsRankingsResponse) {
    option (google.api.http) = {
      get: "/node/ranking-locations"
      additional_bindings: {
        post: "/node/ranking-locations"
        body: "*"
      }
    };
  }

  // Get related locations for given stat var DCIDs.
  rpc GetRelatedLocations(GetRelatedLocationsRequest)
      returns (GetRelatedLocationsResponse) {
    option (google.api.http) = {
      get: "/node/related-locations"
      additional_bindings: {
        post: "/node/related-locations"
        body: "*"
      }
    };
  }

  // Get landing page info for a place.
  rpc GetLandingPageData(GetLandingPageDataRequest) returns (GetLandingPageDataResponse) {
    option (google.api.http) = {
      get: "/landing-page"
      additional_bindings: {
        post: "/landing-page"
        body: "*"
      }
    };
  }

  // Translate Sparql Query into translation results.
  rpc Translate(TranslateRequest) returns (TranslateResponse) {
    option (google.api.http) = {
      get: "/translate"
      additional_bindings: {
        post: "/translate"
        body: "*"
      }
    };
  }

  // Given a text search query, return all entities matching the query.
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      get: "/search"
    };
  }

  // Retrieves the version metadata.
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {
    option (google.api.http) = {
      get: "/version"
    };
  }

  // Give a list of place dcids, return all the statistical variables for each
  // place.
  rpc GetPlaceStatsVar(GetPlaceStatsVarRequest)
      returns (GetPlaceStatsVarResponse) {
    option (google.api.http) = {
      get: "/place/stats-var"
      additional_bindings: {
        post: "/place/stats-var"
        body: "*"
      }
    };
  }

  // Give a list of place dcids, return all the statistical variables for each
  // place.
  // TODO(shifucun): Deprecate GetPlaceStatsVar when all internal clients are migrated.
  rpc GetPlaceStatVars(GetPlaceStatVarsRequest)
      returns (GetPlaceStatVarsResponse) {
    option (google.api.http) = {
      get: "/place/stat-vars"
      additional_bindings: {
        post: "/place/stat-vars"
        body: "*"
      }
    };
  }

  // Given a list of place dcids, returns the union of available
  // statistical variables for the places.
  rpc GetPlaceStatVarsUnionV1(GetPlaceStatVarsUnionRequest)
      returns (GetPlaceStatVarsUnionResponseV1) {
    option (google.api.http) = {
      get: "/v1/place/stat-vars/union"
      additional_bindings: {
        post: "/v1/place/stat-vars/union"
        body: "*"
      }
    };
  }
  // TODO(shifucun): Deprecate this one after GetPlaceStatVarsUnion is live
  rpc GetPlaceStatVarsUnion(GetPlaceStatVarsUnionRequest)
      returns (GetPlaceStatVarsUnionResponse) {
    option (google.api.http) = {
      get: "/place/stat-vars/union"
      additional_bindings: {
        post: "/place/stat-vars/union"
        body: "*"
      }
    };
  }

  // Given ancestor place, child place type and stat vars, return the dates that have
  // data for each stat var across all child places.
  rpc GetPlaceStatDateWithinPlace(GetPlaceStatDateWithinPlaceRequest)
      returns (GetPlaceStatDateWithinPlaceResponse) {
    option (google.api.http) = {
      get: "/place/stat/date/within-place"
      additional_bindings: {
        post: "/place/stat/date/within-place"
        body: "*"
      }
    };
  }

  // Given a place, get the statvar group for stat vars that have data for it.
  rpc GetStatVarGroup(GetStatVarGroupRequest)
      returns (StatVarGroups) {
    option (google.api.http) = {
      get: "/place/stat-var-group"
      additional_bindings: {
        post: "/place/stat-var-group"
        body: "*"
      }
    };
  }

  // Get the stat var group node info. The children stat var and stat var group
  // should have data for at least one of the give places.
  rpc GetStatVarGroupNode(GetStatVarGroupNodeRequest)
      returns (StatVarGroupNode) {
    option (google.api.http) = {
      get: "/place/stat-var-group-node"
      additional_bindings: {
        post: "/place/stat-var-group-node"
        body: "*"
      }
    };
  }

  // Get the path from a stat var or a stat var group path to the root
  // of stat var hierarchy
  rpc GetStatVarPath(GetStatVarPathRequest)
      returns (GetStatVarPathResponse) {
    option (google.api.http) = {
      get: "/stat-var/path"
      additional_bindings: {
        post: "/stat-var/path"
        body: "*"
      }
    };
  }
}

// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Mixer service definitions

syntax = "proto3";
option go_package = "./proto";
package datacommons;


import "google/api/annotations.proto";
import "common.proto";
import "internal.proto";
import "misc.proto";
import "node.proto";
import "place.proto";
import "query.proto";
import "stat.proto";
import "stat_var.proto";
import "translate.proto";


service Mixer {
  // Query DataCommons Graph with Sparql.
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query"
      additional_bindings: {
        post: "/query"
        body: "*"
      }
    };
  }

  // Fetch property labels adjacent of nodes
  rpc GetPropertyLabels(GetPropertyLabelsRequest)
      returns (GetPropertyLabelsResponse) {
    option (google.api.http) = {
      get: "/node/property-labels"
      additional_bindings: {
        post: "/node/property-labels"
        body: "*"
      }
    };
  }

  // Fetch nodes that linked to source nodes with a given property.
  rpc GetPropertyValues(GetPropertyValuesRequest)
      returns (GetPropertyValuesResponse) {
    option (google.api.http) = {
      get: "/node/property-values"
      additional_bindings: {
        post: "/node/property-values"
        body: "*"
      }
    };
  }

  // Fetch triples that have the given nodes as subject or object.
  rpc GetTriples(GetTriplesRequest) returns (GetTriplesResponse) {
    option (google.api.http) = {
      get: "/node/triples"
      additional_bindings: {
        post: "/node/triples"
        body: "*"
      }
    };
  }

  // Get places contained in parent places.
  rpc GetPlacesIn(GetPlacesInRequest) returns (GetPlacesInResponse) {
    option (google.api.http) = {
      get: "/node/places-in"
      additional_bindings: {
        post: "/node/places-in"
        body: "*"
      }
    };
  }

  // Get observation data for a list of places, given place type, population
  // type, and population constraining properties.
  rpc GetPlaceObs(GetPlaceObsRequest) returns (SVOCollection) {
    option (google.api.http) = {
      get: "/bulk/place-obs"
      additional_bindings: {
        post: "/bulk/place-obs"
        body: "*"
      }
    };
  }

  // Get stats of places by StatisticalVariable. If multiple time series data
  // are avaialable, the highest ranked one by measurement method and import
  // will be returned.
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse) {
    option (google.api.http) = {
      get: "/bulk/stats"
      additional_bindings: {
        post: "/bulk/stats"
        body: "*"
      }
    };
  }

  // Get stat of a set of places and statistical variables.
  //
  // If multiple time series data are avaialable, the highest ranked one by
  // measurement method, scaling factor and import will be returned.
  // This is a newer version of GetStats() that takes multiple stat vars and
  // returns protobuf field instead of "payload" of json string.
  rpc GetStatSetSeries(GetStatSetSeriesRequest) returns (GetStatSetSeriesResponse) {
    option (google.api.http) = {
      get: "/v1/stat/set/series"
      additional_bindings: {
        post: "/v1/stat/set/series"
        body: "*"
      }
    };
  }

  // Get a single stat value given a place, a statistical variable and a date.
  // If no date is given, the latest statistical variable will be returned.
  rpc GetStatValue(GetStatValueRequest) returns (GetStatValueResponse) {
    option (google.api.http) = {
      get: "/stat/value"
      additional_bindings: {
        post: "/stat/value"
        body: "*"
      }
    };
  }

  // Get a series of stat value with dates, given the place and statistical
  // variable.
  rpc GetStatSeries(GetStatSeriesRequest) returns (GetStatSeriesResponse) {
    option (google.api.http) = {
      get: "/stat/series"
      additional_bindings: {
        post: "/stat/series"
        body: "*"
      }
    };
  }

  // Get all stat series given a list of places and a list of statistical
  // variables.
  rpc GetStatAll(GetStatAllRequest) returns (GetStatAllResponse) {
    option (google.api.http) = {
      get: "/stat/all"
      additional_bindings: {
        post: "/stat/all"
        body: "*"
      }
    };
  }

  // Get the stat value for children places of certain place type at a given
  // date.
  rpc GetStatSetWithinPlace(GetStatSetWithinPlaceRequest) returns (GetStatSetResponse) {
    option (google.api.http) = {
      get: "/stat/set/within-place"
      additional_bindings: {
        post: "/stat/set/within-place"
        body: "*"
      }
    };
  }

  // Get the stat value from all sources for children places of certain place
  // type. If date is not specified, the latest value of every source is
  // returned.
  rpc GetStatSetWithinPlaceAll(GetStatSetWithinPlaceRequest) returns (GetStatSetAllResponse) {
    option (google.api.http) = {
      get: "/stat/set/within-place/all"
      additional_bindings: {
        post: "/stat/set/within-place/all"
        body: "*"
      }
    };
  }

  // Get the stat value for given places and stat vars. If date is not given,
  // then the latest value for each <place, stat var> is returned.
  rpc GetStatSet(GetStatSetRequest) returns (GetStatSetResponse) {
    option (google.api.http) = {
      get: "/stat/set"
      additional_bindings: {
        post: "/stat/set"
        body: "*"
      }
    };
  }

  // Get the stat series for given parent places and child place type.
  rpc GetStatSetSeriesWithinPlace(GetStatSetSeriesWithinPlaceRequest) returns (GetStatSetSeriesResponse) {
    option (google.api.http) = {
      get: "/stat/set/series/within-place"
      additional_bindings: {
        post: "/stat/set/series/within-place"
        body: "*"
      }
    };
  }

  // Get rankings for given stat var DCIDs.
  rpc GetLocationsRankings(GetLocationsRankingsRequest)
      returns (GetLocationsRankingsResponse) {
    option (google.api.http) = {
      get: "/node/ranking-locations"
      additional_bindings: {
        post: "/node/ranking-locations"
        body: "*"
      }
    };
  }

  // Get related locations for given stat var DCIDs.
  rpc GetRelatedLocations(GetRelatedLocationsRequest)
      returns (GetRelatedLocationsResponse) {
    option (google.api.http) = {
      get: "/node/related-locations"
      additional_bindings: {
        post: "/node/related-locations"
        body: "*"
      }
    };
  }

  // Get place page info for a place.
  rpc GetPlacePageData(GetPlacePageDataRequest) returns (GetPlacePageDataResponse) {
    option (google.api.http) = {
      get: "/landing-page"
      additional_bindings: {
        post: "/landing-page"
        body: "*"
      }
      additional_bindings: {
        get: "/internal/place"
      }
      additional_bindings: {
        post: "/internal/place"
        body: "*"
      }
    };
  }

  // Get bio page data given a dcid.
  rpc GetBioPageData(GetBioPageDataRequest) returns (GraphNodes) {
    option (google.api.http) = {
      get: "/internal/bio"
      additional_bindings: {
        post: "/internal/bio"
        body: "*"
      }
    };
  }

  // Translate Sparql Query into translation results.
  rpc Translate(TranslateRequest) returns (TranslateResponse) {
    option (google.api.http) = {
      get: "/translate"
      additional_bindings: {
        post: "/translate"
        body: "*"
      }
    };
  }

  // Given a text search query, return all entities matching the query.
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      get: "/search"
    };
  }

  // Retrieves the version metadata.
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {
    option (google.api.http) = {
      get: "/version"
    };
  }

  // Give a list of place dcids, return all the statistical variables for each
  // place.
  rpc GetPlaceStatsVar(GetPlaceStatsVarRequest)
      returns (GetPlaceStatsVarResponse) {
    option (google.api.http) = {
      get: "/place/stats-var"
      additional_bindings: {
        post: "/place/stats-var"
        body: "*"
      }
    };
  }

  // Give a list of place dcids, return all the statistical variables for each
  // place.
  // TODO(shifucun): Deprecate GetPlaceStatsVar when all internal clients are migrated.
  rpc GetPlaceStatVars(GetPlaceStatVarsRequest)
      returns (GetPlaceStatVarsResponse) {
    option (google.api.http) = {
      get: "/place/stat-vars"
      additional_bindings: {
        post: "/place/stat-vars"
        body: "*"
      }
    };
  }

  // Given a list of place dcids, returns the union of available
  // statistical variables for the places.
  rpc GetPlaceStatVarsUnionV1(GetPlaceStatVarsUnionRequest)
      returns (GetPlaceStatVarsUnionResponse) {
    option (google.api.http) = {
      get: "/v1/place/stat-vars/union"
      additional_bindings: {
        post: "/v1/place/stat-vars/union"
        body: "*"
      }
    };
  }

  // Given ancestor place, child place type and stat vars, return the dates that have
  // data for each stat var across all child places.
  rpc GetPlaceStatDateWithinPlace(GetPlaceStatDateWithinPlaceRequest)
      returns (GetPlaceStatDateWithinPlaceResponse) {
    option (google.api.http) = {
      get: "/place/stat/date/within-place"
      additional_bindings: {
        post: "/place/stat/date/within-place"
        body: "*"
      }
    };
  }

  // Given a place, get the statvar group for stat vars that have data for it.
  rpc GetStatVarGroup(GetStatVarGroupRequest)
      returns (StatVarGroups) {
    option (google.api.http) = {
      get: "/place/stat-var-group"
      additional_bindings: {
        post: "/place/stat-var-group"
        body: "*"
      }
      additional_bindings: {
        get: "/stat-var/group/all"
      }
      additional_bindings: {
        post: "/stat-var/group/all"
        body: "*"
      }
    };
  }

  // Get the stat var group node info. The children stat var and stat var group
  // should have data for at least one of the give places.
  rpc GetStatVarGroupNode(GetStatVarGroupNodeRequest)
      returns (StatVarGroupNode) {
    option (google.api.http) = {
      get: "/stat-var/group"
      additional_bindings: {
        post: "/stat-var/group"
        body: "*"
      }
    };
  }

  // Get the path from a stat var or a stat var group path to the root
  // of stat var hierarchy
  rpc GetStatVarPath(GetStatVarPathRequest)
      returns (GetStatVarPathResponse) {
    option (google.api.http) = {
      get: "/stat-var/path"
      additional_bindings: {
        post: "/stat-var/path"
        body: "*"
      }
    };
  }

  // Search stat var and stat var groups.
  rpc SearchStatVar(SearchStatVarRequest)
      returns (SearchStatVarResponse) {
    option (google.api.http) = {
      get: "/stat-var/search"
      additional_bindings: {
        post: "/stat-var/search"
        body: "*"
      }
    };
  }

  // Given a list of stat vars, get their summaries.
  rpc GetStatVarSummary(GetStatVarSummaryRequest)
      returns (GetStatVarSummaryResponse) {
    option (google.api.http) = {
      get: "/stat-var/summary"
      additional_bindings: {
        post: "/stat-var/summary"
        body: "*"
      }
    };
  }
}

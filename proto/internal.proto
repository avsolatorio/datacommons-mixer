// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// REST API URL from the proto in this file:
// ========================================
//    /internal/place (/landing-page)
//    /internal/protein
// ========================================


syntax = "proto3";
option go_package = "./proto";
package datacommons;

import "stat.proto";


enum PropertyDirection {
  DIRECTION_UNKNOWN = 0;
  DIRECTION_IN = 1;
  DIRECTION_OUT = 2;
}

message Place {
  string dcid = 1;
  string name = 2;
  int32 pop = 3;
}

message Places {
  repeated Place places = 1;
}

// Request to get all data in place page.
message GetPlacePageDataRequest {
  // The dcid of the place.
  string place = 1;
  // A list of additional stat vars need to be fetched in addition to the
  // data in cache. This is to be used in local development, where new chart is
  // added to chart config but data is not added to cache (delay from cache
  // build).
  repeated string new_stat_vars = 4;
  // Seed value for random selection. Used by test to get deterministic result.
  int64 seed = 3;

  reserved 2;
}

// Response to get place page info for a place.
message GetPlacePageDataResponse {
  // Keyed by place dcid.
  map<string, StatVarSeries> stat_var_series = 1;
  map<string, Places> all_child_places = 2;
  string child_places_type = 3;
  repeated string child_places = 4;
  repeated string parent_places = 5;
  repeated string similar_places = 6;
  repeated string nearby_places = 7;
}


// Request to get all data in protein page.
message GetProteinPageDataRequest {
  // The dcid of the protein
  string protein = 1;
}
// Response to get all data in protein page.
message GetProteinPageDataResponse {
  // Message to hold a cohort of nodes that have the same predicate and
  // direction.
  message LinkedNodes {
    string property = 1;
    PropertyDirection direction = 2;
    repeated GetProteinPageDataResponse nodes = 3;
  }
  // A group of neighbour nodes by predicate.
  repeated LinkedNodes neighbours = 1;
  // Value of the node, could be dcid or node string value.
  string value = 2;
}
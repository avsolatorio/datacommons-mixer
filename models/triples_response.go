// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TriplesResponse triples response
// swagger:model TriplesResponse
type TriplesResponse map[string][]TriplesResponseItems0

// Validate validates this triples response
func (m TriplesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if err := validate.Required(k, "body", m[k]); err != nil {
			return err
		}

		for i := 0; i < len(m[k]); i++ {

			if err := m[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// TriplesResponseItems0 triples response items0
// swagger:model TriplesResponseItems0
type TriplesResponseItems0 struct {

	// object Id
	ObjectID string `json:"objectId,omitempty"`

	// object name
	ObjectName string `json:"objectName,omitempty"`

	// object types
	ObjectTypes []string `json:"objectTypes"`

	// object value
	ObjectValue string `json:"objectValue,omitempty"`

	// predicate
	Predicate string `json:"predicate,omitempty"`

	// provenance Id
	ProvenanceID string `json:"provenanceId,omitempty"`

	// subject Id
	SubjectID string `json:"subjectId,omitempty"`

	// subject name
	SubjectName string `json:"subjectName,omitempty"`

	// subject types
	SubjectTypes []string `json:"subjectTypes"`
}

// Validate validates this triples response items0
func (m *TriplesResponseItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TriplesResponseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriplesResponseItems0) UnmarshalBinary(b []byte) error {
	var res TriplesResponseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObservationsRequest observations request
// swagger:model ObservationsRequest
type ObservationsRequest struct {

	// dcids
	// Required: true
	Dcids []string `json:"dcids"`

	// measured property
	// Required: true
	MeasuredProperty *string `json:"measuredProperty"`

	// measurement method
	MeasurementMethod string `json:"measurementMethod,omitempty"`

	// observation date
	// Required: true
	ObservationDate *string `json:"observationDate"`

	// observation period
	ObservationPeriod string `json:"observationPeriod,omitempty"`

	// stats type
	// Required: true
	StatsType *string `json:"statsType"`
}

// Validate validates this observations request
func (m *ObservationsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDcids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasuredProperty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObservationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatsType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObservationsRequest) validateDcids(formats strfmt.Registry) error {

	if err := validate.Required("dcids", "body", m.Dcids); err != nil {
		return err
	}

	return nil
}

func (m *ObservationsRequest) validateMeasuredProperty(formats strfmt.Registry) error {

	if err := validate.Required("measuredProperty", "body", m.MeasuredProperty); err != nil {
		return err
	}

	return nil
}

func (m *ObservationsRequest) validateObservationDate(formats strfmt.Registry) error {

	if err := validate.Required("observationDate", "body", m.ObservationDate); err != nil {
		return err
	}

	return nil
}

func (m *ObservationsRequest) validateStatsType(formats strfmt.Registry) error {

	if err := validate.Required("statsType", "body", m.StatsType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObservationsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObservationsRequest) UnmarshalBinary(b []byte) error {
	var res ObservationsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This file is obtained from esp container in gke following the steps in:
# https://cloud.google.com/endpoints/docs/grpc/troubleshoot-gke-deployment#checking_configuration_files
# Section: Checking configuration files

# More details in https://cloud.google.com/endpoints/docs/grpc/custom-nginx


daemon off;

user nginx nginx;

pid /home/nginx/nginx.pid;

# Worker/connection processing limits
worker_processes 1;
worker_rlimit_nofile 10240;
events { worker_connections 10240; }


# Logging to stderr enables better integration with Docker and GKE/Kubernetes.
error_log stderr warn;

http {
  include /etc/nginx/mime.types;
  include /etc/nginx/conf/*.conf;
  server_tokens off;
  client_max_body_size 32m;
  client_body_buffer_size 128k;

  # HTTP subrequests
  endpoints_resolver 8.8.8.8;
  endpoints_certificates /etc/nginx/trusted-ca-certificates.crt;


  set_real_ip_from  0.0.0.0/0;
  set_real_ip_from  0::/0;
  real_ip_header    X-Forwarded-For;
  real_ip_recursive on;


  server {
    server_name "";
    resolver 8.8.8.8;


    listen 8081 backlog=16384;

    access_log /dev/stdout;

    location = /healthz {
      return 200;
      access_log off;
    }

    location / {
      # Begin Endpoints v2 Support
      endpoints {
        on;
        server_config /etc/nginx/server_config.pb.txt;
        metadata_server http://169.254.169.254;
      }
      # End Endpoints v2 Support


    set $cors "unset";
    # Begin CORS settings
    set $cors "true";
    set $allow_origin "*";

    if ($request_method = 'OPTIONS') {
        set $cors "${cors}options";
        add_header 'Cache-Control' "public, max-age=86400" always;
    }

    if ($cors = "trueoptions") {
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Access-Control-Allow-Origin' "$allow_origin";
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        add_header 'Cache-Control' "public, max-age=86400" always;

        return 204;
    }

    if ($cors = "true") {
        add_header 'Access-Control-Allow-Origin' "$allow_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Cache-Control' "public, max-age=86400" always;

    }
    if ($cors = "unset") {
        add_header 'Cache-Control' "public, max-age=86400" always;
    }
    # End CORS settings

      # WARNING: only first backend is used
      grpc_pass 127.0.0.1:12345 override;
    }

    include /var/lib/nginx/extra/*.conf;
  }

  server {
    # expose /nginx_status and /endpoints_status but on a different port to
    # avoid external visibility / conflicts with the app.
    listen 8090;
    location /nginx_status {
      stub_status on;
      access_log off;
    }
    location /endpoints_status {
      endpoints_status;
      access_log off;
    }
    location /healthz {
      return 200;
      access_log off;
    }
    location / {
      root /dev/null;
    }
  }
}

{
  "name": "mixer.endpoints.datcom-website-dev.cloud.goog",
  "title": "Mixer Test",
  "apis": [{
    "name": "datacommons.Mixer",
    "methods": [{
      "name": "Query",
      "requestTypeUrl": "type.googleapis.com/datacommons.QueryRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.QueryResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/query",
          "additionalBindings": [{
            "post": "/query",
            "body": "*"
          }]
        }
      }]
    }, {
      "name": "GetPropertyLabels",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPropertyLabelsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPropertyLabelsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/node/property-labels",
          "additionalBindings": [{
            "post": "/node/property-labels",
            "body": "*"
          }]
        }
      }]
    }, {
      "name": "GetPropertyValues",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPropertyValuesRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPropertyValuesResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/node/property-values",
          "additionalBindings": [{
            "post": "/node/property-values",
            "body": "*"
          }]
        }
      }]
    }, {
      "name": "GetTriples",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetTriplesRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetTriplesResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/node/triples",
          "additionalBindings": [{
            "post": "/node/triples",
            "body": "*"
          }]
        }
      }]
    }, {
      "name": "GetPopulations",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPopulationsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPopulationsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/node/populations",
          "body": "*"
        }
      }]
    }, {
      "name": "GetObservations",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetObservationsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetObservationsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/node/observations",
          "body": "*"
        }
      }]
    }, {
      "name": "GetPlacesIn",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPlacesInRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPlacesInResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/node/places-in",
          "additionalBindings": [{
            "post": "/node/places-in",
            "body": "*"
          }]
        }
      }]
    }, {
      "name": "GetPopObs",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPopObsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPopObsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/bulk/pop-obs"
        }
      }]
    }, {
      "name": "GetPlaceObs",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPlaceObsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPlaceObsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/bulk/place-obs",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStats",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/bulk/stats",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStat",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/stat/series/rich",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStatValue",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatValueRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatValueResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/stat/value",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStatSeries",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatSeriesRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatSeriesResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/stat/series",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStatAll",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatAllRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatAllResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/stat/all",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStatCollection",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatCollectionRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatCollectionResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/stat/collection",
          "body": "*"
        }
      }]
    }, {
      "name": "GetStatSet",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetStatSetRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetStatSetResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/stat/set",
          "body": "*"
        }
      }]
    }, {
      "name": "GetLocationsRankings",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetLocationsRankingsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetLocationsRankingsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/node/ranking-locations",
          "body": "*"
        }
      }]
    }, {
      "name": "GetRelatedLocations",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetRelatedLocationsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetRelatedLocationsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/node/related-locations",
          "body": "*"
        }
      }]
    }, {
      "name": "GetLandingPageData",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetLandingPageDataRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetLandingPageDataResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/landing-page",
          "body": "*"
        }
      }]
    }, {
      "name": "Translate",
      "requestTypeUrl": "type.googleapis.com/datacommons.TranslateRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.TranslateResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/translate",
          "body": "*"
        }
      }]
    }, {
      "name": "Search",
      "requestTypeUrl": "type.googleapis.com/datacommons.SearchRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.SearchResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/search"
        }
      }]
    }, {
      "name": "GetPlaceStatsVar",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPlaceStatsVarRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPlaceStatsVarResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/place/stats-var"
        }
      }]
    }, {
      "name": "GetPlaceStatVars",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPlaceStatVarsRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPlaceStatVarsResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "get": "/place/stat-vars",
          "additionalBindings": [{
            "post": "/place/stat-vars",
            "body": "*"
          }]
        }
      }]
    }, {
      "name": "GetPlaceStatVarsUnion",
      "requestTypeUrl": "type.googleapis.com/datacommons.GetPlaceStatVarsUnionRequest",
      "responseTypeUrl": "type.googleapis.com/datacommons.GetPlaceStatVarsUnionResponse",
      "options": [{
        "name": "google.api.http",
        "value": {
          "@type": "type.googleapis.com/google.api.HttpRule",
          "post": "/place/stat-vars/union",
          "body": "*"
        }
      }]
    }],
    "version": "v1",
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }],
  "types": [{
    "name": "datacommons.StatMetadata",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "import_name",
      "jsonName": "importName"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "provenance_url",
      "jsonName": "provenanceUrl"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "scaling_factor",
      "jsonName": "scalingFactor"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 6,
      "name": "unit",
      "jsonName": "unit"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.PointStat",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "date",
      "jsonName": "date"
    }, {
      "kind": "TYPE_DOUBLE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "jsonName": "value"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "metadata",
      "typeUrl": "type.googleapis.com/datacommons.StatMetadata",
      "jsonName": "metadata"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.PlacePointStat",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "stat",
      "typeUrl": "type.googleapis.com/datacommons.PlacePointStat.StatEntry",
      "jsonName": "stat"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.PlacePointStat.StatEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.PointStat",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.SourceSeries",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "val",
      "typeUrl": "type.googleapis.com/datacommons.SourceSeries.ValEntry",
      "jsonName": "val"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "import_name",
      "jsonName": "importName"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "provenance_domain",
      "jsonName": "provenanceDomain"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 6,
      "name": "unit",
      "jsonName": "unit"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 7,
      "name": "scaling_factor",
      "jsonName": "scalingFactor"
    }, {
      "kind": "TYPE_BOOL",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 8,
      "name": "is_dc_aggregate",
      "jsonName": "isDcAggregate"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 9,
      "name": "provenance_url",
      "jsonName": "provenanceUrl"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.SourceSeries.ValEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_DOUBLE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.ObsTimeSeries",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "data",
      "typeUrl": "type.googleapis.com/datacommons.ObsTimeSeries.DataEntry",
      "jsonName": "data"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "place_name",
      "jsonName": "placeName"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "place_dcid",
      "jsonName": "placeDcid"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 6,
      "name": "source_series",
      "typeUrl": "type.googleapis.com/datacommons.SourceSeries",
      "jsonName": "sourceSeries"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 7,
      "name": "provenance_domain",
      "jsonName": "provenanceDomain"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 8,
      "name": "provenance_url",
      "jsonName": "provenanceUrl"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.ObsTimeSeries.DataEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_DOUBLE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.PlaceStat",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 3,
      "name": "stat_var_data",
      "typeUrl": "type.googleapis.com/datacommons.PlaceStat.StatVarDataEntry",
      "jsonName": "statVarData"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.PlaceStat.StatVarDataEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.ObsTimeSeries",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "place",
      "jsonName": "place"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "stats_var",
      "jsonName": "statsVar"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "unit",
      "jsonName": "unit"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 6,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "places",
      "jsonName": "places"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "stat_var",
      "jsonName": "statVar"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "unit",
      "jsonName": "unit"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "stat",
      "typeUrl": "type.googleapis.com/datacommons.GetStatResponse.StatEntry",
      "jsonName": "stat"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatResponse.StatEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.SourceSeries",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatValueRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "place",
      "jsonName": "place"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "stat_var",
      "jsonName": "statVar"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "date",
      "jsonName": "date"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 6,
      "name": "unit",
      "jsonName": "unit"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 7,
      "name": "scaling_factor",
      "jsonName": "scalingFactor"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatValueResponse",
    "fields": [{
      "kind": "TYPE_DOUBLE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "value",
      "jsonName": "value"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatSeriesRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "place",
      "jsonName": "place"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "stat_var",
      "jsonName": "statVar"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "unit",
      "jsonName": "unit"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 6,
      "name": "scaling_factor",
      "jsonName": "scalingFactor"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatSeriesResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "series",
      "typeUrl": "type.googleapis.com/datacommons.GetStatSeriesResponse.SeriesEntry",
      "jsonName": "series"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatSeriesResponse.SeriesEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_DOUBLE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatAllRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "places",
      "jsonName": "places"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 2,
      "name": "stat_vars",
      "jsonName": "statVars"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatAllResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "place_data",
      "typeUrl": "type.googleapis.com/datacommons.GetStatAllResponse.PlaceDataEntry",
      "jsonName": "placeData"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatAllResponse.PlaceDataEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.PlaceStat",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatCollectionRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "parent_place",
      "jsonName": "parentPlace"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "child_type",
      "jsonName": "childType"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "date",
      "jsonName": "date"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 4,
      "name": "stat_vars",
      "jsonName": "statVars"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatCollectionResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "data",
      "typeUrl": "type.googleapis.com/datacommons.GetStatCollectionResponse.DataEntry",
      "jsonName": "data"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatCollectionResponse.DataEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.SourceSeries",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatSetRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "places",
      "jsonName": "places"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 2,
      "name": "stat_vars",
      "jsonName": "statVars"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "date",
      "jsonName": "date"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatSetResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "data",
      "typeUrl": "type.googleapis.com/datacommons.GetStatSetResponse.DataEntry",
      "jsonName": "data"
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetStatSetResponse.DataEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.PlacePointStat",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "stat.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.QueryRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "sparql",
      "jsonName": "sparql"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.QueryResponseCell",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "value",
      "jsonName": "value"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "provenance_id",
      "jsonName": "provenanceId"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.QueryResponseRow",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "cells",
      "typeUrl": "type.googleapis.com/datacommons.QueryResponseCell",
      "jsonName": "cells"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.QueryResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "header",
      "jsonName": "header"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 2,
      "name": "rows",
      "typeUrl": "type.googleapis.com/datacommons.QueryResponseRow",
      "jsonName": "rows"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.TranslateRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "schema_mapping",
      "jsonName": "schemaMapping"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "sparql",
      "jsonName": "sparql"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.TranslateResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "sql",
      "jsonName": "sql"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "translation",
      "jsonName": "translation"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPropertyLabelsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPropertyLabelsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPropertyValuesRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value_type",
      "jsonName": "valueType"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "property",
      "jsonName": "property"
    }, {
      "kind": "TYPE_INT32",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "limit",
      "jsonName": "limit"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "direction",
      "jsonName": "direction"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPropertyValuesResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetTriplesRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }, {
      "kind": "TYPE_INT32",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "limit",
      "jsonName": "limit"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetTriplesResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPopObsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "dcid",
      "jsonName": "dcid"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPopObsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.PropertyValue",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "property",
      "jsonName": "property"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "jsonName": "value"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceObsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "place_type",
      "jsonName": "placeType"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "population_type",
      "jsonName": "populationType"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 3,
      "name": "pvs",
      "typeUrl": "type.googleapis.com/datacommons.PropertyValue",
      "jsonName": "pvs"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "observation_date",
      "jsonName": "observationDate"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceObsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPopulationsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "population_type",
      "jsonName": "populationType"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 3,
      "name": "pvs",
      "typeUrl": "type.googleapis.com/datacommons.PropertyValue",
      "jsonName": "pvs"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPopulationsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetObservationsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "measured_property",
      "jsonName": "measuredProperty"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "observation_date",
      "jsonName": "observationDate"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "stats_type",
      "jsonName": "statsType"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "observation_period",
      "jsonName": "observationPeriod"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 6,
      "name": "measurement_method",
      "jsonName": "measurementMethod"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetObservationsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlacesInRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "place_type",
      "jsonName": "placeType"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlacesInResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetRelatedLocationsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "dcid",
      "jsonName": "dcid"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 2,
      "name": "stat_var_dcids",
      "jsonName": "statVarDcids"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "within_place",
      "jsonName": "withinPlace"
    }, {
      "kind": "TYPE_BOOL",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 5,
      "name": "is_per_capita",
      "jsonName": "isPerCapita"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetLocationsRankingsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "stat_var_dcids",
      "jsonName": "statVarDcids"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "place_type",
      "jsonName": "placeType"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "within_place",
      "jsonName": "withinPlace"
    }, {
      "kind": "TYPE_BOOL",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 4,
      "name": "is_per_capita",
      "jsonName": "isPerCapita"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetLocationsRankingsResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "payload",
      "typeUrl": "type.googleapis.com/datacommons.GetLocationsRankingsResponse.PayloadEntry",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetLocationsRankingsResponse.PayloadEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.RelatedPlacesInfo",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetRelatedLocationsResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetLandingPageDataRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "place",
      "jsonName": "place"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 2,
      "name": "stat_vars",
      "jsonName": "statVars"
    }, {
      "kind": "TYPE_INT64",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "seed",
      "jsonName": "seed"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetLandingPageDataResponse",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "payload",
      "jsonName": "payload"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.SearchRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "query",
      "jsonName": "query"
    }, {
      "kind": "TYPE_INT32",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "max_results",
      "jsonName": "maxResults"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.SearchResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "section",
      "typeUrl": "type.googleapis.com/datacommons.SearchResultSection",
      "jsonName": "section"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.SearchResultSection",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "type_name",
      "jsonName": "typeName"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 2,
      "name": "entity",
      "typeUrl": "type.googleapis.com/datacommons.SearchEntityResult",
      "jsonName": "entity"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.SearchEntityResult",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "dcid",
      "jsonName": "dcid"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "name",
      "jsonName": "name"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.StatsVars",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "statsVars",
      "jsonName": "statsvars"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatsVarRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatsVarResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "places",
      "typeUrl": "type.googleapis.com/datacommons.GetPlaceStatsVarResponse.PlacesEntry",
      "jsonName": "places"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatsVarResponse.PlacesEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.StatsVars",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.StatVars",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "stat_vars",
      "jsonName": "statVars"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatVarsRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatVarsResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "places",
      "typeUrl": "type.googleapis.com/datacommons.GetPlaceStatVarsResponse.PlacesEntry",
      "jsonName": "places"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatVarsResponse.PlacesEntry",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "key",
      "jsonName": "key"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "typeUrl": "type.googleapis.com/datacommons.StatVars",
      "jsonName": "value"
    }],
    "options": [{
      "name": "google.protobuf.MessageOptions.map_entry",
      "value": {
        "@type": "type.googleapis.com/google.protobuf.BoolValue",
        "value": true
      }
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatVarsUnionRequest",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "dcids",
      "jsonName": "dcids"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.GetPlaceStatVarsUnionResponse",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "stat_vars",
      "typeUrl": "type.googleapis.com/datacommons.StatVars",
      "jsonName": "statVars"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.RelatedPlacesInfo",
    "fields": [{
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "related_places",
      "jsonName": "relatedPlaces"
    }, {
      "kind": "TYPE_INT32",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "rank_from_top",
      "jsonName": "rankFromTop"
    }, {
      "kind": "TYPE_INT32",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "rank_from_bottom",
      "jsonName": "rankFromBottom"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 7,
      "name": "rank_all",
      "typeUrl": "type.googleapis.com/datacommons.RelatedPlacesInfo.Ranking",
      "jsonName": "rankAll"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 8,
      "name": "rank_top_1000",
      "typeUrl": "type.googleapis.com/datacommons.RelatedPlacesInfo.Ranking",
      "jsonName": "rankTop1000"
    }, {
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 9,
      "name": "rank_bottom_1000",
      "typeUrl": "type.googleapis.com/datacommons.RelatedPlacesInfo.Ranking",
      "jsonName": "rankBottom1000"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.RelatedPlacesInfo.Ranking",
    "fields": [{
      "kind": "TYPE_MESSAGE",
      "cardinality": "CARDINALITY_REPEATED",
      "number": 1,
      "name": "info",
      "typeUrl": "type.googleapis.com/datacommons.RelatedPlacesInfo.Ranking.RankInfo",
      "jsonName": "info"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }, {
    "name": "datacommons.RelatedPlacesInfo.Ranking.RankInfo",
    "fields": [{
      "kind": "TYPE_INT32",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 1,
      "name": "rank",
      "jsonName": "rank"
    }, {
      "kind": "TYPE_DOUBLE",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 2,
      "name": "value",
      "jsonName": "value"
    }, {
      "kind": "TYPE_STRING",
      "cardinality": "CARDINALITY_OPTIONAL",
      "number": 3,
      "name": "place_dcid",
      "jsonName": "placeDcid"
    }],
    "sourceContext": {
      "fileName": "mixer.proto"
    },
    "syntax": "SYNTAX_PROTO3"
  }],
  "documentation": {
    "rules": [{
      "selector": "datacommons.StatMetadata",
      "description": "StatMetadata contains the source and measurement information for a\nstatistical observation."
    }, {
      "selector": "datacommons.PointStat.date",
      "description": "date in IOS-8601 format"
    }, {
      "selector": "datacommons.PlacePointStat.stat",
      "description": "Keyed by place DCID."
    }, {
      "selector": "datacommons.ObsTimeSeries",
      "description": "Represents observation time series data."
    }, {
      "selector": "datacommons.ObsTimeSeries.data",
      "description": "Date to value."
    }, {
      "selector": "datacommons.ObsTimeSeries.place_dcid",
      "description": "Only set if the key uses mid."
    }, {
      "selector": "datacommons.GetStatsRequest",
      "description": "Request message for GetStats."
    }, {
      "selector": "datacommons.GetStatsRequest.place",
      "description": "The dcids of the place."
    }, {
      "selector": "datacommons.GetStatsRequest.stats_var",
      "description": "The dcid of the StatisticalVariable."
    }, {
      "selector": "datacommons.GetStatsRequest.measurement_method",
      "description": "(Optional) The measurement method of the observation. If not specified,\nstats series with any measurement methods could be returned."
    }, {
      "selector": "datacommons.GetStatsRequest.unit",
      "description": "(Optional) The unit of the observation. If not specified, stats series with\nany unit could be returned."
    }, {
      "selector": "datacommons.GetStatsRequest.observation_period",
      "description": "(Optional) The observation period of the observation. If not specified,\nstats series with any observation period could be returned."
    }, {
      "selector": "datacommons.GetStatsResponse",
      "description": "Response of GetStats"
    }, {
      "selector": "datacommons.GetStatsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetStatRequest",
      "description": "Request for GetStat API.\nTODO(shifucun): Deprecate GetStats() once all clients are switched to use\nthis API.\nRequest message for GetStat."
    }, {
      "selector": "datacommons.GetStatRequest.places",
      "description": "The dcids of the place."
    }, {
      "selector": "datacommons.GetStatRequest.stat_var",
      "description": "The dcid of the StatisticalVariable."
    }, {
      "selector": "datacommons.GetStatRequest.measurement_method",
      "description": "(Optional) The measurement method of the observation. If not specified,\nstats series with any measurement methods could be returned."
    }, {
      "selector": "datacommons.GetStatRequest.unit",
      "description": "(Optional) The unit of the observation. If not specified, stats series with\nany unit could be returned."
    }, {
      "selector": "datacommons.GetStatRequest.observation_period",
      "description": "(Optional) The observation period of the observation. If not specified,\nstats series with any observation period could be returned."
    }, {
      "selector": "datacommons.GetStatResponse",
      "description": "Response of GetStat"
    }, {
      "selector": "datacommons.GetStatResponse.stat",
      "description": "A map from place dcid to stat series."
    }, {
      "selector": "datacommons.GetStatValueRequest",
      "description": "Request for GetStat service."
    }, {
      "selector": "datacommons.GetStatValueRequest.place",
      "description": "dcid of the place."
    }, {
      "selector": "datacommons.GetStatValueRequest.stat_var",
      "description": "dcid of the stat var."
    }, {
      "selector": "datacommons.GetStatValueRequest.date",
      "description": "(optional) date of the stat. The latest date will be used if unspecified."
    }, {
      "selector": "datacommons.GetStatValueRequest.measurement_method",
      "description": "(optional) measurement method of the observation, ex: \"CensusACS5yrSurvey\"."
    }, {
      "selector": "datacommons.GetStatValueRequest.observation_period",
      "description": "(optional) observation period of the observation, ex: \"P1Y\"."
    }, {
      "selector": "datacommons.GetStatValueRequest.unit",
      "description": "(optional) unit of the observation."
    }, {
      "selector": "datacommons.GetStatValueRequest.scaling_factor",
      "description": "(optional) scaling factor of the observation."
    }, {
      "selector": "datacommons.GetStatSeriesRequest",
      "description": "Request for GetStatSeries service."
    }, {
      "selector": "datacommons.GetStatSeriesRequest.place",
      "description": "dcid of the place."
    }, {
      "selector": "datacommons.GetStatSeriesRequest.stat_var",
      "description": "dcid of the stat var."
    }, {
      "selector": "datacommons.GetStatSeriesRequest.measurement_method",
      "description": "(optional) measurement method of the observation, ex: \"CensusACS5yrSurvey\"."
    }, {
      "selector": "datacommons.GetStatSeriesRequest.observation_period",
      "description": "(optional) observation period of the observation, ex: \"P1Y\"."
    }, {
      "selector": "datacommons.GetStatSeriesRequest.unit",
      "description": "(optional) unit of the observation."
    }, {
      "selector": "datacommons.GetStatSeriesRequest.scaling_factor",
      "description": "(optional) scaling factor of the observation."
    }, {
      "selector": "datacommons.GetStatSeriesResponse",
      "description": "Response for GetStatSeries service."
    }, {
      "selector": "datacommons.GetStatSeriesResponse.series",
      "description": "A map from ISO date to stat value."
    }, {
      "selector": "datacommons.GetStatAllRequest",
      "description": "Request for GetStatAll service."
    }, {
      "selector": "datacommons.GetStatAllRequest.places",
      "description": "dcids of the place."
    }, {
      "selector": "datacommons.GetStatAllRequest.stat_vars",
      "description": "dcids of the stat var."
    }, {
      "selector": "datacommons.GetStatAllResponse",
      "description": "Response for GetStatAll service.\n\nThe response is a two level map, with the first level keyed by place dcid,\nand the second level keyed by the stat var dcid.\nEach leaf object contains multiple source series with \u003cdate, value\u003e object\nand observation metadata.\n\nThe response is transcoded by esp:\nhttps://cloud.google.com/endpoints/docs/grpc/grpc-service-config Example\nresponse after esp transcoding is like below.\n{\n  placeData: {\n    \"geoId/01\": {\n      statVarData: {\n        \"statvar1\": {\n          \"placeName\": \"City of Mountain View\",\n          \"sourceSeries\": [\n            {\n              \"val\": {\n                \"2008\": 2116,\n                \"2009\": 2155,\n                \"2010\": 1633,\n                \"2011\": 1509,\n                \"2012\": 1581,\n                \"2013\": 1867,\n                \"2014\": 1770,\n                \"2015\": 2201,\n                \"2016\": 1913,\n                \"2017\": 2138\n              },\n              \"observationPeriod\": \"P1Y\",\n              \"importName\": \"FBIGovCrime\",\n              \"provenanceDomain\": \"fbi.gov\"\n            }\n          ]\n        },\n      }\n    },\n    \"geoId/02\": {\n      statVarData: {\n        \"statvar3\": {...},\n      }\n    }\n  }\n}"
    }, {
      "selector": "datacommons.GetStatCollectionRequest.parent_place",
      "description": "Parent place dcid."
    }, {
      "selector": "datacommons.GetStatCollectionRequest.child_type",
      "description": "Child place type."
    }, {
      "selector": "datacommons.GetStatCollectionRequest.date",
      "description": "Date for the stat in ISO format."
    }, {
      "selector": "datacommons.GetStatCollectionRequest.stat_vars",
      "description": "Dcid of the stat var."
    }, {
      "selector": "datacommons.GetStatCollectionResponse",
      "description": "Response for GetStatCollection service."
    }, {
      "selector": "datacommons.GetStatSetRequest.places",
      "description": "A list of place DCIDs."
    }, {
      "selector": "datacommons.GetStatSetRequest.stat_vars",
      "description": "A list of statistical variable DCIDs."
    }, {
      "selector": "datacommons.GetStatSetRequest.date",
      "description": "(Optional) date of the stat.\nIf not sepcified, the latest stat of a chosen source will be returned."
    }, {
      "selector": "datacommons.GetStatSetResponse.data",
      "description": "Keyed by statVar."
    }, {
      "selector": "datacommons.QueryRequest",
      "description": "A graph query request in Sparql query language."
    }, {
      "selector": "datacommons.QueryRequest.sparql",
      "description": "Sparql query string."
    }, {
      "selector": "datacommons.QueryResponseCell",
      "description": "Cell in the QueryResponse"
    }, {
      "selector": "datacommons.QueryResponseCell.value",
      "description": "Cell value."
    }, {
      "selector": "datacommons.QueryResponseCell.provenance_id",
      "description": "Provenance ID."
    }, {
      "selector": "datacommons.QueryResponseRow",
      "description": "A graph query response row corresponding to the query variables in graph\nquery."
    }, {
      "selector": "datacommons.QueryResponseRow.cells",
      "description": "A list of QueryResponseCell."
    }, {
      "selector": "datacommons.QueryResponse",
      "description": "Graph query response."
    }, {
      "selector": "datacommons.QueryResponse.header",
      "description": "Identifier for selected variable. Size of the header is the same as number\nof cells for each row."
    }, {
      "selector": "datacommons.QueryResponse.rows",
      "description": "Query results, with each row containing cells corresponding to header\nvariable order."
    }, {
      "selector": "datacommons.TranslateRequest",
      "description": "Request to translate a graph query."
    }, {
      "selector": "datacommons.TranslateRequest.schema_mapping",
      "description": "String representaion of schema mappings used to translate."
    }, {
      "selector": "datacommons.TranslateRequest.sparql",
      "description": "String representation of sparql query."
    }, {
      "selector": "datacommons.TranslateResponse",
      "description": "Response of a translate request."
    }, {
      "selector": "datacommons.TranslateResponse.sql",
      "description": "The translated sql."
    }, {
      "selector": "datacommons.TranslateResponse.translation",
      "description": "Serialized json string of the translation result"
    }, {
      "selector": "datacommons.GetPropertyLabelsRequest",
      "description": "Request to get property labels."
    }, {
      "selector": "datacommons.GetPropertyLabelsRequest.dcids",
      "description": "The dcids of nodes."
    }, {
      "selector": "datacommons.GetPropertyLabelsResponse",
      "description": "Response returned by GetPropertyLabels."
    }, {
      "selector": "datacommons.GetPropertyLabelsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetPropertyValuesRequest",
      "description": "Request to get all neighboring nodes along an edge labeled by a property."
    }, {
      "selector": "datacommons.GetPropertyValuesRequest.dcids",
      "description": "The dcids of nodes to query for."
    }, {
      "selector": "datacommons.GetPropertyValuesRequest.value_type",
      "description": "The type of the neighboring node to query for."
    }, {
      "selector": "datacommons.GetPropertyValuesRequest.property",
      "description": "The property to get adjacent nodes for."
    }, {
      "selector": "datacommons.GetPropertyValuesRequest.limit",
      "description": "Maximum number of nodes to query for."
    }, {
      "selector": "datacommons.GetPropertyValuesRequest.direction",
      "description": "Direction, \"in\" or \"out\", default to \"out\"."
    }, {
      "selector": "datacommons.GetPropertyValuesResponse",
      "description": "Response returned by GetPropertyValues."
    }, {
      "selector": "datacommons.GetPropertyValuesResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetTriplesRequest",
      "description": "Request to get all triples linking to the given nodes."
    }, {
      "selector": "datacommons.GetTriplesRequest.dcids",
      "description": "The dcids of the nodes to query for."
    }, {
      "selector": "datacommons.GetTriplesRequest.limit",
      "description": "Maximum number of triples for each property and type of the neighbor."
    }, {
      "selector": "datacommons.GetTriplesResponse",
      "description": "Response returned by GetTriples."
    }, {
      "selector": "datacommons.GetTriplesResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetPopObsRequest",
      "description": "Request to get all population/observation information for a place."
    }, {
      "selector": "datacommons.GetPopObsRequest.dcid",
      "description": "DCID of a place."
    }, {
      "selector": "datacommons.GetPopObsResponse",
      "description": "Response of GetPopObs."
    }, {
      "selector": "datacommons.GetPopObsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.PropertyValue",
      "description": "Represents a property value pair."
    }, {
      "selector": "datacommons.PropertyValue.property",
      "description": "The property schema"
    }, {
      "selector": "datacommons.PropertyValue.value",
      "description": "The value in string."
    }, {
      "selector": "datacommons.GetPlaceObsRequest",
      "description": "Requests to get observation for all place."
    }, {
      "selector": "datacommons.GetPlaceObsRequest.place_type",
      "description": "The type of the place."
    }, {
      "selector": "datacommons.GetPlaceObsRequest.population_type",
      "description": "The type of the Statistical population."
    }, {
      "selector": "datacommons.GetPlaceObsRequest.pvs",
      "description": "A list of constraining property values that defines the population."
    }, {
      "selector": "datacommons.GetPlaceObsRequest.observation_date",
      "description": "Observation date."
    }, {
      "selector": "datacommons.GetPlaceObsResponse",
      "description": "Response of GetPlaceObs."
    }, {
      "selector": "datacommons.GetPlaceObsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetPopulationsRequest",
      "description": "Request to get certain population for a set of places."
    }, {
      "selector": "datacommons.GetPopulationsRequest.dcids",
      "description": "DCIDs for a list of places."
    }, {
      "selector": "datacommons.GetPopulationsRequest.population_type",
      "description": "Population type."
    }, {
      "selector": "datacommons.GetPopulationsRequest.pvs",
      "description": "A list of constraining property values that define the population."
    }, {
      "selector": "datacommons.GetPopulationsResponse",
      "description": "Response of GetPopulation."
    }, {
      "selector": "datacommons.GetPopulationsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetObservationsRequest",
      "description": "Request to get observation given a list of population and observation\nproperties."
    }, {
      "selector": "datacommons.GetObservationsRequest.dcids",
      "description": "Population for a list of populations."
    }, {
      "selector": "datacommons.GetObservationsRequest.measured_property",
      "description": "The measured property of the observation."
    }, {
      "selector": "datacommons.GetObservationsRequest.observation_date",
      "description": "The observation date."
    }, {
      "selector": "datacommons.GetObservationsRequest.stats_type",
      "description": "The statistics type, like \"measured_value\", \"median_value\", etc...\nTODO: Change the variable name to \u0027stat_type\u0027 to be consistent."
    }, {
      "selector": "datacommons.GetObservationsRequest.observation_period",
      "description": "(Optional) Observation period like \"P1Y\", \"P3M\" etc..."
    }, {
      "selector": "datacommons.GetObservationsRequest.measurement_method",
      "description": "(Opitonal) Measurement method used to get the observation."
    }, {
      "selector": "datacommons.GetObservationsResponse",
      "description": "Response of GetObservation request."
    }, {
      "selector": "datacommons.GetObservationsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetPlacesInRequest",
      "description": "Request to get places that are contained in parent places."
    }, {
      "selector": "datacommons.GetPlacesInRequest.dcids",
      "description": "The parent place dcids."
    }, {
      "selector": "datacommons.GetPlacesInRequest.place_type",
      "description": "The child place type."
    }, {
      "selector": "datacommons.GetPlacesInResponse",
      "description": "Response of GetPlacesIn."
    }, {
      "selector": "datacommons.GetPlacesInResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetRelatedLocationsRequest",
      "description": "Request to get related locations of a place for given stat var DCIDs."
    }, {
      "selector": "datacommons.GetRelatedLocationsRequest.dcid",
      "description": "Place DCID."
    }, {
      "selector": "datacommons.GetRelatedLocationsRequest.within_place",
      "description": "(Optional) Whether to require all related places under the same ancestor."
    }, {
      "selector": "datacommons.GetRelatedLocationsRequest.is_per_capita",
      "description": "(Optional) Whether the computation needs to be based on per capita."
    }, {
      "selector": "datacommons.GetLocationsRankingsRequest",
      "description": "Request to get rankings of locations for given stat var DCIDs."
    }, {
      "selector": "datacommons.GetLocationsRankingsRequest.place_type",
      "description": "Place type to get rankings for."
    }, {
      "selector": "datacommons.GetLocationsRankingsRequest.within_place",
      "description": "(Optional) Whether to require all related places under the same ancestor."
    }, {
      "selector": "datacommons.GetLocationsRankingsRequest.is_per_capita",
      "description": "(Optional) Whether the computation needs to be based on per capita."
    }, {
      "selector": "datacommons.GetRelatedLocationsResponse",
      "description": "Response of GetRelatedLocations request."
    }, {
      "selector": "datacommons.GetRelatedLocationsResponse.payload",
      "description": "The JSON payload."
    }, {
      "selector": "datacommons.GetLandingPageDataRequest",
      "description": "Request to get all stat data in landing page for a place."
    }, {
      "selector": "datacommons.GetLandingPageDataRequest.place",
      "description": "The dcid of the place."
    }, {
      "selector": "datacommons.GetLandingPageDataRequest.stat_vars",
      "description": "A list of all stat vars used in the landing page."
    }, {
      "selector": "datacommons.GetLandingPageDataRequest.seed",
      "description": "Seed value for random selection. Used by test to get deterministic result."
    }, {
      "selector": "datacommons.GetLandingPageDataResponse",
      "description": "Response to get landing page info for places."
    }, {
      "selector": "datacommons.SearchRequest",
      "description": "Search request sent to the mixer."
    }, {
      "selector": "datacommons.SearchRequest.query",
      "description": "Search query which is just a plain text string, e.g. \"california\".\nThis is not a datalog query, but a plain text query. The mixer is free\nto choose an interpretation of the query, e.g. using NLP or just plain\nkeyword search and return relevant entities from the graph."
    }, {
      "selector": "datacommons.SearchRequest.max_results",
      "description": "Maximum number of entities to return."
    }, {
      "selector": "datacommons.SearchResponse",
      "description": "Search response from mixer."
    }, {
      "selector": "datacommons.SearchResponse.section",
      "description": "Matching entities broken down by type."
    }, {
      "selector": "datacommons.SearchResultSection",
      "description": "Wrapper for all entities returned from search which belong to a single type."
    }, {
      "selector": "datacommons.SearchResultSection.type_name",
      "description": "Type of entities in this section."
    }, {
      "selector": "datacommons.SearchResultSection.entity",
      "description": "List of entities in this section."
    }, {
      "selector": "datacommons.SearchEntityResult",
      "description": "Data for a single entity returned by the search endpoint."
    }, {
      "selector": "datacommons.SearchEntityResult.dcid",
      "description": "DCID of the entity."
    }, {
      "selector": "datacommons.SearchEntityResult.name",
      "description": "Name of the entity."
    }, {
      "selector": "datacommons.StatsVars",
      "description": "StatsVars represent a list of statistical variable dcids."
    }, {
      "selector": "datacommons.GetPlaceStatsVarRequest",
      "description": "Request message for GetPlaceStats API."
    }, {
      "selector": "datacommons.GetPlaceStatsVarRequest.dcids",
      "description": "DCIDs of the places."
    }, {
      "selector": "datacommons.GetPlaceStatsVarResponse",
      "description": "Response message for GetPlaceStats API."
    }, {
      "selector": "datacommons.GetPlaceStatsVarResponse.places",
      "description": "A map from place dcid to a list of statistical variable dcids."
    }, {
      "selector": "datacommons.StatVars",
      "description": "StatVars represent a list of statistical variable dcids."
    }, {
      "selector": "datacommons.GetPlaceStatVarsRequest",
      "description": "Request message for GetPlaceStatVars API."
    }, {
      "selector": "datacommons.GetPlaceStatVarsRequest.dcids",
      "description": "DCIDs of the places."
    }, {
      "selector": "datacommons.GetPlaceStatVarsResponse",
      "description": "Response message for GetPlaceStatVars API."
    }, {
      "selector": "datacommons.GetPlaceStatVarsResponse.places",
      "description": "A map from place dcid to a list of statistical variable dcids."
    }, {
      "selector": "datacommons.GetPlaceStatVarsUnionRequest",
      "description": "Request message for GetPlaceStatVarsUnion API."
    }, {
      "selector": "datacommons.GetPlaceStatVarsUnionRequest.dcids",
      "description": "DCIDs of the places."
    }, {
      "selector": "datacommons.GetPlaceStatVarsUnionResponse",
      "description": "Response message for GetPlaceStatVarsUnion API."
    }, {
      "selector": "datacommons.RelatedPlacesInfo",
      "description": "Related places info for a given place and condition."
    }, {
      "selector": "datacommons.RelatedPlacesInfo.related_places",
      "description": "The following 3 fields are set only when place is not empty."
    }, {
      "selector": "datacommons.RelatedPlacesInfo.rank_from_top",
      "description": "Starting from 1."
    }, {
      "selector": "datacommons.RelatedPlacesInfo.rank_from_bottom",
      "description": "Starting from 1."
    }, {
      "selector": "datacommons.RelatedPlacesInfo.rank_all",
      "description": "The following 3 fields are set only when place is empty."
    }, {
      "selector": "datacommons.Mixer.Query",
      "description": "Query DataCommons Graph with Sparql."
    }, {
      "selector": "datacommons.Mixer.GetPropertyLabels",
      "description": "Fetch property labels adjacent of nodes"
    }, {
      "selector": "datacommons.Mixer.GetPropertyValues",
      "description": "Fetch nodes that linked to source nodes with a given property."
    }, {
      "selector": "datacommons.Mixer.GetTriples",
      "description": "Fetch triples that have the given nodes as subject or object."
    }, {
      "selector": "datacommons.Mixer.GetPopulations",
      "description": "Get populations for a list of places, given the population type and\nconstraining property values."
    }, {
      "selector": "datacommons.Mixer.GetObservations",
      "description": "Get observations for a list of population, given the observation\nconstraints."
    }, {
      "selector": "datacommons.Mixer.GetPlacesIn",
      "description": "Get places contained in parent places."
    }, {
      "selector": "datacommons.Mixer.GetPopObs",
      "description": "Get population and observation data for a place."
    }, {
      "selector": "datacommons.Mixer.GetPlaceObs",
      "description": "Get observation data for a list of places, given place type, population\ntype, and population constraining properties."
    }, {
      "selector": "datacommons.Mixer.GetStats",
      "description": "Get stats of places by StatisticalVariable. If multiple time series data\nare avaialable, the highest ranked one by measurement method and import\nwill be returned."
    }, {
      "selector": "datacommons.Mixer.GetStat",
      "description": "Get stat of places by StatisticalVariable. If multiple time series data\nare avaialable, the highest ranked one by measurement method and import\nwill be returned.\nThis is a newer version of GetStats and returns protobuf field instead of\n\"payload\" of json string."
    }, {
      "selector": "datacommons.Mixer.GetStatValue",
      "description": "Get a single stat value given a place, a statistical variable and a date.\nIf no date is given, the latest statistical variable will be returned."
    }, {
      "selector": "datacommons.Mixer.GetStatSeries",
      "description": "Get a series of stat value with dates, given the place and statistical\nvariable."
    }, {
      "selector": "datacommons.Mixer.GetStatAll",
      "description": "Get all stat series given a list of places and a list of statistical\nvariables."
    }, {
      "selector": "datacommons.Mixer.GetStatCollection",
      "description": "Get the stat value for children places of certain place type at a given\ndate."
    }, {
      "selector": "datacommons.Mixer.GetStatSet",
      "description": "Get the stat value for given places and stat vars. If date is not given,\nthen the latest value for each \u003cplace, stat var\u003e is returned."
    }, {
      "selector": "datacommons.Mixer.GetLocationsRankings",
      "description": "Get rankings for given stat var DCIDs."
    }, {
      "selector": "datacommons.Mixer.GetRelatedLocations",
      "description": "Get related locations for given stat var DCIDs."
    }, {
      "selector": "datacommons.Mixer.GetLandingPageData",
      "description": "Get landing page info for a place."
    }, {
      "selector": "datacommons.Mixer.Translate",
      "description": "Translate Sparql Query into translation results."
    }, {
      "selector": "datacommons.Mixer.Search",
      "description": "Given a text search query, return all entities matching the query."
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatsVar",
      "description": "Give a list of place dcids, return all the statistical variables for each\nplace."
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatVars",
      "description": "Give a list of place dcids, return all the statistical variables for each\nplace.\nTODO(shifucun): Deprecate GetPlaceStatsVar when all internal clients are migrated."
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatVarsUnion",
      "description": "Given a list of place dcids, returns the union of available\nstatistical variables for the places.\nchange"
    }]
  },
  "http": {
    "rules": [{
      "selector": "datacommons.Mixer.Query",
      "get": "/query",
      "additionalBindings": [{
        "post": "/query",
        "body": "*"
      }]
    }, {
      "selector": "datacommons.Mixer.GetPropertyLabels",
      "get": "/node/property-labels",
      "additionalBindings": [{
        "post": "/node/property-labels",
        "body": "*"
      }]
    }, {
      "selector": "datacommons.Mixer.GetPropertyValues",
      "get": "/node/property-values",
      "additionalBindings": [{
        "post": "/node/property-values",
        "body": "*"
      }]
    }, {
      "selector": "datacommons.Mixer.GetTriples",
      "get": "/node/triples",
      "additionalBindings": [{
        "post": "/node/triples",
        "body": "*"
      }]
    }, {
      "selector": "datacommons.Mixer.GetPopulations",
      "post": "/node/populations",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetObservations",
      "post": "/node/observations",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetPlacesIn",
      "get": "/node/places-in",
      "additionalBindings": [{
        "post": "/node/places-in",
        "body": "*"
      }]
    }, {
      "selector": "datacommons.Mixer.GetPopObs",
      "get": "/bulk/pop-obs"
    }, {
      "selector": "datacommons.Mixer.GetPlaceObs",
      "post": "/bulk/place-obs",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStats",
      "post": "/bulk/stats",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStat",
      "post": "/stat/series/rich",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStatValue",
      "get": "/stat/value",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStatSeries",
      "get": "/stat/series",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStatAll",
      "post": "/stat/all",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStatCollection",
      "get": "/stat/collection",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetStatSet",
      "post": "/stat/set",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetLocationsRankings",
      "get": "/node/ranking-locations",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetRelatedLocations",
      "post": "/node/related-locations",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.GetLandingPageData",
      "post": "/landing-page",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.Translate",
      "post": "/translate",
      "body": "*"
    }, {
      "selector": "datacommons.Mixer.Search",
      "get": "/search"
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatsVar",
      "get": "/place/stats-var"
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatVars",
      "get": "/place/stat-vars",
      "additionalBindings": [{
        "post": "/place/stat-vars",
        "body": "*"
      }]
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatVarsUnion",
      "post": "/place/stat-vars/union",
      "body": "*"
    }]
  },
  "quota": {
  },
  "authentication": {
  },
  "usage": {
    "rules": [{
      "selector": "datacommons.Mixer.Query",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPropertyLabels",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPropertyValues",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetTriples",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPopulations",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetObservations",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPlacesIn",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPopObs",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPlaceObs",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStats",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStat",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStatValue",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStatSeries",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStatAll",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStatCollection",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetStatSet",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetLocationsRankings",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetRelatedLocations",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetLandingPageData",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.Translate",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.Search",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatsVar",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatVars",
      "allowUnregisteredCalls": true
    }, {
      "selector": "datacommons.Mixer.GetPlaceStatVarsUnion",
      "allowUnregisteredCalls": true
    }]
  },
  "endpoints": [{
    "name": "mixer.endpoints.datcom-website-dev.cloud.goog"
  }],
  "configVersion": 3,
  "systemParameters": {
  }
}
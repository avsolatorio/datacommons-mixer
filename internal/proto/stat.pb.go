// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// REST API URL from the proto in this file:
// ========================================
//    /bulk/place-obs
//    /bulk/stats
//    /stat/all
//    /stat/set
//    /stat/series
//    /stat/set/within-place
//    /stat/value
//    /v1/stat/set/series
// ========================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.17.3
// source: stat.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// StatMetadata contains the source and measurement information for a
// statistical observation.
type StatMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportName        string `protobuf:"bytes,1,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
	ProvenanceUrl     string `protobuf:"bytes,2,opt,name=provenance_url,json=provenanceUrl,proto3" json:"provenance_url,omitempty"`
	MeasurementMethod string `protobuf:"bytes,3,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	ObservationPeriod string `protobuf:"bytes,4,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	ScalingFactor     string `protobuf:"bytes,5,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	Unit              string `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *StatMetadata) Reset() {
	*x = StatMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatMetadata) ProtoMessage() {}

func (x *StatMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatMetadata.ProtoReflect.Descriptor instead.
func (*StatMetadata) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{0}
}

func (x *StatMetadata) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *StatMetadata) GetProvenanceUrl() string {
	if x != nil {
		return x.ProvenanceUrl
	}
	return ""
}

func (x *StatMetadata) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *StatMetadata) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *StatMetadata) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *StatMetadata) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type PointStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date in IOS-8601 format
	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// Full metadata of the stat
	Metadata *StatMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// A hash string of the meta data, this is to be used together with a map from
	// the hash to the full metatdata.
	MetaHash string `protobuf:"bytes,4,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
}

func (x *PointStat) Reset() {
	*x = PointStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointStat) ProtoMessage() {}

func (x *PointStat) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointStat.ProtoReflect.Descriptor instead.
func (*PointStat) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{1}
}

func (x *PointStat) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PointStat) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PointStat) GetMetadata() *StatMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PointStat) GetMetaHash() string {
	if x != nil {
		return x.MetaHash
	}
	return ""
}

type PlacePointStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyed by place DCID.
	Stat map[string]*PointStat `protobuf:"bytes,1,rep,name=stat,proto3" json:"stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Keyed by metadata hash.
	Metadata map[string]*StatMetadata `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlacePointStat) Reset() {
	*x = PlacePointStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacePointStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePointStat) ProtoMessage() {}

func (x *PlacePointStat) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePointStat.ProtoReflect.Descriptor instead.
func (*PlacePointStat) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{2}
}

func (x *PlacePointStat) GetStat() map[string]*PointStat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *PlacePointStat) GetMetadata() map[string]*StatMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PlacePointStatAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyed by place DCID.
	StatList []*PlacePointStat `protobuf:"bytes,1,rep,name=stat_list,json=statList,proto3" json:"stat_list,omitempty"`
}

func (x *PlacePointStatAll) Reset() {
	*x = PlacePointStatAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacePointStatAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePointStatAll) ProtoMessage() {}

func (x *PlacePointStatAll) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePointStatAll.ProtoReflect.Descriptor instead.
func (*PlacePointStatAll) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{3}
}

func (x *PlacePointStatAll) GetStatList() []*PlacePointStat {
	if x != nil {
		return x.StatList
	}
	return nil
}

type SourceSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val               map[string]float64 `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MeasurementMethod string             `protobuf:"bytes,2,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	ObservationPeriod string             `protobuf:"bytes,3,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	ImportName        string             `protobuf:"bytes,4,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
	ProvenanceDomain  string             `protobuf:"bytes,5,opt,name=provenance_domain,json=provenanceDomain,proto3" json:"provenance_domain,omitempty"`
	Unit              string             `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	ScalingFactor     string             `protobuf:"bytes,7,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	IsDcAggregate     bool               `protobuf:"varint,8,opt,name=is_dc_aggregate,json=isDcAggregate,proto3" json:"is_dc_aggregate,omitempty"`
	ProvenanceUrl     string             `protobuf:"bytes,9,opt,name=provenance_url,json=provenanceUrl,proto3" json:"provenance_url,omitempty"`
	// Only used for latest date obs collection.
	PlaceToLatestDate map[string]string `protobuf:"bytes,11,rep,name=place_to_latest_date,json=placeToLatestDate,proto3" json:"place_to_latest_date,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceSeries) Reset() {
	*x = SourceSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceSeries) ProtoMessage() {}

func (x *SourceSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceSeries.ProtoReflect.Descriptor instead.
func (*SourceSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{4}
}

func (x *SourceSeries) GetVal() map[string]float64 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *SourceSeries) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *SourceSeries) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *SourceSeries) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *SourceSeries) GetProvenanceDomain() string {
	if x != nil {
		return x.ProvenanceDomain
	}
	return ""
}

func (x *SourceSeries) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SourceSeries) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *SourceSeries) GetIsDcAggregate() bool {
	if x != nil {
		return x.IsDcAggregate
	}
	return false
}

func (x *SourceSeries) GetProvenanceUrl() string {
	if x != nil {
		return x.ProvenanceUrl
	}
	return ""
}

func (x *SourceSeries) GetPlaceToLatestDate() map[string]string {
	if x != nil {
		return x.PlaceToLatestDate
	}
	return nil
}

// Represents a time series from a source.
type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map from date to stat value.
	Val map[string]float64 `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Series metadata.
	Metadata *StatMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{5}
}

func (x *Series) GetVal() map[string]float64 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *Series) GetMetadata() *StatMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SeriesMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A wrapper proto for a map of series.
	Data map[string]*Series `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SeriesMap) Reset() {
	*x = SeriesMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesMap) ProtoMessage() {}

func (x *SeriesMap) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesMap.ProtoReflect.Descriptor instead.
func (*SeriesMap) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{6}
}

func (x *SeriesMap) GetData() map[string]*Series {
	if x != nil {
		return x.Data
	}
	return nil
}

// Represents observation time series data.
type ObsTimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data             map[string]float64 `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // Date to value.
	PlaceName        string             `protobuf:"bytes,3,opt,name=place_name,json=placeName,proto3" json:"place_name,omitempty"`
	PlaceDcid        string             `protobuf:"bytes,5,opt,name=place_dcid,json=placeDcid,proto3" json:"place_dcid,omitempty"` // Only set if the key uses mid.
	SourceSeries     []*SourceSeries    `protobuf:"bytes,6,rep,name=source_series,json=sourceSeries,proto3" json:"source_series,omitempty"`
	ProvenanceDomain string             `protobuf:"bytes,7,opt,name=provenance_domain,json=provenanceDomain,proto3" json:"provenance_domain,omitempty"`
	ProvenanceUrl    string             `protobuf:"bytes,8,opt,name=provenance_url,json=provenanceUrl,proto3" json:"provenance_url,omitempty"`
}

func (x *ObsTimeSeries) Reset() {
	*x = ObsTimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsTimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsTimeSeries) ProtoMessage() {}

func (x *ObsTimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsTimeSeries.ProtoReflect.Descriptor instead.
func (*ObsTimeSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{7}
}

func (x *ObsTimeSeries) GetData() map[string]float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ObsTimeSeries) GetPlaceName() string {
	if x != nil {
		return x.PlaceName
	}
	return ""
}

func (x *ObsTimeSeries) GetPlaceDcid() string {
	if x != nil {
		return x.PlaceDcid
	}
	return ""
}

func (x *ObsTimeSeries) GetSourceSeries() []*SourceSeries {
	if x != nil {
		return x.SourceSeries
	}
	return nil
}

func (x *ObsTimeSeries) GetProvenanceDomain() string {
	if x != nil {
		return x.ProvenanceDomain
	}
	return ""
}

func (x *ObsTimeSeries) GetProvenanceUrl() string {
	if x != nil {
		return x.ProvenanceUrl
	}
	return ""
}

// A collection of observation values for various places with the same parent
// and place type, for given measured property, observation period, stat type,
// observation date, pop type, and an optional list of pop PVs.
type ObsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCohorts []*SourceSeries `protobuf:"bytes,2,rep,name=source_cohorts,json=sourceCohorts,proto3" json:"source_cohorts,omitempty"`
}

func (x *ObsCollection) Reset() {
	*x = ObsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsCollection) ProtoMessage() {}

func (x *ObsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsCollection.ProtoReflect.Descriptor instead.
func (*ObsCollection) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{8}
}

func (x *ObsCollection) GetSourceCohorts() []*SourceSeries {
	if x != nil {
		return x.SourceCohorts
	}
	return nil
}

// Wrapper for observation data.
type ChartStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//	*ChartStore_ObsTimeSeries
	//	*ChartStore_ObsCollection
	Val isChartStore_Val `protobuf_oneof:"val"`
}

func (x *ChartStore) Reset() {
	*x = ChartStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartStore) ProtoMessage() {}

func (x *ChartStore) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartStore.ProtoReflect.Descriptor instead.
func (*ChartStore) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{9}
}

func (m *ChartStore) GetVal() isChartStore_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ChartStore) GetObsTimeSeries() *ObsTimeSeries {
	if x, ok := x.GetVal().(*ChartStore_ObsTimeSeries); ok {
		return x.ObsTimeSeries
	}
	return nil
}

func (x *ChartStore) GetObsCollection() *ObsCollection {
	if x, ok := x.GetVal().(*ChartStore_ObsCollection); ok {
		return x.ObsCollection
	}
	return nil
}

type isChartStore_Val interface {
	isChartStore_Val()
}

type ChartStore_ObsTimeSeries struct {
	ObsTimeSeries *ObsTimeSeries `protobuf:"bytes,1,opt,name=obs_time_series,json=obsTimeSeries,proto3,oneof"`
}

type ChartStore_ObsCollection struct {
	ObsCollection *ObsCollection `protobuf:"bytes,2,opt,name=obs_collection,json=obsCollection,proto3,oneof"`
}

func (*ChartStore_ObsTimeSeries) isChartStore_Val() {}

func (*ChartStore_ObsCollection) isChartStore_Val() {}

// TODO(shifucun): deprecate this and use StatVarSeries when migrating
// /stat/all to v1.
type PlaceStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is stat var dcid.
	StatVarData map[string]*ObsTimeSeries `protobuf:"bytes,3,rep,name=stat_var_data,json=statVarData,proto3" json:"stat_var_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlaceStat) Reset() {
	*x = PlaceStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceStat) ProtoMessage() {}

func (x *PlaceStat) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceStat.ProtoReflect.Descriptor instead.
func (*PlaceStat) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{10}
}

func (x *PlaceStat) GetStatVarData() map[string]*ObsTimeSeries {
	if x != nil {
		return x.StatVarData
	}
	return nil
}

// This is effectively the same proto as PlaceStat with different field name.
// This is used to match the place page cache data.
type StatVarObsSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is stat var dcid.
	Data map[string]*ObsTimeSeries `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatVarObsSeries) Reset() {
	*x = StatVarObsSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarObsSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarObsSeries) ProtoMessage() {}

func (x *StatVarObsSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarObsSeries.ProtoReflect.Descriptor instead.
func (*StatVarObsSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{11}
}

func (x *StatVarObsSeries) GetData() map[string]*ObsTimeSeries {
	if x != nil {
		return x.Data
	}
	return nil
}

// Hold mapping from stat var id to Series struct. This is different from StatVarObsSeries
// that the "Series" is processed time series with metadata while "ObsTimeSeries"
// is the raw series from cache.
type StatVarSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is stat var dcid.
	Data map[string]*Series `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatVarSeries) Reset() {
	*x = StatVarSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSeries) ProtoMessage() {}

func (x *StatVarSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSeries.ProtoReflect.Descriptor instead.
func (*StatVarSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{12}
}

func (x *StatVarSeries) GetData() map[string]*Series {
	if x != nil {
		return x.Data
	}
	return nil
}

// SVOPlace holds basic information about a DC place along with its associated
// StatVarObservations.
//
// NOTE: Equivalent to legacy PopObsPlace.
type SVOPlace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Dcid string `protobuf:"bytes,3,opt,name=dcid,proto3" json:"dcid,omitempty"`
	// All StatVarObservations associated with the place.
	Observations []*SVOObservation `protobuf:"bytes,4,rep,name=observations,proto3" json:"observations,omitempty"`
	ProvenanceId string            `protobuf:"bytes,5,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	Temp         *SVOPlace_Temp    `protobuf:"bytes,6,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *SVOPlace) Reset() {
	*x = SVOPlace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVOPlace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVOPlace) ProtoMessage() {}

func (x *SVOPlace) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVOPlace.ProtoReflect.Descriptor instead.
func (*SVOPlace) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{13}
}

func (x *SVOPlace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SVOPlace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SVOPlace) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *SVOPlace) GetObservations() []*SVOObservation {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *SVOPlace) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (x *SVOPlace) GetTemp() *SVOPlace_Temp {
	if x != nil {
		return x.Temp
	}
	return nil
}

// Stores a StatVarObservation node.
//
// NOTE: Equivalent to legacy PopObsObservation.
type SVOObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dcid              string `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
	ObservationDate   string `protobuf:"bytes,2,opt,name=observation_date,json=observationDate,proto3" json:"observation_date,omitempty"`
	ObservationPeriod string `protobuf:"bytes,3,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	MeasurementMethod string `protobuf:"bytes,4,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	Unit              string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	ScalingFactor     string `protobuf:"bytes,6,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	ProvenanceId      string `protobuf:"bytes,7,opt,name=provenance_id,json=provenanceId,proto3" json:"provenance_id,omitempty"`
	// Types that are assignable to Val:
	//	*SVOObservation_StrValue
	//	*SVOObservation_DblValue
	Val  isSVOObservation_Val `protobuf_oneof:"val"`
	Temp *SVOObservation_Temp `protobuf:"bytes,10,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *SVOObservation) Reset() {
	*x = SVOObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVOObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVOObservation) ProtoMessage() {}

func (x *SVOObservation) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVOObservation.ProtoReflect.Descriptor instead.
func (*SVOObservation) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{14}
}

func (x *SVOObservation) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *SVOObservation) GetObservationDate() string {
	if x != nil {
		return x.ObservationDate
	}
	return ""
}

func (x *SVOObservation) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *SVOObservation) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *SVOObservation) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SVOObservation) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *SVOObservation) GetProvenanceId() string {
	if x != nil {
		return x.ProvenanceId
	}
	return ""
}

func (m *SVOObservation) GetVal() isSVOObservation_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *SVOObservation) GetStrValue() string {
	if x, ok := x.GetVal().(*SVOObservation_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (x *SVOObservation) GetDblValue() float64 {
	if x, ok := x.GetVal().(*SVOObservation_DblValue); ok {
		return x.DblValue
	}
	return 0
}

func (x *SVOObservation) GetTemp() *SVOObservation_Temp {
	if x != nil {
		return x.Temp
	}
	return nil
}

type isSVOObservation_Val interface {
	isSVOObservation_Val()
}

type SVOObservation_StrValue struct {
	// Represents value for statType == "measurementResult"
	StrValue string `protobuf:"bytes,8,opt,name=str_value,json=strValue,proto3,oneof"`
}

type SVOObservation_DblValue struct {
	// Represents value for statType != "measurementResult"
	DblValue float64 `protobuf:"fixed64,9,opt,name=dbl_value,json=dblValue,proto3,oneof"`
}

func (*SVOObservation_StrValue) isSVOObservation_Val() {}

func (*SVOObservation_DblValue) isSVOObservation_Val() {}

// SVOCollection holds information for multiple SVOPlace instances.
type SVOCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Places []*SVOPlace `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
}

func (x *SVOCollection) Reset() {
	*x = SVOCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVOCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVOCollection) ProtoMessage() {}

func (x *SVOCollection) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVOCollection.ProtoReflect.Descriptor instead.
func (*SVOCollection) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{15}
}

func (x *SVOCollection) GetPlaces() []*SVOPlace {
	if x != nil {
		return x.Places
	}
	return nil
}

// Request message for GetStats.
type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of the place.
	Place []string `protobuf:"bytes,1,rep,name=place,proto3" json:"place,omitempty"`
	// The dcid of the StatisticalVariable.
	StatsVar string `protobuf:"bytes,2,opt,name=stats_var,json=statsVar,proto3" json:"stats_var,omitempty"`
	// (Optional) The measurement method of the observation. If not specified,
	// stats series with any measurement methods could be returned.
	MeasurementMethod string `protobuf:"bytes,4,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (Optional) The unit of the observation. If not specified, stats series with
	// any unit could be returned.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// (Optional) The observation period of the observation. If not specified,
	// stats series with any observation period could be returned.
	ObservationPeriod string `protobuf:"bytes,6,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{16}
}

func (x *GetStatsRequest) GetPlace() []string {
	if x != nil {
		return x.Place
	}
	return nil
}

func (x *GetStatsRequest) GetStatsVar() string {
	if x != nil {
		return x.StatsVar
	}
	return ""
}

func (x *GetStatsRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetStatsRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetStatsRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

// Response of GetStats
type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{17}
}

func (x *GetStatsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request for GetStatSetSeries API.
// TODO(shifucun): Deprecate GetStats() once all clients are switched to use
// this API.
// Request message for GetStatSetSeries.
type GetStatSetSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of the place.
	Places []string `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
	// The dcids of the statistical variables.
	StatVars []string `protobuf:"bytes,2,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
	// (Optional) Import name of the desired series.
	// TODO(shifucun): consider add other SVObs properties for filtering.
	ImportName string `protobuf:"bytes,3,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
}

func (x *GetStatSetSeriesRequest) Reset() {
	*x = GetStatSetSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetSeriesRequest) ProtoMessage() {}

func (x *GetStatSetSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetSeriesRequest.ProtoReflect.Descriptor instead.
func (*GetStatSetSeriesRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{18}
}

func (x *GetStatSetSeriesRequest) GetPlaces() []string {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *GetStatSetSeriesRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

func (x *GetStatSetSeriesRequest) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

// Response of GetStatSetSeries
type GetStatSetSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from place dcid to series map.
	Data map[string]*SeriesMap `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatSetSeriesResponse) Reset() {
	*x = GetStatSetSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetSeriesResponse) ProtoMessage() {}

func (x *GetStatSetSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetSeriesResponse.ProtoReflect.Descriptor instead.
func (*GetStatSetSeriesResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{19}
}

func (x *GetStatSetSeriesResponse) GetData() map[string]*SeriesMap {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for GetStat service.
type GetStatValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dcid of the place.
	Place string `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	// dcid of the stat var.
	StatVar string `protobuf:"bytes,2,opt,name=stat_var,json=statVar,proto3" json:"stat_var,omitempty"`
	// (optional) date of the stat. The latest date will be used if unspecified.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// (optional) measurement method of the observation, ex: "CensusACS5yrSurvey".
	MeasurementMethod string `protobuf:"bytes,4,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (optional) observation period of the observation, ex: "P1Y".
	ObservationPeriod string `protobuf:"bytes,5,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// (optional) unit of the observation.
	Unit string `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	// (optional) scaling factor of the observation.
	ScalingFactor string `protobuf:"bytes,7,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
}

func (x *GetStatValueRequest) Reset() {
	*x = GetStatValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatValueRequest) ProtoMessage() {}

func (x *GetStatValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatValueRequest.ProtoReflect.Descriptor instead.
func (*GetStatValueRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatValueRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *GetStatValueRequest) GetStatVar() string {
	if x != nil {
		return x.StatVar
	}
	return ""
}

func (x *GetStatValueRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetStatValueRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetStatValueRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *GetStatValueRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetStatValueRequest) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

type GetStatValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetStatValueResponse) Reset() {
	*x = GetStatValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatValueResponse) ProtoMessage() {}

func (x *GetStatValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatValueResponse.ProtoReflect.Descriptor instead.
func (*GetStatValueResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{21}
}

func (x *GetStatValueResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Request for GetStatSeries service.
type GetStatSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dcid of the place.
	Place string `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	// dcid of the stat var.
	StatVar string `protobuf:"bytes,2,opt,name=stat_var,json=statVar,proto3" json:"stat_var,omitempty"`
	// (optional) measurement method of the observation, ex: "CensusACS5yrSurvey".
	MeasurementMethod string `protobuf:"bytes,3,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (optional) observation period of the observation, ex: "P1Y".
	ObservationPeriod string `protobuf:"bytes,4,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// (optional) unit of the observation.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// (optional) scaling factor of the observation.
	ScalingFactor string `protobuf:"bytes,6,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
}

func (x *GetStatSeriesRequest) Reset() {
	*x = GetStatSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSeriesRequest) ProtoMessage() {}

func (x *GetStatSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSeriesRequest.ProtoReflect.Descriptor instead.
func (*GetStatSeriesRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{22}
}

func (x *GetStatSeriesRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *GetStatSeriesRequest) GetStatVar() string {
	if x != nil {
		return x.StatVar
	}
	return ""
}

func (x *GetStatSeriesRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetStatSeriesRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *GetStatSeriesRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetStatSeriesRequest) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

// Response for GetStatSeries service.
type GetStatSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from ISO date to stat value.
	Series map[string]float64 `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *GetStatSeriesResponse) Reset() {
	*x = GetStatSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSeriesResponse) ProtoMessage() {}

func (x *GetStatSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSeriesResponse.ProtoReflect.Descriptor instead.
func (*GetStatSeriesResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{23}
}

func (x *GetStatSeriesResponse) GetSeries() map[string]float64 {
	if x != nil {
		return x.Series
	}
	return nil
}

// Request for GetStatAll service.
type GetStatAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dcids of the place.
	Places []string `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
	// dcids of the stat var.
	StatVars []string `protobuf:"bytes,2,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
}

func (x *GetStatAllRequest) Reset() {
	*x = GetStatAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatAllRequest) ProtoMessage() {}

func (x *GetStatAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatAllRequest.ProtoReflect.Descriptor instead.
func (*GetStatAllRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{24}
}

func (x *GetStatAllRequest) GetPlaces() []string {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *GetStatAllRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

// Response for GetStatAll service.
//
// The response is a two level map, with the first level keyed by place dcid,
// and the second level keyed by the stat var dcid.
// Each leaf object contains multiple source series with <date, value> object
// and observation metadata.
//
// The response is transcoded by esp:
// https://cloud.google.com/endpoints/docs/grpc/grpc-service-config Example
// response after esp transcoding is like below.
// {
//   placeData: {
//     "geoId/01": {
//       statVarData: {
//         "statvar1": {
//           "placeName": "City of Mountain View",
//           "sourceSeries": [
//             {
//               "val": {
//                 "2008": 2116,
//                 "2009": 2155,
//                 "2010": 1633,
//                 "2011": 1509,
//                 "2012": 1581,
//                 "2013": 1867,
//                 "2014": 1770,
//                 "2015": 2201,
//                 "2016": 1913,
//                 "2017": 2138
//               },
//               "observationPeriod": "P1Y",
//               "importName": "FBIGovCrime",
//               "provenanceDomain": "fbi.gov"
//             }
//           ]
//         },
//       }
//     },
//     "geoId/02": {
//       statVarData: {
//         "statvar3": {...},
//       }
//     }
//   }
// }
type GetStatAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceData map[string]*PlaceStat `protobuf:"bytes,1,rep,name=place_data,json=placeData,proto3" json:"place_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatAllResponse) Reset() {
	*x = GetStatAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatAllResponse) ProtoMessage() {}

func (x *GetStatAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatAllResponse.ProtoReflect.Descriptor instead.
func (*GetStatAllResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{25}
}

func (x *GetStatAllResponse) GetPlaceData() map[string]*PlaceStat {
	if x != nil {
		return x.PlaceData
	}
	return nil
}

type GetStatSetWithinPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent place dcid.
	ParentPlace string `protobuf:"bytes,1,opt,name=parent_place,json=parentPlace,proto3" json:"parent_place,omitempty"`
	// Child place type.
	ChildType string `protobuf:"bytes,2,opt,name=child_type,json=childType,proto3" json:"child_type,omitempty"`
	// Dcid of the stat var.
	StatVars []string `protobuf:"bytes,3,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
	// [Optional] Date for the stat in ISO format.
	// If the date is not given, then the latest observation for each place is
	// returned, where they could be from different sources.
	Date string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetStatSetWithinPlaceRequest) Reset() {
	*x = GetStatSetWithinPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetWithinPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetWithinPlaceRequest) ProtoMessage() {}

func (x *GetStatSetWithinPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetWithinPlaceRequest.ProtoReflect.Descriptor instead.
func (*GetStatSetWithinPlaceRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{26}
}

func (x *GetStatSetWithinPlaceRequest) GetParentPlace() string {
	if x != nil {
		return x.ParentPlace
	}
	return ""
}

func (x *GetStatSetWithinPlaceRequest) GetChildType() string {
	if x != nil {
		return x.ChildType
	}
	return ""
}

func (x *GetStatSetWithinPlaceRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

func (x *GetStatSetWithinPlaceRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetStatSetSeriesWithinPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent place dcid.
	ParentPlace string `protobuf:"bytes,1,opt,name=parent_place,json=parentPlace,proto3" json:"parent_place,omitempty"`
	// Child place type.
	ChildType string `protobuf:"bytes,2,opt,name=child_type,json=childType,proto3" json:"child_type,omitempty"`
	// Stat Var dcids.
	StatVars []string `protobuf:"bytes,3,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
}

func (x *GetStatSetSeriesWithinPlaceRequest) Reset() {
	*x = GetStatSetSeriesWithinPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetSeriesWithinPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetSeriesWithinPlaceRequest) ProtoMessage() {}

func (x *GetStatSetSeriesWithinPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetSeriesWithinPlaceRequest.ProtoReflect.Descriptor instead.
func (*GetStatSetSeriesWithinPlaceRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{27}
}

func (x *GetStatSetSeriesWithinPlaceRequest) GetParentPlace() string {
	if x != nil {
		return x.ParentPlace
	}
	return ""
}

func (x *GetStatSetSeriesWithinPlaceRequest) GetChildType() string {
	if x != nil {
		return x.ChildType
	}
	return ""
}

func (x *GetStatSetSeriesWithinPlaceRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

type GetStatSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of place DCIDs.
	Places []string `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
	// A list of statistical variable DCIDs.
	StatVars []string `protobuf:"bytes,2,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
	// (Optional) date of the stat.
	// If not sepcified, the latest stat of a chosen source will be returned.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetStatSetRequest) Reset() {
	*x = GetStatSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetRequest) ProtoMessage() {}

func (x *GetStatSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetRequest.ProtoReflect.Descriptor instead.
func (*GetStatSetRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{28}
}

func (x *GetStatSetRequest) GetPlaces() []string {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *GetStatSetRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

func (x *GetStatSetRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetStatSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyed by statVar.
	Data map[string]*PlacePointStat `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatSetResponse) Reset() {
	*x = GetStatSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetResponse) ProtoMessage() {}

func (x *GetStatSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetResponse.ProtoReflect.Descriptor instead.
func (*GetStatSetResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{29}
}

func (x *GetStatSetResponse) GetData() map[string]*PlacePointStat {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetStatSetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyed by statVar.
	Data map[string]*PlacePointStatAll `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatSetAllResponse) Reset() {
	*x = GetStatSetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSetAllResponse) ProtoMessage() {}

func (x *GetStatSetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSetAllResponse.ProtoReflect.Descriptor instead.
func (*GetStatSetAllResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{30}
}

func (x *GetStatSetAllResponse) GetData() map[string]*PlacePointStatAll {
	if x != nil {
		return x.Data
	}
	return nil
}

// Requests to get observation for all place.
type GetPlaceObsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the place.
	PlaceType string `protobuf:"bytes,1,opt,name=place_type,json=placeType,proto3" json:"place_type,omitempty"`
	// The stat var dcid.
	StatVar string `protobuf:"bytes,2,opt,name=stat_var,json=statVar,proto3" json:"stat_var,omitempty"`
	// Observation date.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetPlaceObsRequest) Reset() {
	*x = GetPlaceObsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaceObsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaceObsRequest) ProtoMessage() {}

func (x *GetPlaceObsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaceObsRequest.ProtoReflect.Descriptor instead.
func (*GetPlaceObsRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{31}
}

func (x *GetPlaceObsRequest) GetPlaceType() string {
	if x != nil {
		return x.PlaceType
	}
	return ""
}

func (x *GetPlaceObsRequest) GetStatVar() string {
	if x != nil {
		return x.StatVar
	}
	return ""
}

func (x *GetPlaceObsRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Not persisted in cache.
type SVOPlace_Temp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildPlaces []string `protobuf:"bytes,2,rep,name=child_places,json=childPlaces,proto3" json:"child_places,omitempty"`
	Mids        []string `protobuf:"bytes,3,rep,name=mids,proto3" json:"mids,omitempty"`
}

func (x *SVOPlace_Temp) Reset() {
	*x = SVOPlace_Temp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVOPlace_Temp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVOPlace_Temp) ProtoMessage() {}

func (x *SVOPlace_Temp) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVOPlace_Temp.ProtoReflect.Descriptor instead.
func (*SVOPlace_Temp) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SVOPlace_Temp) GetChildPlaces() []string {
	if x != nil {
		return x.ChildPlaces
	}
	return nil
}

func (x *SVOPlace_Temp) GetMids() []string {
	if x != nil {
		return x.Mids
	}
	return nil
}

// Not persisted in cache.
type SVOObservation_Temp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservationAbout string `protobuf:"bytes,1,opt,name=observation_about,json=observationAbout,proto3" json:"observation_about,omitempty"`
	VariableMeasured string `protobuf:"bytes,2,opt,name=variable_measured,json=variableMeasured,proto3" json:"variable_measured,omitempty"`
	ImportName       string `protobuf:"bytes,3,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
}

func (x *SVOObservation_Temp) Reset() {
	*x = SVOObservation_Temp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVOObservation_Temp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVOObservation_Temp) ProtoMessage() {}

func (x *SVOObservation_Temp) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVOObservation_Temp.ProtoReflect.Descriptor instead.
func (*SVOObservation_Temp) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SVOObservation_Temp) GetObservationAbout() string {
	if x != nil {
		return x.ObservationAbout
	}
	return ""
}

func (x *SVOObservation_Temp) GetVariableMeasured() string {
	if x != nil {
		return x.VariableMeasured
	}
	return ""
}

func (x *SVOObservation_Temp) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

var File_stat_proto protoreflect.FileDescriptor

var file_stat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x09,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x22, 0xbb, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x04, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44,
	0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x61, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x35, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a,
	0x09, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4,
	0x02, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x44, 0x63, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0x37, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x62, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x6f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x0e, 0x6f, 0x62, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa4, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x62, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x62, 0x73, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x53, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa1, 0x02, 0x0a, 0x08, 0x53, 0x56, 0x4f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x56, 0x4f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x56, 0x4f,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x1a, 0x43, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x64, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8c, 0x04, 0x0a, 0x0e, 0x53, 0x56, 0x4f, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x62, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x64, 0x62, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x56, 0x4f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x1a, 0x81, 0x01, 0x0a, 0x04, 0x54, 0x65,
	0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0x3e, 0x0a, 0x0d, 0x53, 0x56, 0x4f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x56, 0x4f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x2c, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6f, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4f,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x57, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stat_proto_rawDescOnce sync.Once
	file_stat_proto_rawDescData = file_stat_proto_rawDesc
)

func file_stat_proto_rawDescGZIP() []byte {
	file_stat_proto_rawDescOnce.Do(func() {
		file_stat_proto_rawDescData = protoimpl.X.CompressGZIP(file_stat_proto_rawDescData)
	})
	return file_stat_proto_rawDescData
}

var file_stat_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_stat_proto_goTypes = []interface{}{
	(*StatMetadata)(nil),                       // 0: datacommons.StatMetadata
	(*PointStat)(nil),                          // 1: datacommons.PointStat
	(*PlacePointStat)(nil),                     // 2: datacommons.PlacePointStat
	(*PlacePointStatAll)(nil),                  // 3: datacommons.PlacePointStatAll
	(*SourceSeries)(nil),                       // 4: datacommons.SourceSeries
	(*Series)(nil),                             // 5: datacommons.Series
	(*SeriesMap)(nil),                          // 6: datacommons.SeriesMap
	(*ObsTimeSeries)(nil),                      // 7: datacommons.ObsTimeSeries
	(*ObsCollection)(nil),                      // 8: datacommons.ObsCollection
	(*ChartStore)(nil),                         // 9: datacommons.ChartStore
	(*PlaceStat)(nil),                          // 10: datacommons.PlaceStat
	(*StatVarObsSeries)(nil),                   // 11: datacommons.StatVarObsSeries
	(*StatVarSeries)(nil),                      // 12: datacommons.StatVarSeries
	(*SVOPlace)(nil),                           // 13: datacommons.SVOPlace
	(*SVOObservation)(nil),                     // 14: datacommons.SVOObservation
	(*SVOCollection)(nil),                      // 15: datacommons.SVOCollection
	(*GetStatsRequest)(nil),                    // 16: datacommons.GetStatsRequest
	(*GetStatsResponse)(nil),                   // 17: datacommons.GetStatsResponse
	(*GetStatSetSeriesRequest)(nil),            // 18: datacommons.GetStatSetSeriesRequest
	(*GetStatSetSeriesResponse)(nil),           // 19: datacommons.GetStatSetSeriesResponse
	(*GetStatValueRequest)(nil),                // 20: datacommons.GetStatValueRequest
	(*GetStatValueResponse)(nil),               // 21: datacommons.GetStatValueResponse
	(*GetStatSeriesRequest)(nil),               // 22: datacommons.GetStatSeriesRequest
	(*GetStatSeriesResponse)(nil),              // 23: datacommons.GetStatSeriesResponse
	(*GetStatAllRequest)(nil),                  // 24: datacommons.GetStatAllRequest
	(*GetStatAllResponse)(nil),                 // 25: datacommons.GetStatAllResponse
	(*GetStatSetWithinPlaceRequest)(nil),       // 26: datacommons.GetStatSetWithinPlaceRequest
	(*GetStatSetSeriesWithinPlaceRequest)(nil), // 27: datacommons.GetStatSetSeriesWithinPlaceRequest
	(*GetStatSetRequest)(nil),                  // 28: datacommons.GetStatSetRequest
	(*GetStatSetResponse)(nil),                 // 29: datacommons.GetStatSetResponse
	(*GetStatSetAllResponse)(nil),              // 30: datacommons.GetStatSetAllResponse
	(*GetPlaceObsRequest)(nil),                 // 31: datacommons.GetPlaceObsRequest
	nil,                                        // 32: datacommons.PlacePointStat.StatEntry
	nil,                                        // 33: datacommons.PlacePointStat.MetadataEntry
	nil,                                        // 34: datacommons.SourceSeries.ValEntry
	nil,                                        // 35: datacommons.SourceSeries.PlaceToLatestDateEntry
	nil,                                        // 36: datacommons.Series.ValEntry
	nil,                                        // 37: datacommons.SeriesMap.DataEntry
	nil,                                        // 38: datacommons.ObsTimeSeries.DataEntry
	nil,                                        // 39: datacommons.PlaceStat.StatVarDataEntry
	nil,                                        // 40: datacommons.StatVarObsSeries.DataEntry
	nil,                                        // 41: datacommons.StatVarSeries.DataEntry
	(*SVOPlace_Temp)(nil),                      // 42: datacommons.SVOPlace.Temp
	(*SVOObservation_Temp)(nil),                // 43: datacommons.SVOObservation.Temp
	nil,                                        // 44: datacommons.GetStatSetSeriesResponse.DataEntry
	nil,                                        // 45: datacommons.GetStatSeriesResponse.SeriesEntry
	nil,                                        // 46: datacommons.GetStatAllResponse.PlaceDataEntry
	nil,                                        // 47: datacommons.GetStatSetResponse.DataEntry
	nil,                                        // 48: datacommons.GetStatSetAllResponse.DataEntry
}
var file_stat_proto_depIdxs = []int32{
	0,  // 0: datacommons.PointStat.metadata:type_name -> datacommons.StatMetadata
	32, // 1: datacommons.PlacePointStat.stat:type_name -> datacommons.PlacePointStat.StatEntry
	33, // 2: datacommons.PlacePointStat.metadata:type_name -> datacommons.PlacePointStat.MetadataEntry
	2,  // 3: datacommons.PlacePointStatAll.stat_list:type_name -> datacommons.PlacePointStat
	34, // 4: datacommons.SourceSeries.val:type_name -> datacommons.SourceSeries.ValEntry
	35, // 5: datacommons.SourceSeries.place_to_latest_date:type_name -> datacommons.SourceSeries.PlaceToLatestDateEntry
	36, // 6: datacommons.Series.val:type_name -> datacommons.Series.ValEntry
	0,  // 7: datacommons.Series.metadata:type_name -> datacommons.StatMetadata
	37, // 8: datacommons.SeriesMap.data:type_name -> datacommons.SeriesMap.DataEntry
	38, // 9: datacommons.ObsTimeSeries.data:type_name -> datacommons.ObsTimeSeries.DataEntry
	4,  // 10: datacommons.ObsTimeSeries.source_series:type_name -> datacommons.SourceSeries
	4,  // 11: datacommons.ObsCollection.source_cohorts:type_name -> datacommons.SourceSeries
	7,  // 12: datacommons.ChartStore.obs_time_series:type_name -> datacommons.ObsTimeSeries
	8,  // 13: datacommons.ChartStore.obs_collection:type_name -> datacommons.ObsCollection
	39, // 14: datacommons.PlaceStat.stat_var_data:type_name -> datacommons.PlaceStat.StatVarDataEntry
	40, // 15: datacommons.StatVarObsSeries.data:type_name -> datacommons.StatVarObsSeries.DataEntry
	41, // 16: datacommons.StatVarSeries.data:type_name -> datacommons.StatVarSeries.DataEntry
	14, // 17: datacommons.SVOPlace.observations:type_name -> datacommons.SVOObservation
	42, // 18: datacommons.SVOPlace.temp:type_name -> datacommons.SVOPlace.Temp
	43, // 19: datacommons.SVOObservation.temp:type_name -> datacommons.SVOObservation.Temp
	13, // 20: datacommons.SVOCollection.places:type_name -> datacommons.SVOPlace
	44, // 21: datacommons.GetStatSetSeriesResponse.data:type_name -> datacommons.GetStatSetSeriesResponse.DataEntry
	45, // 22: datacommons.GetStatSeriesResponse.series:type_name -> datacommons.GetStatSeriesResponse.SeriesEntry
	46, // 23: datacommons.GetStatAllResponse.place_data:type_name -> datacommons.GetStatAllResponse.PlaceDataEntry
	47, // 24: datacommons.GetStatSetResponse.data:type_name -> datacommons.GetStatSetResponse.DataEntry
	48, // 25: datacommons.GetStatSetAllResponse.data:type_name -> datacommons.GetStatSetAllResponse.DataEntry
	1,  // 26: datacommons.PlacePointStat.StatEntry.value:type_name -> datacommons.PointStat
	0,  // 27: datacommons.PlacePointStat.MetadataEntry.value:type_name -> datacommons.StatMetadata
	5,  // 28: datacommons.SeriesMap.DataEntry.value:type_name -> datacommons.Series
	7,  // 29: datacommons.PlaceStat.StatVarDataEntry.value:type_name -> datacommons.ObsTimeSeries
	7,  // 30: datacommons.StatVarObsSeries.DataEntry.value:type_name -> datacommons.ObsTimeSeries
	5,  // 31: datacommons.StatVarSeries.DataEntry.value:type_name -> datacommons.Series
	6,  // 32: datacommons.GetStatSetSeriesResponse.DataEntry.value:type_name -> datacommons.SeriesMap
	10, // 33: datacommons.GetStatAllResponse.PlaceDataEntry.value:type_name -> datacommons.PlaceStat
	2,  // 34: datacommons.GetStatSetResponse.DataEntry.value:type_name -> datacommons.PlacePointStat
	3,  // 35: datacommons.GetStatSetAllResponse.DataEntry.value:type_name -> datacommons.PlacePointStatAll
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_stat_proto_init() }
func file_stat_proto_init() {
	if File_stat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacePointStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacePointStatAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsTimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarObsSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVOPlace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVOObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVOCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetWithinPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetSeriesWithinPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaceObsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVOPlace_Temp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVOObservation_Temp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stat_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ChartStore_ObsTimeSeries)(nil),
		(*ChartStore_ObsCollection)(nil),
	}
	file_stat_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SVOObservation_StrValue)(nil),
		(*SVOObservation_DblValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stat_proto_goTypes,
		DependencyIndexes: file_stat_proto_depIdxs,
		MessageInfos:      file_stat_proto_msgTypes,
	}.Build()
	File_stat_proto = out.File
	file_stat_proto_rawDesc = nil
	file_stat_proto_goTypes = nil
	file_stat_proto_depIdxs = nil
}

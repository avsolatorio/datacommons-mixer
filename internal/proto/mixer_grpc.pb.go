// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: mixer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MixerClient is the client API for Mixer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MixerClient interface {
	// Query DataCommons Graph with Sparql.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Fetch property labels adjacent of nodes
	GetPropertyLabels(ctx context.Context, in *GetPropertyLabelsRequest, opts ...grpc.CallOption) (*PayloadResponse, error)
	// Fetch nodes that linked to source nodes with a given property.
	GetPropertyValues(ctx context.Context, in *GetPropertyValuesRequest, opts ...grpc.CallOption) (*PayloadResponse, error)
	// Fetch triples that have the given nodes as subject or object.
	GetTriples(ctx context.Context, in *GetTriplesRequest, opts ...grpc.CallOption) (*PayloadResponse, error)
	// Get places contained in parent places.
	GetPlacesIn(ctx context.Context, in *GetPlacesInRequest, opts ...grpc.CallOption) (*GetPlacesInResponse, error)
	// Get stats of places by StatisticalVariable. If multiple time series data
	// are avaialable, the highest ranked one by measurement method and import
	// will be returned.
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// Get stat of a set of places and statistical variables.
	//
	// If multiple time series data are avaialable, the highest ranked one by
	// measurement method, scaling factor and import will be returned.
	// This is a newer version of GetStats() that takes multiple stat vars and
	// returns protobuf field instead of "payload" of json string.
	GetStatSetSeries(ctx context.Context, in *GetStatSetSeriesRequest, opts ...grpc.CallOption) (*GetStatSetSeriesResponse, error)
	// Get a single stat value given a place, a statistical variable and a date.
	// If no date is given, the latest statistical variable will be returned.
	GetStatValue(ctx context.Context, in *GetStatValueRequest, opts ...grpc.CallOption) (*GetStatValueResponse, error)
	// Get a series of stat value with dates, given the place and statistical
	// variable.
	GetStatSeries(ctx context.Context, in *GetStatSeriesRequest, opts ...grpc.CallOption) (*GetStatSeriesResponse, error)
	// Get all stat series given a list of places and a list of statistical
	// variables.
	GetStatAll(ctx context.Context, in *GetStatAllRequest, opts ...grpc.CallOption) (*GetStatAllResponse, error)
	// Get the stat value for children places of certain place type at a given
	// date.
	GetStatSetWithinPlace(ctx context.Context, in *GetStatSetWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatSetResponse, error)
	// Get the stat value from all sources for children places of certain place
	// type. If date is not specified, the latest value of every source is
	// returned.
	GetStatSetWithinPlaceAll(ctx context.Context, in *GetStatSetWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatSetAllResponse, error)
	// Get the stat value for given places and stat vars. If date is not given,
	// then the latest value for each <place, stat var> is returned.
	GetStatSet(ctx context.Context, in *GetStatSetRequest, opts ...grpc.CallOption) (*GetStatSetResponse, error)
	// Get the stat series for given parent places and child place type.
	GetStatSetSeriesWithinPlace(ctx context.Context, in *GetStatSetSeriesWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatSetSeriesResponse, error)
	// Get rankings for given stat var DCIDs.
	GetLocationsRankings(ctx context.Context, in *GetLocationsRankingsRequest, opts ...grpc.CallOption) (*GetLocationsRankingsResponse, error)
	// Get related locations for given stat var DCIDs.
	GetRelatedLocations(ctx context.Context, in *GetRelatedLocationsRequest, opts ...grpc.CallOption) (*GetRelatedLocationsResponse, error)
	// Get place page info for a place.
	GetPlacePageData(ctx context.Context, in *GetPlacePageDataRequest, opts ...grpc.CallOption) (*GetPlacePageDataResponse, error)
	// Get bio page data given a dcid.
	GetBioPageData(ctx context.Context, in *GetBioPageDataRequest, opts ...grpc.CallOption) (*GraphNodes, error)
	// Translate Sparql Query into translation results.
	Translate(ctx context.Context, in *TranslateRequest, opts ...grpc.CallOption) (*TranslateResponse, error)
	// Given a text search query, return all entities matching the query.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Retrieves the version metadata.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Give a list of place dcids, return all the statistical variables for each
	// place.
	GetPlaceStatsVar(ctx context.Context, in *GetPlaceStatsVarRequest, opts ...grpc.CallOption) (*GetPlaceStatsVarResponse, error)
	// Give a list of place dcids, return all the statistical variables for each
	// place.
	// TODO(shifucun): Deprecate GetPlaceStatsVar when all internal clients are
	// migrated.
	GetPlaceStatVars(ctx context.Context, in *GetPlaceStatVarsRequest, opts ...grpc.CallOption) (*GetPlaceStatVarsResponse, error)
	// Give a list of place dcids, return metadata for each place.
	GetPlaceMetadata(ctx context.Context, in *GetPlaceMetadataRequest, opts ...grpc.CallOption) (*GetPlaceMetadataResponse, error)
	// Given a list of place dcids, returns the union of available
	// statistical variables for the places.
	GetPlaceStatVarsUnionV1(ctx context.Context, in *GetPlaceStatVarsUnionRequest, opts ...grpc.CallOption) (*GetPlaceStatVarsUnionResponse, error)
	// Given ancestor place, child place type and stat vars, return the dates that
	// have data for each stat var across all child places.
	// [!! Deprecated] in favor of GetStatDateWithinPlace
	GetPlaceStatDateWithinPlace(ctx context.Context, in *GetPlaceStatDateWithinPlaceRequest, opts ...grpc.CallOption) (*GetPlaceStatDateWithinPlaceResponse, error)
	// Given ancestor place, child place type and stat vars, return the dates and
	// place count for each source
	GetStatDateWithinPlace(ctx context.Context, in *GetStatDateWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatDateWithinPlaceResponse, error)
	// Given a place, get the statvar group for stat vars that have data for it.
	GetStatVarGroup(ctx context.Context, in *GetStatVarGroupRequest, opts ...grpc.CallOption) (*StatVarGroups, error)
	// Get the stat var group node info. The children stat var and stat var group
	// should have data for at least one of the give places.
	GetStatVarGroupNode(ctx context.Context, in *GetStatVarGroupNodeRequest, opts ...grpc.CallOption) (*StatVarGroupNode, error)
	// Get the path from a stat var or a stat var group path to the root
	// of stat var hierarchy
	GetStatVarPath(ctx context.Context, in *GetStatVarPathRequest, opts ...grpc.CallOption) (*GetStatVarPathResponse, error)
	// Search stat var and stat var groups.
	SearchStatVar(ctx context.Context, in *SearchStatVarRequest, opts ...grpc.CallOption) (*SearchStatVarResponse, error)
	// Given a list of stat vars, get their summaries.
	GetStatVarSummary(ctx context.Context, in *GetStatVarSummaryRequest, opts ...grpc.CallOption) (*GetStatVarSummaryResponse, error)
	// Find matched stat vars given constraint properties
	GetStatVarMatch(ctx context.Context, in *GetStatVarMatchRequest, opts ...grpc.CallOption) (*GetStatVarMatchResponse, error)
	// ======================  V1   V1   V1   V1  ======================
	Properties(ctx context.Context, in *PropertiesRequest, opts ...grpc.CallOption) (*PropertiesResponse, error)
	BulkProperties(ctx context.Context, in *BulkPropertiesRequest, opts ...grpc.CallOption) (*BulkPropertiesResponse, error)
	PropertyValues(ctx context.Context, in *PropertyValuesRequest, opts ...grpc.CallOption) (*PropertyValuesResponse, error)
	LinkedPropertyValues(ctx context.Context, in *LinkedPropertyValuesRequest, opts ...grpc.CallOption) (*LinkedPropertyValuesResponse, error)
	BulkPropertyValues(ctx context.Context, in *BulkPropertyValuesRequest, opts ...grpc.CallOption) (*BulkPropertyValuesResponse, error)
	Triples(ctx context.Context, in *TriplesRequest, opts ...grpc.CallOption) (*TriplesResponse, error)
	BulkTriples(ctx context.Context, in *BulkTriplesRequest, opts ...grpc.CallOption) (*BulkTriplesResponse, error)
	Variables(ctx context.Context, in *VariablesRequest, opts ...grpc.CallOption) (*VariablesResponse, error)
	BulkVariables(ctx context.Context, in *BulkVariablesRequest, opts ...grpc.CallOption) (*BulkVariablesResponse, error)
	PlaceInfo(ctx context.Context, in *PlaceInfoRequest, opts ...grpc.CallOption) (*PlaceInfoResponse, error)
	BulkPlaceInfo(ctx context.Context, in *BulkPlaceInfoRequest, opts ...grpc.CallOption) (*BulkPlaceInfoResponse, error)
	VariableInfo(ctx context.Context, in *VariableInfoRequest, opts ...grpc.CallOption) (*VariableInfoResponse, error)
	BulkVariableInfo(ctx context.Context, in *BulkVariableInfoRequest, opts ...grpc.CallOption) (*BulkVariableInfoResponse, error)
	ObservationsPoint(ctx context.Context, in *ObservationsPointRequest, opts ...grpc.CallOption) (*PointStat, error)
	BulkObservationsPoint(ctx context.Context, in *BulkObservationsPointRequest, opts ...grpc.CallOption) (*BulkObservationsPointResponse, error)
	BulkObservationsPointLinked(ctx context.Context, in *BulkObservationsPointLinkedRequest, opts ...grpc.CallOption) (*BulkObservationsPointResponse, error)
	ObservationsSeries(ctx context.Context, in *ObservationsSeriesRequest, opts ...grpc.CallOption) (*ObservationsSeriesResponse, error)
	BulkObservationsSeries(ctx context.Context, in *BulkObservationsSeriesRequest, opts ...grpc.CallOption) (*BulkObservationsSeriesResponse, error)
	BulkObservationsSeriesLinked(ctx context.Context, in *BulkObservationsSeriesLinkedRequest, opts ...grpc.CallOption) (*BulkObservationsSeriesResponse, error)
	ProteinPage(ctx context.Context, in *ProteinPageRequest, opts ...grpc.CallOption) (*GraphNodes, error)
	PlacePage(ctx context.Context, in *PlacePageRequest, opts ...grpc.CallOption) (*GetPlacePageDataResponse, error)
	VariableAncestors(ctx context.Context, in *VariableAncestorsRequest, opts ...grpc.CallOption) (*VariableAncestorsResponse, error)
	VariableGroups(ctx context.Context, in *VariableGroupsRequest, opts ...grpc.CallOption) (*VariableGroupsResponse, error)
}

type mixerClient struct {
	cc grpc.ClientConnInterface
}

func NewMixerClient(cc grpc.ClientConnInterface) MixerClient {
	return &mixerClient{cc}
}

func (c *mixerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPropertyLabels(ctx context.Context, in *GetPropertyLabelsRequest, opts ...grpc.CallOption) (*PayloadResponse, error) {
	out := new(PayloadResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPropertyLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPropertyValues(ctx context.Context, in *GetPropertyValuesRequest, opts ...grpc.CallOption) (*PayloadResponse, error) {
	out := new(PayloadResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPropertyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetTriples(ctx context.Context, in *GetTriplesRequest, opts ...grpc.CallOption) (*PayloadResponse, error) {
	out := new(PayloadResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetTriples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlacesIn(ctx context.Context, in *GetPlacesInRequest, opts ...grpc.CallOption) (*GetPlacesInResponse, error) {
	out := new(GetPlacesInResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlacesIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatSetSeries(ctx context.Context, in *GetStatSetSeriesRequest, opts ...grpc.CallOption) (*GetStatSetSeriesResponse, error) {
	out := new(GetStatSetSeriesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatSetSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatValue(ctx context.Context, in *GetStatValueRequest, opts ...grpc.CallOption) (*GetStatValueResponse, error) {
	out := new(GetStatValueResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatSeries(ctx context.Context, in *GetStatSeriesRequest, opts ...grpc.CallOption) (*GetStatSeriesResponse, error) {
	out := new(GetStatSeriesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatAll(ctx context.Context, in *GetStatAllRequest, opts ...grpc.CallOption) (*GetStatAllResponse, error) {
	out := new(GetStatAllResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatSetWithinPlace(ctx context.Context, in *GetStatSetWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatSetResponse, error) {
	out := new(GetStatSetResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatSetWithinPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatSetWithinPlaceAll(ctx context.Context, in *GetStatSetWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatSetAllResponse, error) {
	out := new(GetStatSetAllResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatSetWithinPlaceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatSet(ctx context.Context, in *GetStatSetRequest, opts ...grpc.CallOption) (*GetStatSetResponse, error) {
	out := new(GetStatSetResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatSetSeriesWithinPlace(ctx context.Context, in *GetStatSetSeriesWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatSetSeriesResponse, error) {
	out := new(GetStatSetSeriesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatSetSeriesWithinPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetLocationsRankings(ctx context.Context, in *GetLocationsRankingsRequest, opts ...grpc.CallOption) (*GetLocationsRankingsResponse, error) {
	out := new(GetLocationsRankingsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetLocationsRankings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetRelatedLocations(ctx context.Context, in *GetRelatedLocationsRequest, opts ...grpc.CallOption) (*GetRelatedLocationsResponse, error) {
	out := new(GetRelatedLocationsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetRelatedLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlacePageData(ctx context.Context, in *GetPlacePageDataRequest, opts ...grpc.CallOption) (*GetPlacePageDataResponse, error) {
	out := new(GetPlacePageDataResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlacePageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetBioPageData(ctx context.Context, in *GetBioPageDataRequest, opts ...grpc.CallOption) (*GraphNodes, error) {
	out := new(GraphNodes)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetBioPageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) Translate(ctx context.Context, in *TranslateRequest, opts ...grpc.CallOption) (*TranslateResponse, error) {
	out := new(TranslateResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/Translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlaceStatsVar(ctx context.Context, in *GetPlaceStatsVarRequest, opts ...grpc.CallOption) (*GetPlaceStatsVarResponse, error) {
	out := new(GetPlaceStatsVarResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlaceStatsVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlaceStatVars(ctx context.Context, in *GetPlaceStatVarsRequest, opts ...grpc.CallOption) (*GetPlaceStatVarsResponse, error) {
	out := new(GetPlaceStatVarsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlaceStatVars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlaceMetadata(ctx context.Context, in *GetPlaceMetadataRequest, opts ...grpc.CallOption) (*GetPlaceMetadataResponse, error) {
	out := new(GetPlaceMetadataResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlaceMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlaceStatVarsUnionV1(ctx context.Context, in *GetPlaceStatVarsUnionRequest, opts ...grpc.CallOption) (*GetPlaceStatVarsUnionResponse, error) {
	out := new(GetPlaceStatVarsUnionResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlaceStatVarsUnionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetPlaceStatDateWithinPlace(ctx context.Context, in *GetPlaceStatDateWithinPlaceRequest, opts ...grpc.CallOption) (*GetPlaceStatDateWithinPlaceResponse, error) {
	out := new(GetPlaceStatDateWithinPlaceResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetPlaceStatDateWithinPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatDateWithinPlace(ctx context.Context, in *GetStatDateWithinPlaceRequest, opts ...grpc.CallOption) (*GetStatDateWithinPlaceResponse, error) {
	out := new(GetStatDateWithinPlaceResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatDateWithinPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatVarGroup(ctx context.Context, in *GetStatVarGroupRequest, opts ...grpc.CallOption) (*StatVarGroups, error) {
	out := new(StatVarGroups)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatVarGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatVarGroupNode(ctx context.Context, in *GetStatVarGroupNodeRequest, opts ...grpc.CallOption) (*StatVarGroupNode, error) {
	out := new(StatVarGroupNode)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatVarGroupNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatVarPath(ctx context.Context, in *GetStatVarPathRequest, opts ...grpc.CallOption) (*GetStatVarPathResponse, error) {
	out := new(GetStatVarPathResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatVarPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) SearchStatVar(ctx context.Context, in *SearchStatVarRequest, opts ...grpc.CallOption) (*SearchStatVarResponse, error) {
	out := new(SearchStatVarResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/SearchStatVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatVarSummary(ctx context.Context, in *GetStatVarSummaryRequest, opts ...grpc.CallOption) (*GetStatVarSummaryResponse, error) {
	out := new(GetStatVarSummaryResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatVarSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) GetStatVarMatch(ctx context.Context, in *GetStatVarMatchRequest, opts ...grpc.CallOption) (*GetStatVarMatchResponse, error) {
	out := new(GetStatVarMatchResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/GetStatVarMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) Properties(ctx context.Context, in *PropertiesRequest, opts ...grpc.CallOption) (*PropertiesResponse, error) {
	out := new(PropertiesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/Properties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkProperties(ctx context.Context, in *BulkPropertiesRequest, opts ...grpc.CallOption) (*BulkPropertiesResponse, error) {
	out := new(BulkPropertiesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) PropertyValues(ctx context.Context, in *PropertyValuesRequest, opts ...grpc.CallOption) (*PropertyValuesResponse, error) {
	out := new(PropertyValuesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/PropertyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) LinkedPropertyValues(ctx context.Context, in *LinkedPropertyValuesRequest, opts ...grpc.CallOption) (*LinkedPropertyValuesResponse, error) {
	out := new(LinkedPropertyValuesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/LinkedPropertyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkPropertyValues(ctx context.Context, in *BulkPropertyValuesRequest, opts ...grpc.CallOption) (*BulkPropertyValuesResponse, error) {
	out := new(BulkPropertyValuesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkPropertyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) Triples(ctx context.Context, in *TriplesRequest, opts ...grpc.CallOption) (*TriplesResponse, error) {
	out := new(TriplesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/Triples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkTriples(ctx context.Context, in *BulkTriplesRequest, opts ...grpc.CallOption) (*BulkTriplesResponse, error) {
	out := new(BulkTriplesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkTriples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) Variables(ctx context.Context, in *VariablesRequest, opts ...grpc.CallOption) (*VariablesResponse, error) {
	out := new(VariablesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/Variables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkVariables(ctx context.Context, in *BulkVariablesRequest, opts ...grpc.CallOption) (*BulkVariablesResponse, error) {
	out := new(BulkVariablesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) PlaceInfo(ctx context.Context, in *PlaceInfoRequest, opts ...grpc.CallOption) (*PlaceInfoResponse, error) {
	out := new(PlaceInfoResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/PlaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkPlaceInfo(ctx context.Context, in *BulkPlaceInfoRequest, opts ...grpc.CallOption) (*BulkPlaceInfoResponse, error) {
	out := new(BulkPlaceInfoResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkPlaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) VariableInfo(ctx context.Context, in *VariableInfoRequest, opts ...grpc.CallOption) (*VariableInfoResponse, error) {
	out := new(VariableInfoResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/VariableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkVariableInfo(ctx context.Context, in *BulkVariableInfoRequest, opts ...grpc.CallOption) (*BulkVariableInfoResponse, error) {
	out := new(BulkVariableInfoResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkVariableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) ObservationsPoint(ctx context.Context, in *ObservationsPointRequest, opts ...grpc.CallOption) (*PointStat, error) {
	out := new(PointStat)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/ObservationsPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkObservationsPoint(ctx context.Context, in *BulkObservationsPointRequest, opts ...grpc.CallOption) (*BulkObservationsPointResponse, error) {
	out := new(BulkObservationsPointResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkObservationsPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkObservationsPointLinked(ctx context.Context, in *BulkObservationsPointLinkedRequest, opts ...grpc.CallOption) (*BulkObservationsPointResponse, error) {
	out := new(BulkObservationsPointResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkObservationsPointLinked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) ObservationsSeries(ctx context.Context, in *ObservationsSeriesRequest, opts ...grpc.CallOption) (*ObservationsSeriesResponse, error) {
	out := new(ObservationsSeriesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/ObservationsSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkObservationsSeries(ctx context.Context, in *BulkObservationsSeriesRequest, opts ...grpc.CallOption) (*BulkObservationsSeriesResponse, error) {
	out := new(BulkObservationsSeriesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkObservationsSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) BulkObservationsSeriesLinked(ctx context.Context, in *BulkObservationsSeriesLinkedRequest, opts ...grpc.CallOption) (*BulkObservationsSeriesResponse, error) {
	out := new(BulkObservationsSeriesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/BulkObservationsSeriesLinked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) ProteinPage(ctx context.Context, in *ProteinPageRequest, opts ...grpc.CallOption) (*GraphNodes, error) {
	out := new(GraphNodes)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/ProteinPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) PlacePage(ctx context.Context, in *PlacePageRequest, opts ...grpc.CallOption) (*GetPlacePageDataResponse, error) {
	out := new(GetPlacePageDataResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/PlacePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) VariableAncestors(ctx context.Context, in *VariableAncestorsRequest, opts ...grpc.CallOption) (*VariableAncestorsResponse, error) {
	out := new(VariableAncestorsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/VariableAncestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixerClient) VariableGroups(ctx context.Context, in *VariableGroupsRequest, opts ...grpc.CallOption) (*VariableGroupsResponse, error) {
	out := new(VariableGroupsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Mixer/VariableGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixerServer is the server API for Mixer service.
// All implementations should embed UnimplementedMixerServer
// for forward compatibility
type MixerServer interface {
	// Query DataCommons Graph with Sparql.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Fetch property labels adjacent of nodes
	GetPropertyLabels(context.Context, *GetPropertyLabelsRequest) (*PayloadResponse, error)
	// Fetch nodes that linked to source nodes with a given property.
	GetPropertyValues(context.Context, *GetPropertyValuesRequest) (*PayloadResponse, error)
	// Fetch triples that have the given nodes as subject or object.
	GetTriples(context.Context, *GetTriplesRequest) (*PayloadResponse, error)
	// Get places contained in parent places.
	GetPlacesIn(context.Context, *GetPlacesInRequest) (*GetPlacesInResponse, error)
	// Get stats of places by StatisticalVariable. If multiple time series data
	// are avaialable, the highest ranked one by measurement method and import
	// will be returned.
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// Get stat of a set of places and statistical variables.
	//
	// If multiple time series data are avaialable, the highest ranked one by
	// measurement method, scaling factor and import will be returned.
	// This is a newer version of GetStats() that takes multiple stat vars and
	// returns protobuf field instead of "payload" of json string.
	GetStatSetSeries(context.Context, *GetStatSetSeriesRequest) (*GetStatSetSeriesResponse, error)
	// Get a single stat value given a place, a statistical variable and a date.
	// If no date is given, the latest statistical variable will be returned.
	GetStatValue(context.Context, *GetStatValueRequest) (*GetStatValueResponse, error)
	// Get a series of stat value with dates, given the place and statistical
	// variable.
	GetStatSeries(context.Context, *GetStatSeriesRequest) (*GetStatSeriesResponse, error)
	// Get all stat series given a list of places and a list of statistical
	// variables.
	GetStatAll(context.Context, *GetStatAllRequest) (*GetStatAllResponse, error)
	// Get the stat value for children places of certain place type at a given
	// date.
	GetStatSetWithinPlace(context.Context, *GetStatSetWithinPlaceRequest) (*GetStatSetResponse, error)
	// Get the stat value from all sources for children places of certain place
	// type. If date is not specified, the latest value of every source is
	// returned.
	GetStatSetWithinPlaceAll(context.Context, *GetStatSetWithinPlaceRequest) (*GetStatSetAllResponse, error)
	// Get the stat value for given places and stat vars. If date is not given,
	// then the latest value for each <place, stat var> is returned.
	GetStatSet(context.Context, *GetStatSetRequest) (*GetStatSetResponse, error)
	// Get the stat series for given parent places and child place type.
	GetStatSetSeriesWithinPlace(context.Context, *GetStatSetSeriesWithinPlaceRequest) (*GetStatSetSeriesResponse, error)
	// Get rankings for given stat var DCIDs.
	GetLocationsRankings(context.Context, *GetLocationsRankingsRequest) (*GetLocationsRankingsResponse, error)
	// Get related locations for given stat var DCIDs.
	GetRelatedLocations(context.Context, *GetRelatedLocationsRequest) (*GetRelatedLocationsResponse, error)
	// Get place page info for a place.
	GetPlacePageData(context.Context, *GetPlacePageDataRequest) (*GetPlacePageDataResponse, error)
	// Get bio page data given a dcid.
	GetBioPageData(context.Context, *GetBioPageDataRequest) (*GraphNodes, error)
	// Translate Sparql Query into translation results.
	Translate(context.Context, *TranslateRequest) (*TranslateResponse, error)
	// Given a text search query, return all entities matching the query.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Retrieves the version metadata.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Give a list of place dcids, return all the statistical variables for each
	// place.
	GetPlaceStatsVar(context.Context, *GetPlaceStatsVarRequest) (*GetPlaceStatsVarResponse, error)
	// Give a list of place dcids, return all the statistical variables for each
	// place.
	// TODO(shifucun): Deprecate GetPlaceStatsVar when all internal clients are
	// migrated.
	GetPlaceStatVars(context.Context, *GetPlaceStatVarsRequest) (*GetPlaceStatVarsResponse, error)
	// Give a list of place dcids, return metadata for each place.
	GetPlaceMetadata(context.Context, *GetPlaceMetadataRequest) (*GetPlaceMetadataResponse, error)
	// Given a list of place dcids, returns the union of available
	// statistical variables for the places.
	GetPlaceStatVarsUnionV1(context.Context, *GetPlaceStatVarsUnionRequest) (*GetPlaceStatVarsUnionResponse, error)
	// Given ancestor place, child place type and stat vars, return the dates that
	// have data for each stat var across all child places.
	// [!! Deprecated] in favor of GetStatDateWithinPlace
	GetPlaceStatDateWithinPlace(context.Context, *GetPlaceStatDateWithinPlaceRequest) (*GetPlaceStatDateWithinPlaceResponse, error)
	// Given ancestor place, child place type and stat vars, return the dates and
	// place count for each source
	GetStatDateWithinPlace(context.Context, *GetStatDateWithinPlaceRequest) (*GetStatDateWithinPlaceResponse, error)
	// Given a place, get the statvar group for stat vars that have data for it.
	GetStatVarGroup(context.Context, *GetStatVarGroupRequest) (*StatVarGroups, error)
	// Get the stat var group node info. The children stat var and stat var group
	// should have data for at least one of the give places.
	GetStatVarGroupNode(context.Context, *GetStatVarGroupNodeRequest) (*StatVarGroupNode, error)
	// Get the path from a stat var or a stat var group path to the root
	// of stat var hierarchy
	GetStatVarPath(context.Context, *GetStatVarPathRequest) (*GetStatVarPathResponse, error)
	// Search stat var and stat var groups.
	SearchStatVar(context.Context, *SearchStatVarRequest) (*SearchStatVarResponse, error)
	// Given a list of stat vars, get their summaries.
	GetStatVarSummary(context.Context, *GetStatVarSummaryRequest) (*GetStatVarSummaryResponse, error)
	// Find matched stat vars given constraint properties
	GetStatVarMatch(context.Context, *GetStatVarMatchRequest) (*GetStatVarMatchResponse, error)
	// ======================  V1   V1   V1   V1  ======================
	Properties(context.Context, *PropertiesRequest) (*PropertiesResponse, error)
	BulkProperties(context.Context, *BulkPropertiesRequest) (*BulkPropertiesResponse, error)
	PropertyValues(context.Context, *PropertyValuesRequest) (*PropertyValuesResponse, error)
	LinkedPropertyValues(context.Context, *LinkedPropertyValuesRequest) (*LinkedPropertyValuesResponse, error)
	BulkPropertyValues(context.Context, *BulkPropertyValuesRequest) (*BulkPropertyValuesResponse, error)
	Triples(context.Context, *TriplesRequest) (*TriplesResponse, error)
	BulkTriples(context.Context, *BulkTriplesRequest) (*BulkTriplesResponse, error)
	Variables(context.Context, *VariablesRequest) (*VariablesResponse, error)
	BulkVariables(context.Context, *BulkVariablesRequest) (*BulkVariablesResponse, error)
	PlaceInfo(context.Context, *PlaceInfoRequest) (*PlaceInfoResponse, error)
	BulkPlaceInfo(context.Context, *BulkPlaceInfoRequest) (*BulkPlaceInfoResponse, error)
	VariableInfo(context.Context, *VariableInfoRequest) (*VariableInfoResponse, error)
	BulkVariableInfo(context.Context, *BulkVariableInfoRequest) (*BulkVariableInfoResponse, error)
	ObservationsPoint(context.Context, *ObservationsPointRequest) (*PointStat, error)
	BulkObservationsPoint(context.Context, *BulkObservationsPointRequest) (*BulkObservationsPointResponse, error)
	BulkObservationsPointLinked(context.Context, *BulkObservationsPointLinkedRequest) (*BulkObservationsPointResponse, error)
	ObservationsSeries(context.Context, *ObservationsSeriesRequest) (*ObservationsSeriesResponse, error)
	BulkObservationsSeries(context.Context, *BulkObservationsSeriesRequest) (*BulkObservationsSeriesResponse, error)
	BulkObservationsSeriesLinked(context.Context, *BulkObservationsSeriesLinkedRequest) (*BulkObservationsSeriesResponse, error)
	ProteinPage(context.Context, *ProteinPageRequest) (*GraphNodes, error)
	PlacePage(context.Context, *PlacePageRequest) (*GetPlacePageDataResponse, error)
	VariableAncestors(context.Context, *VariableAncestorsRequest) (*VariableAncestorsResponse, error)
	VariableGroups(context.Context, *VariableGroupsRequest) (*VariableGroupsResponse, error)
}

// UnimplementedMixerServer should be embedded to have forward compatible implementations.
type UnimplementedMixerServer struct {
}

func (UnimplementedMixerServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMixerServer) GetPropertyLabels(context.Context, *GetPropertyLabelsRequest) (*PayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyLabels not implemented")
}
func (UnimplementedMixerServer) GetPropertyValues(context.Context, *GetPropertyValuesRequest) (*PayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyValues not implemented")
}
func (UnimplementedMixerServer) GetTriples(context.Context, *GetTriplesRequest) (*PayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriples not implemented")
}
func (UnimplementedMixerServer) GetPlacesIn(context.Context, *GetPlacesInRequest) (*GetPlacesInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlacesIn not implemented")
}
func (UnimplementedMixerServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedMixerServer) GetStatSetSeries(context.Context, *GetStatSetSeriesRequest) (*GetStatSetSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatSetSeries not implemented")
}
func (UnimplementedMixerServer) GetStatValue(context.Context, *GetStatValueRequest) (*GetStatValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatValue not implemented")
}
func (UnimplementedMixerServer) GetStatSeries(context.Context, *GetStatSeriesRequest) (*GetStatSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatSeries not implemented")
}
func (UnimplementedMixerServer) GetStatAll(context.Context, *GetStatAllRequest) (*GetStatAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatAll not implemented")
}
func (UnimplementedMixerServer) GetStatSetWithinPlace(context.Context, *GetStatSetWithinPlaceRequest) (*GetStatSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatSetWithinPlace not implemented")
}
func (UnimplementedMixerServer) GetStatSetWithinPlaceAll(context.Context, *GetStatSetWithinPlaceRequest) (*GetStatSetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatSetWithinPlaceAll not implemented")
}
func (UnimplementedMixerServer) GetStatSet(context.Context, *GetStatSetRequest) (*GetStatSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatSet not implemented")
}
func (UnimplementedMixerServer) GetStatSetSeriesWithinPlace(context.Context, *GetStatSetSeriesWithinPlaceRequest) (*GetStatSetSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatSetSeriesWithinPlace not implemented")
}
func (UnimplementedMixerServer) GetLocationsRankings(context.Context, *GetLocationsRankingsRequest) (*GetLocationsRankingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationsRankings not implemented")
}
func (UnimplementedMixerServer) GetRelatedLocations(context.Context, *GetRelatedLocationsRequest) (*GetRelatedLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedLocations not implemented")
}
func (UnimplementedMixerServer) GetPlacePageData(context.Context, *GetPlacePageDataRequest) (*GetPlacePageDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlacePageData not implemented")
}
func (UnimplementedMixerServer) GetBioPageData(context.Context, *GetBioPageDataRequest) (*GraphNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBioPageData not implemented")
}
func (UnimplementedMixerServer) Translate(context.Context, *TranslateRequest) (*TranslateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (UnimplementedMixerServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMixerServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedMixerServer) GetPlaceStatsVar(context.Context, *GetPlaceStatsVarRequest) (*GetPlaceStatsVarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceStatsVar not implemented")
}
func (UnimplementedMixerServer) GetPlaceStatVars(context.Context, *GetPlaceStatVarsRequest) (*GetPlaceStatVarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceStatVars not implemented")
}
func (UnimplementedMixerServer) GetPlaceMetadata(context.Context, *GetPlaceMetadataRequest) (*GetPlaceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceMetadata not implemented")
}
func (UnimplementedMixerServer) GetPlaceStatVarsUnionV1(context.Context, *GetPlaceStatVarsUnionRequest) (*GetPlaceStatVarsUnionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceStatVarsUnionV1 not implemented")
}
func (UnimplementedMixerServer) GetPlaceStatDateWithinPlace(context.Context, *GetPlaceStatDateWithinPlaceRequest) (*GetPlaceStatDateWithinPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceStatDateWithinPlace not implemented")
}
func (UnimplementedMixerServer) GetStatDateWithinPlace(context.Context, *GetStatDateWithinPlaceRequest) (*GetStatDateWithinPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatDateWithinPlace not implemented")
}
func (UnimplementedMixerServer) GetStatVarGroup(context.Context, *GetStatVarGroupRequest) (*StatVarGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatVarGroup not implemented")
}
func (UnimplementedMixerServer) GetStatVarGroupNode(context.Context, *GetStatVarGroupNodeRequest) (*StatVarGroupNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatVarGroupNode not implemented")
}
func (UnimplementedMixerServer) GetStatVarPath(context.Context, *GetStatVarPathRequest) (*GetStatVarPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatVarPath not implemented")
}
func (UnimplementedMixerServer) SearchStatVar(context.Context, *SearchStatVarRequest) (*SearchStatVarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStatVar not implemented")
}
func (UnimplementedMixerServer) GetStatVarSummary(context.Context, *GetStatVarSummaryRequest) (*GetStatVarSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatVarSummary not implemented")
}
func (UnimplementedMixerServer) GetStatVarMatch(context.Context, *GetStatVarMatchRequest) (*GetStatVarMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatVarMatch not implemented")
}
func (UnimplementedMixerServer) Properties(context.Context, *PropertiesRequest) (*PropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Properties not implemented")
}
func (UnimplementedMixerServer) BulkProperties(context.Context, *BulkPropertiesRequest) (*BulkPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkProperties not implemented")
}
func (UnimplementedMixerServer) PropertyValues(context.Context, *PropertyValuesRequest) (*PropertyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyValues not implemented")
}
func (UnimplementedMixerServer) LinkedPropertyValues(context.Context, *LinkedPropertyValuesRequest) (*LinkedPropertyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkedPropertyValues not implemented")
}
func (UnimplementedMixerServer) BulkPropertyValues(context.Context, *BulkPropertyValuesRequest) (*BulkPropertyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkPropertyValues not implemented")
}
func (UnimplementedMixerServer) Triples(context.Context, *TriplesRequest) (*TriplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Triples not implemented")
}
func (UnimplementedMixerServer) BulkTriples(context.Context, *BulkTriplesRequest) (*BulkTriplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkTriples not implemented")
}
func (UnimplementedMixerServer) Variables(context.Context, *VariablesRequest) (*VariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Variables not implemented")
}
func (UnimplementedMixerServer) BulkVariables(context.Context, *BulkVariablesRequest) (*BulkVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkVariables not implemented")
}
func (UnimplementedMixerServer) PlaceInfo(context.Context, *PlaceInfoRequest) (*PlaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceInfo not implemented")
}
func (UnimplementedMixerServer) BulkPlaceInfo(context.Context, *BulkPlaceInfoRequest) (*BulkPlaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkPlaceInfo not implemented")
}
func (UnimplementedMixerServer) VariableInfo(context.Context, *VariableInfoRequest) (*VariableInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VariableInfo not implemented")
}
func (UnimplementedMixerServer) BulkVariableInfo(context.Context, *BulkVariableInfoRequest) (*BulkVariableInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkVariableInfo not implemented")
}
func (UnimplementedMixerServer) ObservationsPoint(context.Context, *ObservationsPointRequest) (*PointStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservationsPoint not implemented")
}
func (UnimplementedMixerServer) BulkObservationsPoint(context.Context, *BulkObservationsPointRequest) (*BulkObservationsPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkObservationsPoint not implemented")
}
func (UnimplementedMixerServer) BulkObservationsPointLinked(context.Context, *BulkObservationsPointLinkedRequest) (*BulkObservationsPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkObservationsPointLinked not implemented")
}
func (UnimplementedMixerServer) ObservationsSeries(context.Context, *ObservationsSeriesRequest) (*ObservationsSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservationsSeries not implemented")
}
func (UnimplementedMixerServer) BulkObservationsSeries(context.Context, *BulkObservationsSeriesRequest) (*BulkObservationsSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkObservationsSeries not implemented")
}
func (UnimplementedMixerServer) BulkObservationsSeriesLinked(context.Context, *BulkObservationsSeriesLinkedRequest) (*BulkObservationsSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkObservationsSeriesLinked not implemented")
}
func (UnimplementedMixerServer) ProteinPage(context.Context, *ProteinPageRequest) (*GraphNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProteinPage not implemented")
}
func (UnimplementedMixerServer) PlacePage(context.Context, *PlacePageRequest) (*GetPlacePageDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlacePage not implemented")
}
func (UnimplementedMixerServer) VariableAncestors(context.Context, *VariableAncestorsRequest) (*VariableAncestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VariableAncestors not implemented")
}
func (UnimplementedMixerServer) VariableGroups(context.Context, *VariableGroupsRequest) (*VariableGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VariableGroups not implemented")
}

// UnsafeMixerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MixerServer will
// result in compilation errors.
type UnsafeMixerServer interface {
	mustEmbedUnimplementedMixerServer()
}

func RegisterMixerServer(s grpc.ServiceRegistrar, srv MixerServer) {
	s.RegisterService(&Mixer_ServiceDesc, srv)
}

func _Mixer_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPropertyLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPropertyLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPropertyLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPropertyLabels(ctx, req.(*GetPropertyLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPropertyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPropertyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPropertyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPropertyValues(ctx, req.(*GetPropertyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetTriples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetTriples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetTriples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetTriples(ctx, req.(*GetTriplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlacesIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlacesInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlacesIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlacesIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlacesIn(ctx, req.(*GetPlacesInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatSetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatSetSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatSetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatSetSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatSetSeries(ctx, req.(*GetStatSetSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatValue(ctx, req.(*GetStatValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatSeries(ctx, req.(*GetStatSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatAll(ctx, req.(*GetStatAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatSetWithinPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatSetWithinPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatSetWithinPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatSetWithinPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatSetWithinPlace(ctx, req.(*GetStatSetWithinPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatSetWithinPlaceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatSetWithinPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatSetWithinPlaceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatSetWithinPlaceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatSetWithinPlaceAll(ctx, req.(*GetStatSetWithinPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatSet(ctx, req.(*GetStatSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatSetSeriesWithinPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatSetSeriesWithinPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatSetSeriesWithinPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatSetSeriesWithinPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatSetSeriesWithinPlace(ctx, req.(*GetStatSetSeriesWithinPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetLocationsRankings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationsRankingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetLocationsRankings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetLocationsRankings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetLocationsRankings(ctx, req.(*GetLocationsRankingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetRelatedLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetRelatedLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetRelatedLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetRelatedLocations(ctx, req.(*GetRelatedLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlacePageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlacePageDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlacePageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlacePageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlacePageData(ctx, req.(*GetPlacePageDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetBioPageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBioPageDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetBioPageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetBioPageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetBioPageData(ctx, req.(*GetBioPageDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/Translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Translate(ctx, req.(*TranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlaceStatsVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceStatsVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlaceStatsVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlaceStatsVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlaceStatsVar(ctx, req.(*GetPlaceStatsVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlaceStatVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceStatVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlaceStatVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlaceStatVars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlaceStatVars(ctx, req.(*GetPlaceStatVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlaceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlaceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlaceMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlaceMetadata(ctx, req.(*GetPlaceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlaceStatVarsUnionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceStatVarsUnionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlaceStatVarsUnionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlaceStatVarsUnionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlaceStatVarsUnionV1(ctx, req.(*GetPlaceStatVarsUnionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetPlaceStatDateWithinPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceStatDateWithinPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetPlaceStatDateWithinPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetPlaceStatDateWithinPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetPlaceStatDateWithinPlace(ctx, req.(*GetPlaceStatDateWithinPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatDateWithinPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatDateWithinPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatDateWithinPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatDateWithinPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatDateWithinPlace(ctx, req.(*GetStatDateWithinPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatVarGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatVarGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatVarGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatVarGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatVarGroup(ctx, req.(*GetStatVarGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatVarGroupNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatVarGroupNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatVarGroupNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatVarGroupNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatVarGroupNode(ctx, req.(*GetStatVarGroupNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatVarPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatVarPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatVarPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatVarPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatVarPath(ctx, req.(*GetStatVarPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_SearchStatVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStatVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).SearchStatVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/SearchStatVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).SearchStatVar(ctx, req.(*SearchStatVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatVarSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatVarSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatVarSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatVarSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatVarSummary(ctx, req.(*GetStatVarSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_GetStatVarMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatVarMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).GetStatVarMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/GetStatVarMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).GetStatVarMatch(ctx, req.(*GetStatVarMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_Properties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Properties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/Properties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Properties(ctx, req.(*PropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkProperties(ctx, req.(*BulkPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_PropertyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).PropertyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/PropertyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).PropertyValues(ctx, req.(*PropertyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_LinkedPropertyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkedPropertyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).LinkedPropertyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/LinkedPropertyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).LinkedPropertyValues(ctx, req.(*LinkedPropertyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkPropertyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPropertyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkPropertyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkPropertyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkPropertyValues(ctx, req.(*BulkPropertyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_Triples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Triples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/Triples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Triples(ctx, req.(*TriplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkTriples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkTriplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkTriples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkTriples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkTriples(ctx, req.(*BulkTriplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_Variables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Variables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/Variables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Variables(ctx, req.(*VariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkVariables(ctx, req.(*BulkVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_PlaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).PlaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/PlaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).PlaceInfo(ctx, req.(*PlaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkPlaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPlaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkPlaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkPlaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkPlaceInfo(ctx, req.(*BulkPlaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_VariableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).VariableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/VariableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).VariableInfo(ctx, req.(*VariableInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkVariableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkVariableInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkVariableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkVariableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkVariableInfo(ctx, req.(*BulkVariableInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_ObservationsPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).ObservationsPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/ObservationsPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).ObservationsPoint(ctx, req.(*ObservationsPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkObservationsPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkObservationsPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkObservationsPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkObservationsPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkObservationsPoint(ctx, req.(*BulkObservationsPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkObservationsPointLinked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkObservationsPointLinkedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkObservationsPointLinked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkObservationsPointLinked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkObservationsPointLinked(ctx, req.(*BulkObservationsPointLinkedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_ObservationsSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).ObservationsSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/ObservationsSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).ObservationsSeries(ctx, req.(*ObservationsSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkObservationsSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkObservationsSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkObservationsSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkObservationsSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkObservationsSeries(ctx, req.(*BulkObservationsSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_BulkObservationsSeriesLinked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkObservationsSeriesLinkedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).BulkObservationsSeriesLinked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/BulkObservationsSeriesLinked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).BulkObservationsSeriesLinked(ctx, req.(*BulkObservationsSeriesLinkedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_ProteinPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProteinPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).ProteinPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/ProteinPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).ProteinPage(ctx, req.(*ProteinPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_PlacePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlacePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).PlacePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/PlacePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).PlacePage(ctx, req.(*PlacePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_VariableAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableAncestorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).VariableAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/VariableAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).VariableAncestors(ctx, req.(*VariableAncestorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_VariableGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).VariableGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Mixer/VariableGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).VariableGroups(ctx, req.(*VariableGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mixer_ServiceDesc is the grpc.ServiceDesc for Mixer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mixer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datacommons.Mixer",
	HandlerType: (*MixerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Mixer_Query_Handler,
		},
		{
			MethodName: "GetPropertyLabels",
			Handler:    _Mixer_GetPropertyLabels_Handler,
		},
		{
			MethodName: "GetPropertyValues",
			Handler:    _Mixer_GetPropertyValues_Handler,
		},
		{
			MethodName: "GetTriples",
			Handler:    _Mixer_GetTriples_Handler,
		},
		{
			MethodName: "GetPlacesIn",
			Handler:    _Mixer_GetPlacesIn_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Mixer_GetStats_Handler,
		},
		{
			MethodName: "GetStatSetSeries",
			Handler:    _Mixer_GetStatSetSeries_Handler,
		},
		{
			MethodName: "GetStatValue",
			Handler:    _Mixer_GetStatValue_Handler,
		},
		{
			MethodName: "GetStatSeries",
			Handler:    _Mixer_GetStatSeries_Handler,
		},
		{
			MethodName: "GetStatAll",
			Handler:    _Mixer_GetStatAll_Handler,
		},
		{
			MethodName: "GetStatSetWithinPlace",
			Handler:    _Mixer_GetStatSetWithinPlace_Handler,
		},
		{
			MethodName: "GetStatSetWithinPlaceAll",
			Handler:    _Mixer_GetStatSetWithinPlaceAll_Handler,
		},
		{
			MethodName: "GetStatSet",
			Handler:    _Mixer_GetStatSet_Handler,
		},
		{
			MethodName: "GetStatSetSeriesWithinPlace",
			Handler:    _Mixer_GetStatSetSeriesWithinPlace_Handler,
		},
		{
			MethodName: "GetLocationsRankings",
			Handler:    _Mixer_GetLocationsRankings_Handler,
		},
		{
			MethodName: "GetRelatedLocations",
			Handler:    _Mixer_GetRelatedLocations_Handler,
		},
		{
			MethodName: "GetPlacePageData",
			Handler:    _Mixer_GetPlacePageData_Handler,
		},
		{
			MethodName: "GetBioPageData",
			Handler:    _Mixer_GetBioPageData_Handler,
		},
		{
			MethodName: "Translate",
			Handler:    _Mixer_Translate_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Mixer_Search_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Mixer_GetVersion_Handler,
		},
		{
			MethodName: "GetPlaceStatsVar",
			Handler:    _Mixer_GetPlaceStatsVar_Handler,
		},
		{
			MethodName: "GetPlaceStatVars",
			Handler:    _Mixer_GetPlaceStatVars_Handler,
		},
		{
			MethodName: "GetPlaceMetadata",
			Handler:    _Mixer_GetPlaceMetadata_Handler,
		},
		{
			MethodName: "GetPlaceStatVarsUnionV1",
			Handler:    _Mixer_GetPlaceStatVarsUnionV1_Handler,
		},
		{
			MethodName: "GetPlaceStatDateWithinPlace",
			Handler:    _Mixer_GetPlaceStatDateWithinPlace_Handler,
		},
		{
			MethodName: "GetStatDateWithinPlace",
			Handler:    _Mixer_GetStatDateWithinPlace_Handler,
		},
		{
			MethodName: "GetStatVarGroup",
			Handler:    _Mixer_GetStatVarGroup_Handler,
		},
		{
			MethodName: "GetStatVarGroupNode",
			Handler:    _Mixer_GetStatVarGroupNode_Handler,
		},
		{
			MethodName: "GetStatVarPath",
			Handler:    _Mixer_GetStatVarPath_Handler,
		},
		{
			MethodName: "SearchStatVar",
			Handler:    _Mixer_SearchStatVar_Handler,
		},
		{
			MethodName: "GetStatVarSummary",
			Handler:    _Mixer_GetStatVarSummary_Handler,
		},
		{
			MethodName: "GetStatVarMatch",
			Handler:    _Mixer_GetStatVarMatch_Handler,
		},
		{
			MethodName: "Properties",
			Handler:    _Mixer_Properties_Handler,
		},
		{
			MethodName: "BulkProperties",
			Handler:    _Mixer_BulkProperties_Handler,
		},
		{
			MethodName: "PropertyValues",
			Handler:    _Mixer_PropertyValues_Handler,
		},
		{
			MethodName: "LinkedPropertyValues",
			Handler:    _Mixer_LinkedPropertyValues_Handler,
		},
		{
			MethodName: "BulkPropertyValues",
			Handler:    _Mixer_BulkPropertyValues_Handler,
		},
		{
			MethodName: "Triples",
			Handler:    _Mixer_Triples_Handler,
		},
		{
			MethodName: "BulkTriples",
			Handler:    _Mixer_BulkTriples_Handler,
		},
		{
			MethodName: "Variables",
			Handler:    _Mixer_Variables_Handler,
		},
		{
			MethodName: "BulkVariables",
			Handler:    _Mixer_BulkVariables_Handler,
		},
		{
			MethodName: "PlaceInfo",
			Handler:    _Mixer_PlaceInfo_Handler,
		},
		{
			MethodName: "BulkPlaceInfo",
			Handler:    _Mixer_BulkPlaceInfo_Handler,
		},
		{
			MethodName: "VariableInfo",
			Handler:    _Mixer_VariableInfo_Handler,
		},
		{
			MethodName: "BulkVariableInfo",
			Handler:    _Mixer_BulkVariableInfo_Handler,
		},
		{
			MethodName: "ObservationsPoint",
			Handler:    _Mixer_ObservationsPoint_Handler,
		},
		{
			MethodName: "BulkObservationsPoint",
			Handler:    _Mixer_BulkObservationsPoint_Handler,
		},
		{
			MethodName: "BulkObservationsPointLinked",
			Handler:    _Mixer_BulkObservationsPointLinked_Handler,
		},
		{
			MethodName: "ObservationsSeries",
			Handler:    _Mixer_ObservationsSeries_Handler,
		},
		{
			MethodName: "BulkObservationsSeries",
			Handler:    _Mixer_BulkObservationsSeries_Handler,
		},
		{
			MethodName: "BulkObservationsSeriesLinked",
			Handler:    _Mixer_BulkObservationsSeriesLinked_Handler,
		},
		{
			MethodName: "ProteinPage",
			Handler:    _Mixer_ProteinPage_Handler,
		},
		{
			MethodName: "PlacePage",
			Handler:    _Mixer_PlacePage_Handler,
		},
		{
			MethodName: "VariableAncestors",
			Handler:    _Mixer_VariableAncestors_Handler,
		},
		{
			MethodName: "VariableGroups",
			Handler:    _Mixer_VariableGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixer.proto",
}
